#!/usr/bin/executor

/*******************************************************************************
 * Copyright (c) 2020-2021 Alexander Kapralov and Contributors
 * This program and the accompanying materials are made available under
 * the terms of the BSD 3-Clause License which is available at
 * https://spdx.org/licenses/BSD-3-Clause.html#licenseText
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Contributors:
 *    Aleksandr Kapralov - Initial API and implementation
 *
 ******************************************************************************/

конст ВЕРСИЯ = "1.0.1"


метод Скрипт()
	Консоль.Записать("Скрипт для автоматизированного тестирования на Vanessa Automation (%ВЕРСИЯ)")

	Консоль.Записать("\нСписок команд:\н")

	Консоль.Записать("АвтотестыVA version")
	Консоль.Записать("\тВозвращает текущую версию скрипта")

	Консоль.Записать("АвтотестыVA update")
	Консоль.Записать("\тОбновляет скрипт, VanessaAutomation и необходимые шаблоны шагов")
;

метод version()
	Консоль.Записать("Версия: %ВЕРСИЯ\н")
;

метод update()
	Консоль.Записать("Обновление:")

	Консоль.Записать("\тСкрипт АвтотестыVA")
	Консоль.Записать("\т- скачивание новой версии")
	пер временныйСкрипт = СкачатьНовуюВерсиюСкрипта()
	пер версияНовогоСкрипта = ВерсияНовогоСкрипта(временныйСкрипт)
	Консоль.Записать("\т- Новая версия скрипта %версияНовогоСкрипта")
;

метод СкачатьНовуюВерсиюСкрипта(): Файл
	пер клиентHttp = КлиентHttp.СБазовымUrl("https://raw.githubusercontent.com/")
	пер запросGet = клиентHttp.ЗапросGet("/DoublesunRUS/devscripts/master/VA-Тесты/АвтоТестыVA.sbsl")
	исп ответHttp = запросGet.Выполнить()

	знч временныйСкрипт = Файлы.СоздатьВременныйФайл("АвтотестыVA", ".sbsl", Ложь)
	исп потокЗаписи = временныйСкрипт.ОткрытьПотокЗаписи()
	ответHttp.Тело.КопироватьВ(потокЗаписи)

	возврат временныйСкрипт
;

метод КодировкаПотокаВыводаСкриптов(): Строка
	возврат СредаИсполнения.ПолучитьСвойство("file.encoding")
;

метод ВыполнитьСкрипт(имяФайлаСкрипта: Строка, имяКомандыСкрипта: Строка, параметрыСкрипта: Массив): ПотокЧтения
	пер расширениеИсполнителя: Строка
	знч имяОС = СредаИсполнения.ПолучитьСвойство("os.name")
	выбор когда имяОС.НачинаетсяС("windows", Истина)
		расширениеИсполнителя = "cmd"
	иначе
		расширениеИсполнителя = "sh"
	;
	знч путьКИсполнителю = СредаИсполнения.ПолучитьСвойство("logback.configurationFile").Удалить("config" + Файлы.СимволРазделителя
		+ "logback.xml") + "bin/executor_j11." + расширениеИсполнителя

	пер аргументыПроцессаОс = ["-s", имяФайлаСкрипта, "-m", имяКомандыСкрипта]
	если не параметрыСкрипта.Пусто()
		аргументыПроцессаОс.ДобавитьВсе(параметрыСкрипта)
	;

	знч библиотека = новый ПроцессОс(путьКИсполнителю, аргументыПроцессаОс, Ложь)

	библиотека.Запустить()
	библиотека.ОжидатьЗавершения()

	знч ошибкиВыполненияСкрипта = библиотека.ПолучитьПотокОшибок()
	знч текстОшибок = ошибкиВыполненияСкрипта.ПрочитатьКакТекст(КодировкаПотокаВыводаСкриптов())
	если не текстОшибок.Пусто()
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибок)
	;

	возврат библиотека.ПотокВывода
;

метод ВерсияНовогоСкрипта(файлСкрипта: Файл): Строка
	исп потокВывода = ВыполнитьСкрипт(файлСкрипта.Путь, "version", [])
	знч строкаВерсии = потокВывода.ПрочитатьКакСтроку()
	если не строкаВерсии.НачинаетсяС("Версия:")
		знч текстОшибки = "При запуске новой версии скрипта получено сообщение:\н%строкаВерсии"
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
	;

	возврат строкаВерсии.Подстрока(8)
;


структура ОписаниеНастроек
	пер НастройкиVA: ОписаниеНастроекVA
	пер НастройкиТестовойБазы: ОписаниеНастроекТестовойБазы
	пер НастройкиАвтофич: ОписаниеНастроекАвтофич
;

структура ОписаниеНастроекVA
	пер ПутьVanessaAutomationSingle: Строка
	пер КаталогПроекта: Строка
	пер КаталогФич: Строка
	пер КаталогиБиблиотек: Массив
	пер КаталогОтчетов: Строка
;

структура ОписаниеНастроекТестовойБазы
	пер ВерсияПлатформы: Строка
	пер ПутьКDT: Строка
	пер ИмяПользователя: Строка
	пер ПарольПользователя: Строка
;

структура ОписаниеНастроекАвтофич
	пер КаталогАвтофич: Строка
	пер КаталогШаблоновШагов: Строка
	пер ФайлШаблонаШапки: Строка
	пер Пользователи: Массив
;

структура ОписаниеПользователя
	пер Представление: Строка
	пер Имя: Строка
	пер Пароль: Строка
;

структура ОписаниеОбъектаАвтофичи
	пер Объект: Строка
	пер ШаблонФичи: Строка
	пер Пользователи: Массив
;

структура VAParams
	пер КаталогПроекта: Строка
	пер КаталогФич: Строка
	пер КаталогиБиблиотек: Массив

	пер ВыполнитьСценарии: Булево = Истина
	пер ДелатьЛогВыполненияСценариевВЖР: Булево = Ложь
	пер ЗавершитьРаботуСистемы: Булево = Истина
	пер ЗакрытьTestClientПослеЗапускаСценариев: Булево = Истина

	пер ИспользоватьКомпонентуVanessaExt: Булево = Истина
	пер ТихаяУстановкаVanessaExt: Булево = Истина

	пер ВыполнениеСценариев: VAParamsВыполнениеСценариев

	пер КлиентТестирования: VAParamsКлиентТестирования

	пер ДелатьОтчетВФорматеАллюр: Булево = Истина
	пер ОтчетAllure: VAParamsОтчетAllure

	пер ДелатьОтчетВФорматеjUnit: Булево = Истина
	пер ОтчетJUnit: VAParamsОтчетJUnit

	конструктор(КаталогПроекта, КаталогФич, КаталогиБиблиотек, ВыполнениеСценариев, КлиентТестирования, ОтчетAllure, ОтчетJUnit)
;

структура VAParamsВыполнениеСценариев
	пер ВыполнятьШагиАссинхронно: Булево = Ложь
	пер ОбновлятьСтатистикуВДереве: Булево = Ложь
	пер ОбновлятьДеревоПриНачалеВыполненияСценария: Булево = Ложь

	конструктор()
;

структура VAParamsКлиентТестирования
	пер ЗапускатьКлиентТестированияСМаксимизированнымОкном: Булево = Истина
	пер ДиапазонПортовTestclient: Строка = ""

	конструктор()
	конструктор(ДиапазонПортовTestclient)
;

структура VAParamsОтчетAllure
	пер КаталогВыгрузкиAllure: Строка
	пер КаталогОтносительноКоторогоНадоСтроитьИерархию: Строка
	пер УровеньОтчета1: Строка = "#report.epic=;ИмяФичаФайла"
	пер УровеньОтчета2: Строка = "#report.feature="
	пер УровеньОтчета3: Строка = "#report.story="
	пер ГруппировкаTestSuites: Строка = "#report.feature="

	конструктор(КаталогВыгрузкиAllure, КаталогОтносительноКоторогоНадоСтроитьИерархию)
;

структура VAParamsОтчетJUnit
	пер КаталогВыгрузкиjUnit: Строка

	конструктор(КаталогВыгрузкиjUnit)
;


метод СписокФайловАвтофич(каталогАвтофич: Строка): Соответствие
	пер автофичи = новый Соответствие()

	пер настройкиПоиска = новый НастройкиПоискаФайлов()
	настройкиПоиска.ИмяСодержит(".tsv")
	для файлАвтофичи из Файлы.Найти(каталогАвтофич, настройкиПоиска)
		пер массивОбъектов = новый Массив()

		исп потокФайлаАвтофичи = файлАвтофичи.ОткрытьПотокЧтения()
		пер чтениеФайлаАвтофичи = новый ЧтениеДанных(потокФайлаАвтофичи)
		// TODO: Отладка
		пока не чтениеФайлаАвтофичи.ЧтениеЗавершено()
			знч строкаФайла = чтениеФайлаАвтофичи.ПрочитатьСтроку("utf-8")
			если строкаФайла.Пусто()
			продолжить
			;
			знч массивСтроки = строкаФайла.Разделить("\т", Истина)
			если массивСтроки.Размер() != 3
				выбросить новый ИсключениеИндексВнеГраниц(
					"В каждой строке автофича файла должно быть 3 значения, разделенных табуляцией.")
			;

			знч пользователиАвтофичи = массивСтроки[2].Разделить(",")
			знч объектАвтофичи = новый ОписаниеОбъектаАвтофичи(массивСтроки[0], массивСтроки[1], пользователиАвтофичи)
			массивОбъектов.Добавить(объектАвтофичи)
		;

		автофичи.Вставить(файлАвтофичи.ИмяБезРасширения, массивОбъектов)
	;

	возврат автофичи
;

метод СоздатьФайлыФичПоАвтофичам(путьФич: Строка, автофичи: Соответствие, пользователи: Массив, путьШаблонов: Строка,
	имяФайлаШаблонаШапки: Строка)
	если автофичи.Пусто()
	возврат
	;

	пер файлШаблонаШапки = новый Файл("%путьШаблонов/%имяФайлаШаблонаШапки")
	если не файлШаблонаШапки.Существует()
		выбросить новый ИсключениеНедопустимыйАргумент("Файл %{файлШаблонаШапки.Имя} не существует.")
	;
	исп потокШаблонаШапки = файлШаблонаШапки.ОткрытьПотокЧтения()
	знч текстШаблонаШапки = потокШаблонаШапки.ПрочитатьКакСтроку()

	пер текстыШаблоновОбъектов = новый Соответствие()

	для пользователь из пользователи
		для автофича из автофичи
			пер текстФичи = текстШаблонаШапки
			текстФичи = текстФичи.Заменить("\%Фича\%", автофича.Ключ)
			текстФичи = текстФичи.Заменить("\%ПредставлениеПользователя\%", пользователь.Представление)
			текстФичи = текстФичи.Заменить("\%ИмяПользователя\%", пользователь.Имя)
			текстФичи = текстФичи.Заменить("\%ПарольПользователя\%", пользователь.Пароль)

			для описаниеОбъекта из автофича.Значение
				если описаниеОбъекта.Пользователи.Найти(пользователь.Представление) == Неопределено
				продолжить
				;

				знч объектМассивом = описаниеОбъекта.Объект.Разделить(".") // Массив
				если объектМассивом.Размер() < 2
					знч текстОшибки = "неизвестный объект метаданных %{описаниеОбъекта.Объект}"
					выбросить новый ИсключениеИндексВнеГраниц(текстОшибки)
				;

				пер текстОбъекта = ""
				если текстыШаблоновОбъектов.СодержитКлюч(описаниеОбъекта.ШаблонФичи)
					текстОбъекта = текстыШаблоновОбъектов.Получить(описаниеОбъекта.ШаблонФичи)
				иначе
					пер файлШаблонаОбъекта = новый Файл("%путьШаблонов/%{описаниеОбъекта.ШаблонФичи}")
					исп потокШаблонаОбъекта = файлШаблонаОбъекта.ОткрытьПотокЧтения()
					знч текстШаблонаОбъекта = потокШаблонаОбъекта.ПрочитатьКакСтроку()
					текстыШаблоновОбъектов.Вставить(описаниеОбъекта.ШаблонФичи, текстШаблонаОбъекта)

					текстОбъекта = текстШаблонаОбъекта
				;

				текстОбъекта = текстОбъекта.Заменить("\%ИмяОбъекта\%", объектМассивом[1])
				текстФичи = текстФичи + Символы.НоваяСтрока + текстОбъекта
			;

			знч путьФичПользователя = "%путьФич/%{пользователь.Представление}"
			Файлы.СоздатьКаталог(путьФичПользователя)
			пер файлФичи = новый Файл("%путьФичПользователя/%{автофича.Ключ}.feature")
			исп потокФичи = файлФичи.ОткрытьПотокЗаписи()
			потокФичи.Записать(текстФичи)
		;
	;
;

метод CreateFeatures(имяФайлаНастроек: Строка)
	знч настройки = ПрочитатьНастройки(имяФайлаНастроек)

	пер автофичи = СписокФайловАвтофич(настройки.НастройкиАвтофич.КаталогАвтофич)
	если автофичи.Пусто()
		выбросить новый ИсключениеНедопустимоеСостояние("Нет ни одного файла автофич по пути %{настройки.НастройкиАвтофич
		.КаталогАвтофич}")
	;

	СоздатьФайлыФичПоАвтофичам(настройки.НастройкиVA.КаталогФич, автофичи, настройки.НастройкиАвтофич.Пользователи,
		настройки.НастройкиАвтофич.КаталогШаблоновШагов, настройки.НастройкиАвтофич.ФайлШаблонаШапки)
;

метод RunTests(имяФайлаНастроек: Строка)
	знч настройки = ПрочитатьНастройки(имяФайлаНастроек)

	знч каталогВыгрузкиAllure = "%{настройки.НастройкиVA.КаталогОтчетов}/allure"

	если не Файлы.Найти(каталогВыгрузкиAllure).Пусто()
		Файлы.Удалить(каталогВыгрузкиAllure)
	;
	Файлы.СоздатьКаталог("%каталогВыгрузкиAllure/history")
	для файлИстории из Файлы.Найти("%{настройки.НастройкиVA.КаталогОтчетов}/allure-report/history")
		Файлы.Скопировать(файлИстории, "%каталогВыгрузкиAllure/history/%{файлИстории.Имя}")
	;

	знч исполняемыйФайлПлатформы = ИсполняемыйФайлПлатформыПоМаксимальнойСборке(настройки.НастройкиТестовойБазы
	.ВерсияПлатформы)

	пер временныеИБПользователей = новый Соответствие()
	для пользователь из настройки.НастройкиАвтофич.Пользователи
		знч временныйКаталогИБ = Файлы.СоздатьВременныйКаталог("Test1CD")
		CreateInfobaseFromTemplate(настройки.НастройкиТестовойБазы.ПутьКDT, временныйКаталогИБ.Путь,
			исполняемыйФайлПлатформы)

		временныеИБПользователей.Вставить(пользователь.Представление, временныйКаталогИБ)
	;

	пер командыПлатформы = новый Массив()
	пер начальныйПорт = 48101
	знч диапазонПортов = 50
	для пользователь из настройки.НастройкиАвтофич.Пользователи
		пер временныйКаталогИБ = временныеИБПользователей.Получить(пользователь.Представление)

		знч каталогФич = "%{настройки.НастройкиVA.КаталогФич}/%{пользователь.Представление}"

		знч конечныйПорт = начальныйПорт + диапазонПортов - 1

		пер настройкиVAParamsВыполнениеСценариев = новый VAParamsВыполнениеСценариев()
		пер настройкиVAParamsКлиентТестирования = новый VAParamsКлиентТестирования("%начальныйПорт-%конечныйПорт")
		пер настройкиVAParamsОтчетAllure = новый VAParamsОтчетAllure(каталогВыгрузкиAllure, каталогФич)
		пер настройкиVAParamsОтчетJUnit = новый VAParamsОтчетJUnit("%{настройки.НастройкиVA.КаталогОтчетов}/junit")

		пер настройкиVAParams = новый VAParams(настройки.НастройкиVA.КаталогПроекта, каталогФич, настройки.НастройкиVA
		.КаталогиБиблиотек, настройкиVAParamsВыполнениеСценариев, настройкиVAParamsКлиентТестирования, настройкиVAParamsОтчетAllure,
			настройкиVAParamsОтчетJUnit)

		знч временныйФайлНастроекVA = Файлы.СоздатьВременныйФайл("VAParams", ".json")
		исп потокНастроекVA = временныйФайлНастроекVA.ОткрытьПотокЗаписи()
		СериализацияJson.ЗаписатьОбъект(потокНастроекVA, настройкиVAParams)
		потокНастроекVA.Закрыть()

		знч параметрыVA =
			"StartFeaturePlayer;DisableUserSettingsLoader;DisableLoadTestClientsTable;DisableLoadConfig;ClearStepsCache;VAParams=%временныйФайлНастроекVA"

		пер командаПлатформы = ExecuteDataProcessorTestManager(настройки.НастройкиVA.ПутьVanessaAutomationSingle, параметрыVA,
			временныйКаталогИБ.Путь, исполняемыйФайлПлатформы, настройки.НастройкиТестовойБазы
		.ИмяПользователя, настройки.НастройкиТестовойБазы
		.ПарольПользователя)
		командыПлатформы.Добавить(командаПлатформы)

		начальныйПорт = начальныйПорт + диапазонПортов
	;

	для командаПлатформы из командыПлатформы
		ОбработатьЗавершениеКомандыПлатформы(командаПлатформы)
	;

	AllureGenerate(настройки)
;

метод OpenReport(имяФайлаНастроек: Строка)
	знч настройки = ПрочитатьНастройки(имяФайлаНастроек)

	AllureOpen(настройки)
;

метод ПрочитатьНастройки(имяФайлаНастроек: Строка): ОписаниеНастроек
	пер файлНастроек = новый Файл(имяФайлаНастроек)
	исп потокФайлаНастроек = файлНастроек.ОткрытьПотокЧтения()
	пер настройкиJson = новый НастройкиЧтенияОбъектовJson()
	настройкиJson.ИгнорироватьНеизвестныеСвойства = Истина
	пер настройки = СериализацияJson.ПрочитатьОбъект(потокФайлаНастроек, Тип(ОписаниеНастроек),
		настройкиJson) как ОписаниеНастроек
	пер пользователи = новый Массив()
	для пользователь из настройки.НастройкиАвтофич.Пользователи
		знч описаниеПользователя = новый ОписаниеПользователя(пользователь["ПредставлениеПользователя"],
			пользователь["ИмяПользователя"], пользователь["ПарольПользователя"])
		пользователи.Добавить(описаниеПользователя)
	;
	настройки.НастройкиАвтофич.Пользователи = пользователи

	возврат настройки
;

метод AllureOpen(настройки: ОписаниеНастроек)
	пер имяКоманды = ""
	пер параметрыПроцесса = новый Массив()

	знч версияОС = ИспользуемаяОС()
	выбор версияОС
	когда ОперационныеСистемы.Windows
		имяКоманды = "allure.bat"
	иначе
		имяКоманды = "allure"
	;

	параметрыПроцесса.Добавить("open")
	параметрыПроцесса.Добавить("%{настройки.НастройкиVA.КаталогОтчетов}/allure-report")

	ВыполнитьКомандуСистемы(имяКоманды, параметрыПроцесса)
;

метод AllureGenerate(настройки: ОписаниеНастроек)
	пер имяКоманды = ""
	пер параметрыПроцесса = новый Массив()

	знч версияОС = ИспользуемаяОС()
	выбор версияОС
	когда ОперационныеСистемы.Windows
		имяКоманды = "allure.bat"
	иначе
		имяКоманды = "allure"
	;

	параметрыПроцесса.Добавить("generate")
	параметрыПроцесса.Добавить("%{настройки.НастройкиVA.КаталогОтчетов}/allure")
	параметрыПроцесса.Добавить("--clean")
	параметрыПроцесса.Добавить("-o")
	параметрыПроцесса.Добавить("%{настройки.НастройкиVA.КаталогОтчетов}/allure-report")

	ВыполнитьКомандуСистемы(имяКоманды, параметрыПроцесса)
;

метод ВыполнитьКомандуСистемы(имяКоманды: Строка, параметры: Массив)
	знч процесс = новый ПроцессОс(имяКоманды, параметры, Ложь)
	процесс.Запустить()
	процесс.ОжидатьЗавершения()

	знч кодВозврата = процесс.ПолучитьКодВозврата()
	Консоль.Записать("Код возврата:" + кодВозврата)

	пер результатВыполненияСкрипта = процесс.ПолучитьПотокВывода()
	знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакТекст(КодировкаПотокаВывода())
	если не текстРезультата.Пусто()
		Консоль.Записать("Поток вывода:")
		Консоль.Записать(текстРезультата)
	;

	пер ошибкиВыполненияСкрипта = процесс.ПолучитьПотокОшибок()
	знч текстОшибок = ошибкиВыполненияСкрипта.ПрочитатьКакТекст(КодировкаПотокаВывода())
	если не текстОшибок.Пусто()
		Консоль.Записать("Поток ошибок:")
		Консоль.Записать(текстОшибок)
	;
;

метод КодировкаПотокаВывода(): Строка
	возврат "Cp1251"
;


перечисление ОперационныеСистемы
	Windows,
	MacOS,
	Linux
;


метод ИспользуемаяОС(): ОперационныеСистемы
	знч имяОС = СредаИсполнения.ПолучитьСвойство("os.name")

	выбор когда имяОС.НачинаетсяС("windows", Истина)
		возврат ОперационныеСистемы.Windows

	когда имяОС.Содержит("mac", Истина)
		возврат ОперационныеСистемы.MacOS

	когда имяОС.Содержит("nux", Истина)
		возврат ОперационныеСистемы.Linux

	иначе
		выбросить новый ИсключениеНедопустимоеСостояние("Неизвестная ОС")
	;
;

метод ИсполняемыйФайлПлатформыПоМаксимальнойСборке(версияПлатформы: Строка): Строка
	знч установленныеПлатформы = УстановленныеПлатформы()
	если установленныеПлатформы.СодержитКлюч(версияПлатформы)
		знч путьКПлатформе = установленныеПлатформы.Получить(версияПлатформы)
		возврат "%путьКПлатформе/bin/1cv8"
	;

	знч максимальныеПлатформы = МаксимальныеПлатформы()
	если максимальныеПлатформы.СодержитКлюч(версияПлатформы)
		знч путьКПлатформе = максимальныеПлатформы.Получить(версияПлатформы)
		возврат "%путьКПлатформе/bin/1cv8"
	;

	знч текстОшибки = "Не найдена установленная платформа %версияПлатформы"
	выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
;

метод МаксимальныеПлатформы(): Соответствие
	знч установленныеПлатформы = УстановленныеПлатформы()

	пер максимальныеПлатформы: Соответствие

	для платформа из установленныеПлатформы
		знч разложенныйТекущийРелиз = платформа.Ключ.Разделить(".")

		пер релизБезВерсииМассивом = новый Массив(разложенныйТекущийРелиз)
		релизБезВерсииМассивом.УдалитьПоИндексу(3)

		знч релизБезВерсии = Строки.Соединить(релизБезВерсииМассивом, ".")

		если не максимальныеПлатформы.СодержитКлюч(релизБезВерсии)
			максимальныеПлатформы.Вставить(релизБезВерсии, платформа.Значение)
		продолжить
		;

		знч последнийРелиз = максимальныеПлатформы.Получить(релизБезВерсии)
		знч разложенныйПоследнийРелиз = последнийРелиз.Разделить(".")

		если разложенныйТекущийРелиз[3] > разложенныйПоследнийРелиз[3]
			максимальныеПлатформы.Вставить(релизБезВерсии, платформа.Значение)
		;
	;

	возврат максимальныеПлатформы
;

метод УстановленныеПлатформы(): Соответствие
	пер установленныеПлатформы: Соответствие

	знч каталогиПлатформы = КаталогиПлатформы()

	знч настройкиПоискаФайлов = новый НастройкиПоискаФайлов()
	настройкиПоискаФайлов.ИсключитьФайлы(Истина)
	настройкиПоискаФайлов.МаксимальнаяГлубина(1)

	для каталогПлатформы из каталогиПлатформы
		знч найденныеФайлы = Файлы.Найти(каталогПлатформы, настройкиПоискаФайлов)
		для найденныйФайл из найденныеФайлы
			если не найденныйФайл.Имя.НачинаетсяС("8.3")
			продолжить
			;
			установленныеПлатформы.Вставить(найденныйФайл.Имя, найденныйФайл.Путь)
		;
	;

	возврат установленныеПлатформы
;

метод КаталогиПлатформы(): Массив
	пер списокКаталогов: Массив

	знч используемаяОС = ИспользуемаяОС()

	выбор используемаяОС
	когда ОперационныеСистемы.Windows
		знч каталог32 = СредаИсполнения.ПолучитьПеременную("ProgramFiles(x86)")
		списокКаталогов.Добавить("%каталог32\\1Cv8")
		знч каталог64 = СредаИсполнения.ПолучитьПеременную("ProgramFiles")
		списокКаталогов.Добавить("%каталог64\\1Cv8")
	когда ОперационныеСистемы.MacOS
		списокКаталогов.Добавить("/opt/1Cv8")
	когда ОперационныеСистемы.Linux
		списокКаталогов.Добавить("/opt/1C/v8.3/x86_64")
	;

	возврат списокКаталогов
;


структура ОписаниеКомандыПлатформы
	пер процесс: ПроцессОс
	пер имяКоманды: Строка
	пер параметры: Массив
	пер временныйФайлЛогов: Файл
	пер выводитьОшибки: Булево = Истина
;


метод CreateInfobaseFromTemplate(путьКДТ: Строка, путьКИБ: Строка, имяФайлаПлатформы: Строка)
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("CREATEINFOBASE")
	параметрыПроцесса.Добавить("File=\"%путьКИБ\"")
	параметрыПроцесса.Добавить("/UseTemplate")
	параметрыПроцесса.Добавить(путьКДТ)

	пер командаПлатформы = ВыполнитьКомандуПлатформы(имяФайлаПлатформы, параметрыПроцесса)
	ОбработатьЗавершениеКомандыПлатформы(командаПлатформы)
	Консоль.Записать("ИБ успешно создана.")
;

метод ExecuteDataProcessorTestManager(имяВнешнейОбработки: Строка, вспомогательныеПараметры: Строка, путьКИБ: Строка,
	имяФайлаПлатформы: Строка, имяПользователя: Строка = "", пароль: Строка = ""): ОписаниеКомандыПлатформы
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("ENTERPRISE")
	параметрыПроцесса.Добавить("/TestManager")
	параметрыПроцесса.Добавить("/Execute")
	параметрыПроцесса.Добавить(имяВнешнейОбработки)
	если не вспомогательныеПараметры.Пусто()
		параметрыПроцесса.Добавить("/C\"%вспомогательныеПараметры\"")
	;
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить("\"File=\"\"%путьКИБ\"\"\"")
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	пер командаПлатформы = ВыполнитьКомандуПлатформы(имяФайлаПлатформы, параметрыПроцесса)
	Консоль.Записать("Обработка запущена.")

	возврат командаПлатформы
;

метод ВыполнитьКомандуПлатформы(имяКоманды: Строка, параметры: Массив, выводитьОшибки: Булево = Истина): ОписаниеКомандыПлатформы
	знч временныйФайлЛогов = Файлы.СоздатьВременныйФайл()

	параметры.Добавить("/Out")
	параметры.Добавить(временныйФайлЛогов.Путь)

	пер процесс = новый ПроцессОс(имяКоманды, параметры)
	процесс.Запустить()

	возврат новый ОписаниеКомандыПлатформы(процесс, имяКоманды, параметры, временныйФайлЛогов, выводитьОшибки)
;

метод ОбработатьЗавершениеКомандыПлатформы(командаПлатформы: ОписаниеКомандыПлатформы)
	командаПлатформы.процесс.ОжидатьЗавершения()
	Консоль.Записать("Команда платформы выполнена.")

	исп результатВыполненияСкрипта = командаПлатформы.процесс.ПолучитьПотокВывода()
	знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакТекст()
	если не текстРезультата.Пусто()
		Консоль.Записать(текстРезультата)
	;

	знч кодВозврата = командаПлатформы.процесс.ПолучитьКодВозврата()

	если кодВозврата == 0
	возврат
	;

	пер текстОшибки = "Код возврата: %кодВозврата"
	если не командаПлатформы.выводитьОшибки
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
	;

	текстОшибки += Строки.Шаблон("\в\нКоманда: $0\в\нПараметры: $1", [командаПлатформы.имяКоманды, Строки.Соединить(
		командаПлатформы.параметры, " ")])

	исп ошибкиВыполненияСкрипта = командаПлатформы.временныйФайлЛогов.ОткрытьПотокЧтения()
	текстОшибки += "\в\н" + ошибкиВыполненияСкрипта.ПрочитатьКакТекст(КодировкаПотокаВыводаПлатформы())
	выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
;

метод КодировкаПотокаВыводаПлатформы(): Строка
	если ИспользуемаяОС() == ОперационныеСистемы.Windows
		возврат "windows-1251"
	;

	возврат "UTF-8"
;