#!/usr/bin/executor

/*******************************************************************************
 * Copyright (c) 2020 Alexander Kapralov and Contributors
 * This program and the accompanying materials are made available under
 * the terms of the BSD 3-Clause License which is available at
 * https://spdx.org/licenses/BSD-3-Clause.html#licenseText
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Contributors:
 *    
 *
 ******************************************************************************/

метод PlatformVersions(версияЕДТ: Строка = "")
    пер имяКоманды = ""
    пер параметрыПроцесса = новый Массив()

    знч версияОС = ИспользуемаяОС()
    выбор версияОС
    когда ОперационныеСистемы.Windows
        имяКоманды = "ring.cmd"
    иначе
        имяКоманды = "ring.sh"
    ;

    параметрыПроцесса.Добавить("-l")
    параметрыПроцесса.Добавить("error")
    если версияЕДТ.Пусто()
        параметрыПроцесса.Добавить("edt")
    иначе
        параметрыПроцесса.Добавить("edt@" + версияЕДТ)
    ;
    параметрыПроцесса.Добавить("platform-versions")

    знч кодВозврата = ВыполнитьКомандуСистемы(имяКоманды, параметрыПроцесса, Ложь)

    если кодВозврата != 0
        знч текстОшибки = Строки.Шаблон("Код возврата: $0", кодВозврата)
        выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
    ;
;

метод WorkspaceExport(путьККонфигурацииЕДТ: Строка, путьККонфигурацииПлатформы: Строка, путьКРабочейОбласти: Строка, версияЕДТ: Строка =
    "")
    пер имяКоманды = ""
    пер параметрыПроцесса = новый Массив()

    знч версияОС = ИспользуемаяОС()
    выбор версияОС
    когда ОперационныеСистемы.Windows
        имяКоманды = "powershell"
        параметрыПроцесса.Добавить("/c")
    иначе
        имяКоманды = "zsh"
        параметрыПроцесса.Добавить("-c")
    ;

    параметрыПроцесса.Добавить("ring")
    параметрыПроцесса.Добавить("-l")
    параметрыПроцесса.Добавить("error")
    если версияЕДТ.Пусто()
        параметрыПроцесса.Добавить("edt")
    иначе
        параметрыПроцесса.Добавить("edt@" + версияЕДТ)
    ;
    параметрыПроцесса.Добавить("workspace")
    параметрыПроцесса.Добавить("export")
    параметрыПроцесса.Добавить("--project")
    параметрыПроцесса.Добавить(путьККонфигурацииЕДТ)
    параметрыПроцесса.Добавить("--configuration-files")
    параметрыПроцесса.Добавить(путьККонфигурацииПлатформы)
    параметрыПроцесса.Добавить("--workspace-location")
    параметрыПроцесса.Добавить(путьКРабочейОбласти)

    знч кодВозврата = ВыполнитьКомандуСистемы(имяКоманды, параметрыПроцесса, Ложь)

    если кодВозврата != 0
        знч текстОшибки = Строки.Шаблон("Код возврата: $0", кодВозврата)
        выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
    ;
;

метод ВыполнитьКомандуСистемы(имяКоманды: Строка, параметры: Массив, выводитьОшибки: Булево = Истина): Число
    знч процесс = новый ПроцессОс(имяКоманды, параметры, Ложь)
    процесс.Запустить()
    процесс.ОжидатьЗавершения()

    знч кодВозврата = процесс.ПолучитьКодВозврата()
    если кодВозврата != 0
        Консоль.Записать("Код возврата:" + кодВозврата)
    ;

    пер результатВыполненияСкрипта = процесс.ПолучитьПотокВывода()
    знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакТекст(КодировкаПотокаВывода())
    если не текстРезультата.Пусто()
        Консоль.Записать(текстРезультата)
    ;

    если кодВозврата == 0 или не выводитьОшибки
        возврат кодВозврата
    ;

    пер ошибкиВыполненияСкрипта = процесс.ПолучитьПотокОшибок()
    знч текстОшибок = ошибкиВыполненияСкрипта.ПрочитатьКакТекст(КодировкаПотокаВывода())
    если не текстОшибок.Пусто()
        Консоль.Записать("Ошибки при выполнении процесса:")
        Консоль.Записать(текстОшибок)
    ;

    возврат кодВозврата
;

метод КодировкаПотокаВывода(): Строка
    возврат "Cp1251"
;


перечисление ОперационныеСистемы
    Windows,
    MacOS,
    Linux
;


метод ИспользуемаяОС(): ОперационныеСистемы
    знч имяОС = СредаИсполнения.ПолучитьСвойство("os.name")

    выбор когда имяОС.НачинаетсяС("windows", Истина)
        возврат ОперационныеСистемы.Windows

    когда имяОС.Содержит("mac", Истина)
        возврат ОперационныеСистемы.MacOS

    когда имяОС.Содержит("nux", Истина)
        возврат ОперационныеСистемы.Linux

    иначе
        выбросить новый ИсключениеНедопустимоеСостояние("Неизвестная ОС")
    ;
;