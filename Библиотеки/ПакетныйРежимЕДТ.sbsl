#!/usr/bin/executor

/*******************************************************************************
 * Copyright (c) 2020 Alexander Kapralov and Contributors
 * This program and the accompanying materials are made available under
 * the terms of the BSD 3-Clause License which is available at
 * https://spdx.org/licenses/BSD-3-Clause.html#licenseText
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Contributors:
 *    
 *
 ******************************************************************************/

метод PlatformVersions(версияЕДТ: Строка = "")
    пер имяКоманды = ""
    пер параметрыПроцесса = новый Массив()

    знч версияОС = ИспользуемаяОС()
    выбор версияОС
    когда ОперационныеСистемы.Windows
        имяКоманды = "ring.cmd"
    иначе
        имяКоманды = "ring.sh"
    ;

    параметрыПроцесса.Добавить("-l")
    параметрыПроцесса.Добавить("error")
    если версияЕДТ.Пусто()
        параметрыПроцесса.Добавить("edt")
    иначе
        параметрыПроцесса.Добавить("edt@" + версияЕДТ)
    ;
    параметрыПроцесса.Добавить("platform-versions")

    знч кодВозврата = ВыполнитьКомандуСистемы(имяКоманды, параметрыПроцесса, Ложь)

    если кодВозврата != 0
        знч текстОшибки = Строки.Шаблон("Код возврата: $0", кодВозврата)
        выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
    ;
;

метод WorkspaceExport(путьККонфигурацииЕДТ: Строка, путьККонфигурацииПлатформы: Строка, путьКРабочейОбласти: Строка, версияЕДТ: Строка =
    "")
    пер имяКоманды = ""
    пер параметрыПроцесса = новый Массив()

    знч версияОС = ИспользуемаяОС()
    выбор версияОС
    когда ОперационныеСистемы.Windows
        имяКоманды = "powershell"
        параметрыПроцесса.Добавить("/c")
    иначе
        имяКоманды = "zsh"
        параметрыПроцесса.Добавить("-c")
    ;

    параметрыПроцесса.Добавить("ring")
    параметрыПроцесса.Добавить("-l")
    параметрыПроцесса.Добавить("error")
    если версияЕДТ.Пусто()
        параметрыПроцесса.Добавить("edt")
    иначе
        параметрыПроцесса.Добавить("edt@" + версияЕДТ)
    ;
    параметрыПроцесса.Добавить("workspace")
    параметрыПроцесса.Добавить("export")
    параметрыПроцесса.Добавить("--project")
    параметрыПроцесса.Добавить(путьККонфигурацииЕДТ)
    параметрыПроцесса.Добавить("--configuration-files")
    параметрыПроцесса.Добавить(путьККонфигурацииПлатформы)
    параметрыПроцесса.Добавить("--workspace-location")
    параметрыПроцесса.Добавить(путьКРабочейОбласти)

    знч кодВозврата = ВыполнитьКомандуСистемы(имяКоманды, параметрыПроцесса, Ложь)

    если кодВозврата != 0
        знч текстОшибки = Строки.Шаблон("Код возврата: $0", кодВозврата)
        выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
    ;
;

метод ВыполнитьКомандуСистемы(имяКоманды: Строка, параметры: Массив, выводитьОшибки: Булево = Истина): Число
    знч процесс = новый ПроцессОс(имяКоманды, параметры, Ложь)
    процесс.Запустить()
    процесс.ОжидатьЗавершения()

    знч кодВозврата = процесс.ПолучитьКодВозврата()
    если кодВозврата != 0
        Консоль.Записать("Код возврата:" + кодВозврата)
    ;

    пер результатВыполненияСкрипта = процесс.ПолучитьПотокВывода()
    знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакТекст(КодировкаПотокаВывода())
    если не текстРезультата.Пусто()
        Консоль.Записать(текстРезультата)
    ;

    если кодВозврата == 0 или не выводитьОшибки
        возврат кодВозврата
    ;

    пер ошибкиВыполненияСкрипта = процесс.ПолучитьПотокОшибок()
    знч текстОшибок = ошибкиВыполненияСкрипта.ПрочитатьКакТекст(КодировкаПотокаВывода())
    если не текстОшибок.Пусто()
        Консоль.Записать("Ошибки при выполнении процесса:")
        Консоль.Записать(текстОшибок)
    ;

    возврат кодВозврата
;

метод КодировкаПотокаВывода(): Строка
    возврат "Cp1251"
;


перечисление ОперационныеСистемы
    Windows,
    MacOS,
    Linux
;


метод ИспользуемаяОС(): ОперационныеСистемы
    знч имяОС = СредаИсполнения.ПолучитьСвойство("os.name")

    выбор когда имяОС.НачинаетсяС("windows", Истина)
        возврат ОперационныеСистемы.Windows

    когда имяОС.Содержит("mac", Истина)
        возврат ОперационныеСистемы.MacOS

    когда имяОС.Содержит("nux", Истина)
        возврат ОперационныеСистемы.Linux

    иначе
        выбросить новый ИсключениеНедопустимоеСостояние("Неизвестная ОС")
    ;
;

структура ОписаниеСтрокиCodeQuality
	знч begin: Число
;

структура ОписаниеРасположенияCodeQuality
	знч path: Строка
	знч lines: ОписаниеСтрокиCodeQuality
;

перечисление ОшибкаCodeQualityКритичность
	blocker,
	critical,
	major,
	minor,
	info
;

структура ОписаниеОшибкиCodeQuality
	знч description: Строка
	знч fingerprint: Строка
	знч severity: ОшибкаCodeQualityКритичность
	знч location: ОписаниеРасположенияCodeQuality
;

метод ЗаписатьОшибкиВФорматCodeQuality(файлCodeQuality: Строка, ошибкиEDT: Массив)
	знч CI_PROJECT_DIR = "D:\\Разработка\\1ce-git\\so-ups\\zup"

	пер ошибкиCodeQuality = новый Массив()
	
	для ошибка из ошибкиEDT
		пер путьКОбъекту = ПутьКФайлуПоОбъекту(ошибка).Заменить("\\", "/")
		путьКОбъекту = "%{ошибка.проект}/%путьКОбъекту"
	
		знч файлМодуля = новый Файл("%CI_PROJECT_DIR/%путьКОбъекту")
		если не файлМодуля.Существует()
			продолжить
		;
	
		пер относительноеПоложение = 0
		пер родитель = ""
	
		исп поток = файлМодуля.ОткрытьПотокЧтения()
		знч строкиМодуля = поток.ПрочитатьКакСтроку().Разделить(Символы.НоваяСтрока)
		для номерСтроки = 1 по ошибка.положение
			знч строкаМодуля = строкиМодуля[ошибка.положение - номерСтроки]
			если строкаМодуля.НачинаетсяС("Процедура", Истина)
				или строкаМодуля.НачинаетсяС("Функция", Истина)
				или строкаМодуля.НачинаетсяС("Procedure", Истина)
				или строкаМодуля.НачинаетсяС("Function", Истина)
				или строкаМодуля.НачинаетсяС("#Область", Истина)
				родитель = строкаМодуля
				относительноеПоложение = номерСтроки - 1
				прервать
			;
		;
	
		знч отпечатокОшибки = Строка(новый ХешированиеДанных(АлгоритмХеширования.Sha256)
			.ДобавитьДанные(ошибка.объект.ВБайты())
			.ДобавитьДанные(родитель.ВБайты())
			.ДобавитьДанные(ошибка.ид.ВБайты())
			.ДобавитьДанные(Строка(относительноеПоложение).ВБайты())
			.Результат)
		
		пер критичность = ОшибкаCodeQualityКритичность.info
		выбор ошибка.критичность
		когда ОшибкаEDTКритичность.Блокирующая
			критичность = ОшибкаCodeQualityКритичность.blocker
			
		когда ОшибкаEDTКритичность.Критическая
			критичность = ОшибкаCodeQualityКритичность.critical
			
		когда ОшибкаEDTКритичность.Значительная
			критичность = ОшибкаCodeQualityКритичность.major
			
		когда ОшибкаEDTКритичность.Незначительная
			критичность = ОшибкаCodeQualityКритичность.minor
			
		;
		
		знч номерСтроки = новый ОписаниеСтрокиCodeQuality(ошибка.положение)
		знч положение = новый ОписаниеРасположенияCodeQuality(путьКОбъекту, номерСтроки)
		знч описаниеОшибки = новый ОписаниеОшибкиCodeQuality(
			ошибка.описание, отпечатокОшибки, критичность, положение)
	
		ошибкиCodeQuality.Добавить(описаниеОшибки)
	;

	знч файлПараметров = новый Файл(файлCodeQuality)
	исп поток = файлПараметров.ОткрытьПотокЗаписи()
	СериализацияJson.ЗаписатьОбъект(поток, ошибкиCodeQuality)
;

метод ОшибкиEDT(файлРезультатовВалидации: Строка): Массив
	пер ошибки = новый Массив()

	знч файл = новый Файл(файлРезультатовВалидации)
	исп поток = файл.ОткрытьПотокЧтения()

	знч чтение = новый ЧтениеДанных(поток)
	пока не чтение.ЧтениеЗавершено()
		знч строкаДанных = чтение.ПрочитатьСтроку()
		если строкаДанных.Пусто()
			продолжить
		;

		знч описаниеОшибки = ОшибкаEDT(строкаДанных)
		если описаниеОшибки == Неопределено
			продолжить
		;

		ошибки.Добавить(описаниеОшибки)
	;

	возврат ошибки
;

перечисление ОшибкаEDTКритичность
	Блокирующая,
	Критическая,
	Значительная,
	Незначительная,
	Тривиальная
;

перечисление ОшибкаEDTТип
	Предупреждение,
	Производительность,
	РазработкаИИспользованиеБиблиотек,
	СтандартыРазработкиИнтерфейсов,
	Безопасность,
	Переносимость,
	СтандартыКодирования,
	Орфография
;


структура ОписаниеОшибкиEDT
	знч создано: ДатаВремя
	знч критичность: ОшибкаEDTКритичность
	знч тип: ОшибкаEDTТип
	знч проект: Строка
	знч объект: Строка
	знч положение: Число
	знч описание: Строка
	пер источник: Строка
	пер ид: Строка
	пер контекст: Массив

	конструктор(создано, критичность, тип, проект, ид, объект, положение, описание)
;


метод ОшибкаEDT(строкаДанных: Строка): ОписаниеОшибкиEDT?
	знч массивДанных = строкаДанных.Разделить(Символы.Таб, Истина)

	если массивДанных[5].Пусто() или не массивДанных[5].НачинаетсяС("строка")
		возврат Неопределено
	;

	знч создано = новый ДатаВремя(массивДанных[0].Подстрока(0, 19))
	знч положение = Число(массивДанных[5].Подстрока(7))

	пер критичность = ОшибкаEDTКритичность.Тривиальная
	выбор массивДанных[1]
	когда "Блокирующая"
		критичность = ОшибкаEDTКритичность.Блокирующая
		
	когда "Критическая"
		критичность = ОшибкаEDTКритичность.Критическая
		
	когда "Значительная"
		критичность = ОшибкаEDTКритичность.Значительная
		
	когда "Незначительная"
		критичность = ОшибкаEDTКритичность.Незначительная
		
	когда "Тривиальная"
		критичность = ОшибкаEDTКритичность.Тривиальная
		
	иначе
		критичность = ОшибкаEDTКритичность.Значительная
//		выбросить новый ИсключениеНедопустимоеСостояние("Неизвестная критичность %{массивДанных[1]}")
		
	;

	пер тип = ОшибкаEDTТип.СтандартыКодирования

	пер ид = массивДанных[3]
	если ид.Пусто()
		ид = "edt-legacy"
	;

	пер описаниеОшибки = новый ОписаниеОшибкиEDT(создано, критичность, тип, массивДанных[2], ид, массивДанных[4],
		положение, массивДанных[6])
	описаниеОшибки.источник = "EDT"

	возврат описаниеОшибки
;

метод ПутьКФайлуПоОбъекту(описаниеОшибки: ОписаниеОшибкиEDT): Строка
	пер массивОбъекта = описаниеОшибки.объект.Разделить(".")

	пер объектМетаданных = массивОбъекта[0]
	выбор объектМетаданных
	когда "РегистрБухгалтерии"
		объектМетаданных = "AccountingRegisters"
	когда "РегистрНакопления"
		объектМетаданных = "AccumulationRegisters"
	когда "БизнесПроцесс"
		объектМетаданных = "BusinessProcesses"
	когда "РегистрРасчета"
		объектМетаданных = "CalculationRegisters"
	когда "Справочник"
		объектМетаданных = "Catalogs"
	когда "ПланСчетов"
		объектМетаданных = "ChartsOfAccounts"
	когда "ПланВидовРасчета"
		объектМетаданных = "ChartsOfCalculationTypes"
	когда "ПланВидовХарактеристик"
		объектМетаданных = "ChartsOfCharacteristicTypes"
	когда "ГруппаКоманд"
		объектМетаданных = "CommandGroups"
	когда "ОбщаяКоманда"
		объектМетаданных = "CommonCommands"
	когда "ОбщаяФорма"
		объектМетаданных = "CommonForms"
	когда "ОбщийМодуль"
		объектМетаданных = "CommonModules"
	когда "Конфигурация"
		объектМетаданных = "Configuration"
	когда "Константа"
		объектМетаданных = "Constants"
	когда "Обработка"
		объектМетаданных = "DataProcessors"
	когда "ЖурналДокумента"
		объектМетаданных = "DocumentJournals"
	когда "Документ"
		объектМетаданных = "Documents"
	когда "Перечисление"
		объектМетаданных = "Enums"
	когда "ПодпискаНаСобытие"
		объектМетаданных = "EventSubscriptions"
	когда "ПланОбмена"
		объектМетаданных = "ExchangePlans"
	когда "КритерийОтбора"
		объектМетаданных = "FilterCriteria"
	когда "HTTPСервис"
		объектМетаданных = "HTTPServices"
	когда "РегистрСведений"
		объектМетаданных = "InformationRegisters"
	когда "Отчет"
		объектМетаданных = "Reports"
	когда "ХранилищеНастроек"
		объектМетаданных = "SettingsStorages"
	когда "Задача"
		объектМетаданных = "Tasks"
	когда "WebСервис"
		объектМетаданных = "WebServices"
	когда "WSСсылка"
		объектМетаданных = "WSReferences"
	иначе
		выбросить новый ИсключениеНедопустимоеСостояние("Неизвестный объект метаданных %{описаниеОшибки.объект}")
	;

	пер имяМодуля = массивОбъекта[массивОбъекта.Размер() - 1]
	выбор имяМодуля
	когда "МодульКоманды"
		имяМодуля = "CommandModule"
	когда "МодульУправляемогоПриложения"
		имяМодуля = "ManagedApplicationModule"
	когда "МодульМенеджера"
		имяМодуля = "ManagerModule"
	когда "Модуль"
		имяМодуля = "Module"
	когда "МодульОбъекта"
		имяМодуля = "ObjectModule"
	когда "МодульОбычногоПриложения"
		имяМодуля = "OrdinaryApplicationModule"
	когда "МодульНабораЗаписей"
		имяМодуля = "RecordSetModule"
	когда "МодульСеанса"
		имяМодуля = "SessionModule"
	когда "МодульМенеджераЗначения"
		имяМодуля = "ValueManagerModule"
	иначе
		выбросить новый ИсключениеНедопустимоеСостояние("Неизвестный модуль %{описаниеОшибки.объект}")
	;

	массивОбъекта.УдалитьПоИндексу(0)
	массивОбъекта.УдалитьПоИндексу(массивОбъекта.Размер() - 1)
	пер наименованиеОбъекта = массивОбъекта[0]
	массивОбъекта.УдалитьПоИндексу(0)
	если массивОбъекта.Размер() == 1
		если массивОбъекта[0] != "Форма"
			выбросить новый ИсключениеНедопустимоеСостояние("Не удалось определить объект %{описаниеОшибки.объект}")
		;
	
	иначе если массивОбъекта.Размер() > 1
		выбор массивОбъекта[0]
		когда "Форма"
			наименованиеОбъекта += "\\Forms\\%{массивОбъекта[1]}"
		когда "Команда"
			наименованиеОбъекта += "\\Commands\\%{массивОбъекта[1]}"
		иначе
			выбросить новый ИсключениеНедопустимоеСостояние("Неизвестный вид объекта %{массивОбъекта[0]}")
		;
	
	;

	возврат "src\\%объектМетаданных\\%наименованиеОбъекта\\%имяМодуля.bsl"
;

метод Скрипт(файлCodeQuality: Строка, файлРезультатовВалидации: Строка)
	знч ошибкиEDT = ОшибкиEDT(файлРезультатовВалидации)
	ЗаписатьОшибкиВФорматCodeQuality(файлCodeQuality, ошибкиEDT)
;