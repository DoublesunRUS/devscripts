#!/usr/bin/executor

/*******************************************************************************
 * Copyright (c) 2020 Alexander Kapralov and Contributors
 * This program and the accompanying materials are made available under
 * the terms of the BSD 3-Clause License which is available at
 * https://spdx.org/licenses/BSD-3-Clause.html#licenseText
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Contributors:
 *    
 *
 ******************************************************************************/

метод ОбработатьРезультатВыводаАгента(поток: ПотокЧтения, консольАгента: КонсольSsh, процессАгента: ПроцессОс)
	пер естьОшибки = Ложь

	знч результаты = СериализацияJson.ПрочитатьМассив(поток)

	пер сообщенияLog = новый Массив()

	для результат из результаты
		знч типСообщения = результат.Получить("type") как Строка
		знч текстСообщения = результат.Получить("message") как Строка

		если не текстСообщения.Пусто()
			если типСообщения == "log"
				сообщенияLog.Добавить(текстСообщения)
			иначе
				Консоль.Записать("%типСообщения: %текстСообщения")
		;
		;
		если типСообщения != "success" и типСообщения != "progress"
			естьОшибки = Истина
		;
	;

	если не сообщенияLog.Пусто()
		Консоль.Записать("Лог:")
		для строкаСообщения из сообщенияLog
			Консоль.Записать(строкаСообщения)
		;
	;

	если естьОшибки
		AgentDisconnectDB(консольАгента, процессАгента)
		ЗавершитьПроцессАгента(процессАгента)
		выбросить новый ИсключениеНедопустимоеСостояние()
	;
;

метод ВыполнитьКомандуАгента(команда: Строка, консольАгента: КонсольSsh, процессАгента: ПроцессОс)
	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")
	команда = команда.Заменить(CI_PROJECT_DIR, "")

	пер результаты = консольАгента.Выполнить(команда)

	ОбработатьРезультатВыводаАгента(результаты, консольАгента, процессАгента)

	результаты.Закрыть()
;

метод ВыполнитьСОжиданиемКомандуАгента(команда: Строка, консольАгента: КонсольSsh, процессАгента: ПроцессОс)
	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")
	команда = команда.Заменить(CI_PROJECT_DIR, "")

	консольАгента.Отправить(команда)

	пока не консольАгента.ОжидатьПриглашение(60с)
		ОбработатьРезультатВыводаАгента(консольАгента.Вывод, консольАгента, процессАгента)
	;

	ОбработатьРезультатВыводаАгента(консольАгента.Вывод, консольАгента, процессАгента)
;

метод ЗапуститьПроцессАгента(путьКИБ: Строка, имяФайлаПлатформы: Строка, рабочийКаталог: Строка): ПроцессОс
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("DESIGNER")
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить("File=\"%путьКИБ\"")
	параметрыПроцесса.Добавить("/AgentMode")
	параметрыПроцесса.Добавить("/AgentSSHHostKeyAuto")
	параметрыПроцесса.Добавить("/AgentBaseDir ")
	параметрыПроцесса.Добавить(рабочийКаталог)
	параметрыПроцесса.Добавить("/Visible")

	пер процессАгента = новый ПроцессОс(имяФайлаПлатформы, параметрыПроцесса)
	процессАгента.Запустить()
	Консоль.Записать("Процесс агента запущен.")

	возврат процессАгента
;

метод ПередатьФайлАгенту(консольАгента: КонсольSsh, имяФайла: Строка, путьНаСервере: Строка): Строка
	знч файл = новый Файл(имяФайла)
	исп фтп = консольАгента.СоединениеSsh.ОткрытьСоединениеSftp()
	фтп.Поместить(имяФайла, путьНаСервере)
	
	возврат файл.Имя
;

метод AgentConnectDB(процессАгента: ПроцессОс, имяПользователя: Строка = "", пароль: Строка = ""): КонсольSsh
	знч соединениеАгента = новый СоединениеSsh("127.0.0.1", 1543, имяПользователя, пароль)

	пер консольАгента = соединениеАгента.ОткрытьКонсоль()
	консольАгента.СтрокаПриглашения = "designer> "

	ВыполнитьКомандуАгента("options set --notify-progress yes --output-format json", консольАгента, процессАгента)
	ВыполнитьКомандуАгента("common connect-ib", консольАгента, процессАгента)
	Консоль.Записать("Успешное соединение с ИБ.")

	возврат консольАгента
;

метод AgentDisconnectDB(консольАгента: КонсольSsh, процессАгента: ПроцессОс)
	ВыполнитьКомандуАгента("common disconnect-ib", консольАгента, процессАгента)
	консольАгента.СоединениеSsh.Закрыть()
	Консоль.Записать("Успешное отключение от ИБ.")
;

метод ЗавершитьПроцессАгента(процессАгента: ПроцессОс)
	процессАгента.Остановить()
	Консоль.Записать("Процесс агента остановлен.")
;

метод AgentLoadCfg(путьКФайлуCF: Строка, консольАгента: КонсольSsh, процессАгента: ПроцессОс)
	ВыполнитьСОжиданиемКомандуАгента("config load-cfg --file=%путьКФайлуCF", консольАгента, процессАгента)
	
	Консоль.Записать("CF файл конфигурации успешно загружен в ИБ.")
;

метод AgentLoadCfgFromFiles(путьКФайламКонфигурации: Строка, консольАгента: КонсольSsh, процессАгента: ПроцессОс)
	ВыполнитьСОжиданиемКомандуАгента("config load-config-from-files --dir=%путьКФайламКонфигурации", консольАгента,
		процессАгента)
	Консоль.Записать("XML файлы конфигурации успешно загружены в ИБ.")
;

метод AgentUpdateDBCfg(консольАгента: КонсольSsh, процессАгента: ПроцессОс)
	ВыполнитьСОжиданиемКомандуАгента("config update-db-cfg", консольАгента, процессАгента)
	Консоль.Записать("Конфигурация БД успешно обновлена для конфигурации в ИБ.")
;

метод AgentDumpCfg(путьКФайлуCF: Строка, консольАгента: КонсольSsh, процессАгента: ПроцессОс)
	ВыполнитьСОжиданиемКомандуАгента("config dump-cfg --file=%путьКФайлуCF", консольАгента, процессАгента)
	Консоль.Записать("CF Файл конфигурации успешно создан.")
;

метод AgentRestoreDB(путьКДТ: Строка, консольАгента: КонсольSsh, процессАгента: ПроцессОс)
	ВыполнитьКомандуАгента("infobase-tools restore-ib --file=%путьКДТ", консольАгента, процессАгента)
	Консоль.Записать("DT Файл успешно загружен.")
;

метод AgentLoadExt(путьКФайлуCFE: Строка, имяРасширения: Строка, консольАгента: КонсольSsh, процессАгента: ПроцессОс)
	ВыполнитьСОжиданиемКомандуАгента("config load-cfg --file=%путьКФайлуCFE --extension=%имяРасширения", консольАгента,
		процессАгента)
	Консоль.Записать("CFE файл расширения успешно загружен в ИБ.")
;

метод AgentLoadExtFromFiles(путьКФайламКонфигурации: Строка, имяРасширения: Строка, консольАгента: КонсольSsh,
	процессАгента: ПроцессОс)
	ВыполнитьСОжиданиемКомандуАгента(
		"config load-config-from-files --dir %путьКФайламКонфигурации --extension=%имяРасширения", консольАгента,
		процессАгента)
	Консоль.Записать("XML файлы расширения успешно загружены в ИБ.")
;

метод AgentUpdateDBExt(имяРасширения: Строка, консольАгента: КонсольSsh, процессАгента: ПроцессОс)
	ВыполнитьСОжиданиемКомандуАгента("config update-db-cfg --extension=%имяРасширения", консольАгента, процессАгента)
	Консоль.Записать("Конфигурация БД успешно обновлена для расширения в ИБ.")
;

метод AgentDumpExt(путьКФайлуCFE: Строка, имяРасширения: Строка, консольАгента: КонсольSsh, процессАгента: ПроцессОс)
	ВыполнитьСОжиданиемКомандуАгента("config dump-cfg --file %путьКФайлуCFE --extension=%имяРасширения", консольАгента,
		процессАгента)
	Консоль.Записать("CFE Файл расширения успешно создан.")
;

метод AgentDeleteAllExt(консольАгента: КонсольSsh, процессАгента: ПроцессОс)
	ВыполнитьКомандуАгента("config extensions delete --all-extensions", консольАгента, процессАгента)
	Консоль.Записать("Все расширения удалены из ИБ.")
;

метод AgentSetExtSafeMode(безопасныйРежим: Булево, имяРасширения: Строка, консольАгента: КонсольSsh,
	процессАгента: ПроцессОс)
	пер режим = "yes"
	если не безопасныйРежим
		режим = "no"
	;
	ВыполнитьКомандуАгента(
		"config extensions --extension %имяРасширения --safe-mode=%режим --unsafe-action-protection=%режим",
		консольАгента, процессАгента)
	Консоль.Записать("Для расширений успешно установлен безопасный режим и защита от опасных действий в режим %режим.")
;
