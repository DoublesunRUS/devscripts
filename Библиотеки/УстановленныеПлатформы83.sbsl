/*******************************************************************************
 * Copyright (c) 2020 Alexander Kapralov and Contributors
 * This program and the accompanying materials are made available under
 * the terms of the BSD 3-Clause License which is available at
 * https://spdx.org/licenses/BSD-3-Clause.html#licenseText
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Contributors:
 *    
 *
 ******************************************************************************/

метод УстановленныеПлатформы()
    пер установленныеПлатформы: Соответствие
    
    знч каталогиПлатформы = КаталогиПлатформы()
    
    знч настройкиПоискаФайлов = новый НастройкиПоискаФайлов()
    настройкиПоискаФайлов.ИсключитьФайлы(Истина)
    настройкиПоискаФайлов.МаксимальнаяГлубина(1)
    
    для каталогПлатформы из каталогиПлатформы
        знч найденныеФайлы = Файлы.Найти(каталогПлатформы, настройкиПоискаФайлов)
        для найденныйФайл из найденныеФайлы
            если не найденныйФайл.Имя.НачинаетсяС("8.3")
                продолжить
            ;
            установленныеПлатформы.Вставить(найденныйФайл.Имя, найденныйФайл.Путь)
        ;
    ;
    
    для платформа из установленныеПлатформы
        Консоль.Записать(платформа.Ключ + "|" + платформа.Значение)
        ;
;

метод УстановитьПлатформу(имяДистрибутива: Строка, версияПлатформы: Строка): Булево
    знч используемаяОС = ИспользуемаяОС()
    
    выбор используемаяОС
    когда ОперационныеСистемы.Windows
        выбросить новый ИсключениеНедопустимоеСостояние("Установка под Вин не поддерживается")
    когда ОперационныеСистемы.MacOS
        ВыполнитьКомандуСистемы("hdiutil", ["attach", имяДистрибутива])
        
        знч смонтированныйДиск = "/Volumes/1C Enterprise %версияПлатформы client for macOS/"
        
        ВыполнитьКомандуСистемы("installer", ["-pkg",
        "\"" + смонтированныйДиск + "1cv8-client-%версияПлатформы.pkg" + "\"",
        "-target", "/opt"])

        ВыполнитьКомандуСистемы("hdiutil", ["unmount", "\"" + смонтированныйДиск + "\""])
        
    когда ОперационныеСистемы.Linux
        выбросить новый ИсключениеНедопустимоеСостояние("Установка под Вин не поддерживается")
    ;
    
    возврат Истина
;

метод ВыполнитьКомандуСистемы(имяКоманды: Строка, параметры: Массив)
    знч команда = новый ПроцессОс(имяКоманды, параметры, Ложь)
    команда.Запустить()
    команда.ОжидатьЗавершения()
    
    знч результатВыполненияСкрипта = новый ЧтениеДанных(команда.ПотокВывода, НастройкиПотокаВывода())
    пер списокРезультатов: Массив
    пока не результатВыполненияСкрипта.ЧтениеЗавершено()
        знч прочитаннаяСтрока = результатВыполненияСкрипта.ПрочитатьСтроку()
        если прочитаннаяСтрока == ""
        продолжить
        ;

        списокРезультатов.Добавить(прочитаннаяСтрока)
    ;
    если не списокРезультатов.Пусто()
        знч текстРезультатов = Строки.Соединить(списокРезультатов, "\в\н")
        Консоль.Записать(текстРезультатов)
    ;

    знч ошибкиВыполненияСкрипта = новый ЧтениеДанных(команда.ПотокОшибок, НастройкиПотокаВывода())
    пер списокОшибок: Массив
    пока не ошибкиВыполненияСкрипта.ЧтениеЗавершено()
        знч прочитаннаяСтрока = ошибкиВыполненияСкрипта.ПрочитатьСтроку()
        если прочитаннаяСтрока == ""
        продолжить
        ;

        списокОшибок.Добавить(прочитаннаяСтрока)
    ;
    если не списокОшибок.Пусто()
        знч текстОшибки = Строки.Соединить(списокОшибок, "\в\н")
        выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
    ;
;

метод НастройкиПотокаВывода(): НастройкиЧтенияДанных
    пер настройкиПотокаВывода = новый НастройкиЧтенияДанных()
    настройкиПотокаВывода.Кодировка = СредаИсполнения.ПолучитьСвойство("file.encoding")

    возврат настройкиПотокаВывода
;

перечисление ОперационныеСистемы
    Windows,
    MacOS,
    Linux
;

метод ИспользуемаяОС(): ОперационныеСистемы
    знч имяОС = СредаИсполнения.ПолучитьСвойство("os.name")

    выбор
    когда имяОС.НачинаетсяС("windows", Истина)
        возврат ОперационныеСистемы.Windows

    когда имяОС.Содержит("mac", Истина)
        возврат ОперационныеСистемы.MacOS

    когда имяОС.Содержит("nux", Истина)
        возврат ОперационныеСистемы.Linux

    иначе
        выбросить новый ИсключениеНедопустимоеСостояние("Неизвестная ОС")
    ;
;

метод КаталогиПлатформы(): Массив
    пер списокКаталогов: Массив
    
    знч используемаяОС = ИспользуемаяОС()
    
    выбор используемаяОС
    когда ОперационныеСистемы.Windows
        знч каталог32 = СредаИсполнения.ПолучитьПеременную("ProgramFiles(x86)")
        списокКаталогов.Добавить(каталог32 + "\\1Cv8")
        знч каталог64 = СредаИсполнения.ПолучитьПеременную("ProgramFiles")
        списокКаталогов.Добавить(каталог64 + "\\1Cv8")
    когда ОперационныеСистемы.MacOS
        списокКаталогов.Добавить("/opt/1Cv8")
    когда ОперационныеСистемы.Linux
        списокКаталогов.Добавить("/opt/1C/v8.3/x86_64")
    ;
    
    возврат списокКаталогов
;
