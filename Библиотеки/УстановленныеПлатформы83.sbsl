/*******************************************************************************
 * Copyright (c) 2020 Alexander Kapralov and Contributors
 * This program and the accompanying materials are made available under
 * the terms of the BSD 3-Clause License which is available at
 * https://spdx.org/licenses/BSD-3-Clause.html#licenseText
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Contributors:
 *    
 *
 ******************************************************************************/

метод УстановленныеПлатформы(): Соответствие
	пер установленныеПлатформы: Соответствие

	знч каталогиПлатформы = КаталогиПлатформы()

	знч настройкиПоискаФайлов = новый НастройкиПоискаФайлов()
	настройкиПоискаФайлов.ИсключитьФайлы(Истина)
	настройкиПоискаФайлов.МаксимальнаяГлубина(1)

	для каталогПлатформы из каталогиПлатформы
		знч найденныеФайлы = Файлы.Найти(каталогПлатформы, настройкиПоискаФайлов)
		для найденныйФайл из найденныеФайлы
			если не найденныйФайл.Имя.НачинаетсяС("8.3")
			продолжить
			;
			установленныеПлатформы.Вставить(найденныйФайл.Имя, найденныйФайл.Путь)
		;
	;

	возврат установленныеПлатформы
;

метод МаксимальныеПлатформы(): Соответствие
	знч установленныеПлатформы = УстановленныеПлатформы()

	пер максимальныеПлатформы: Соответствие

	для платформа из установленныеПлатформы
		знч разложенныйТекущийРелиз = платформа.Ключ.Разделить(".")

		пер релизБезВерсииМассивом = новый Массив(разложенныйТекущийРелиз)
		релизБезВерсииМассивом.УдалитьПоИндексу(3)

		знч релизБезВерсии = Строки.Соединить(релизБезВерсииМассивом, ".")

		если не максимальныеПлатформы.СодержитКлюч(релизБезВерсии)
			максимальныеПлатформы.Вставить(релизБезВерсии, платформа.Значение)
		продолжить
		;

		знч последнийРелиз = максимальныеПлатформы.Получить(релизБезВерсии)
		знч разложенныйПоследнийРелиз = последнийРелиз.Разделить(".")

		если разложенныйТекущийРелиз[3] > разложенныйПоследнийРелиз[3]
			максимальныеПлатформы.Вставить(релизБезВерсии, платформа.Значение)
		;
	;

	возврат максимальныеПлатформы
;

метод УстановитьПлатформу(имяДистрибутива: Строка, версияПлатформы: Строка): Булево
	знч используемаяОС = ИспользуемаяОС()

	выбор используемаяОС
	когда ОперационныеСистемы.Windows
		знч имяВременногоКаталога = Файлы.СоздатьВременныйКаталог(, Ложь)

		ВыполнитьКомандуСистемы("C:/Program Files/7-Zip/7z", ["x", "-o%имяВременногоКаталога", имяДистрибутива])

		ВыполнитьMsiExec(["/package", "\"%имяВременногоКаталога\\1CEnterprise 8 (x86-64).msi\""])
		
		Файлы.Удалить(имяВременногоКаталога)

	когда ОперационныеСистемы.MacOS
		ВыполнитьКомандуСистемы("hdiutil", ["attach", имяДистрибутива])

		знч смонтированныйДиск = "/Volumes/1C Enterprise %версияПлатформы client for macOS/"

		ВыполнитьКомандуСистемы("installer", ["-pkg", "\"%{смонтированныйДиск}1cv8-client-%версияПлатформы.pkg" + "\"",
			"-target", "/opt"])

		ВыполнитьКомандуСистемы("hdiutil", ["unmount", "\"%смонтированныйДиск\""])

	когда ОперационныеСистемы.Linux
		выбросить новый ИсключениеНедопустимоеСостояние("Установка под Linux не поддерживается")
	;

	возврат Истина
;

метод УдалитьПлатформу(версияПлатформы: Строка): Булево
	знч используемаяОС = ИспользуемаяОС()

	выбор используемаяОС
	когда ОперационныеСистемы.Windows
		знч результат = ВыполнитьPowershell(["get-wmiobject", "Win32_Product", "-Filter", "'Name", "LIKE", "''\%(%версияПлатформы)'''"])

		пер гуидУстановки = результат[0].Разделить(": ")[1]

		ВыполнитьMsiExec(["/uninstall", "%гуидУстановки"])

	когда ОперационныеСистемы.MacOS
		выбросить новый ИсключениеНедопустимоеСостояние("Удаление под MacOS не поддерживается")

	когда ОперационныеСистемы.Linux
		выбросить новый ИсключениеНедопустимоеСостояние("Удаление под Linux не поддерживается")
	;

	возврат Истина
;

метод ВыполнитьКомандуСистемы(имяКоманды: Строка, параметры: Массив)
	знч команда = новый ПроцессОс(имяКоманды, параметры, Ложь)
	команда.Запустить()
	команда.ОжидатьЗавершения()

	знч результатВыполненияСкрипта = новый ЧтениеДанных(команда.ПотокВывода, НастройкиПотокаВывода())
	пер списокРезультатов: Массив
	пока не результатВыполненияСкрипта.ЧтениеЗавершено()
		знч прочитаннаяСтрока = результатВыполненияСкрипта.ПрочитатьСтроку()
		если прочитаннаяСтрока == ""
		продолжить
		;

		списокРезультатов.Добавить(прочитаннаяСтрока)
	;
	если не списокРезультатов.Пусто()
		знч текстРезультатов = Строки.Соединить(списокРезультатов, "\в\н")
		Консоль.Записать(текстРезультатов)
	;

	знч ошибкиВыполненияСкрипта = новый ЧтениеДанных(команда.ПотокОшибок, НастройкиПотокаВывода())
	пер списокОшибок: Массив
	пока не ошибкиВыполненияСкрипта.ЧтениеЗавершено()
		знч прочитаннаяСтрока = ошибкиВыполненияСкрипта.ПрочитатьСтроку()
		если прочитаннаяСтрока == ""
		продолжить
		;

		списокОшибок.Добавить(прочитаннаяСтрока)
	;
	если не списокОшибок.Пусто()
		знч текстОшибки = Строки.Соединить(списокОшибок, "\в\н")
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
	;
;

метод ВыполнитьPowershell(параметры: Массив): Массив
	знч команда = новый ПроцессОс("powershell", параметры, Ложь)
	команда.Запустить()
	команда.ОжидатьЗавершения()

	знч результатВыполненияСкрипта = новый ЧтениеДанных(команда.ПотокВывода, НастройкиПотокаВывода())
	пер списокРезультатов: Массив
	пока не результатВыполненияСкрипта.ЧтениеЗавершено()
		знч прочитаннаяСтрока = результатВыполненияСкрипта.ПрочитатьСтроку()
		если прочитаннаяСтрока == ""
		продолжить
		;

		списокРезультатов.Добавить(прочитаннаяСтрока)
	;

	знч ошибкиВыполненияСкрипта = новый ЧтениеДанных(команда.ПотокОшибок, НастройкиПотокаВывода())
	пер списокОшибок: Массив
	пока не ошибкиВыполненияСкрипта.ЧтениеЗавершено()
		знч прочитаннаяСтрока = ошибкиВыполненияСкрипта.ПрочитатьСтроку()
		если прочитаннаяСтрока == ""
		продолжить
		;

		списокОшибок.Добавить(прочитаннаяСтрока)
	;
	если не списокОшибок.Пусто()
		знч текстОшибки = Строки.Соединить(списокОшибок, "\в\н")
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
	;
	
	возврат списокРезультатов
;

метод ВыполнитьMsiExec(параметры: Массив)
	знч временныйФайлЛога = Файлы.СоздатьВременныйФайл(, ".log")

	параметры.Добавить("/quiet")
	параметры.Добавить("/norestart")
	параметры.Добавить("/Leo+")
	параметры.Добавить("\"%временныйФайлЛога\"")
	знч команда = новый ПроцессОс("msiexec", параметры, Ложь)
	команда.Запустить()
	команда.ОжидатьЗавершения()

	пер списокОшибок = временныйФайлЛога.ОткрытьПотокЧтения().ПрочитатьКакТекст("UTF-16").Разделить("\в\н")
	списокОшибок.Удалить(списокОшибок.Последний())
	списокОшибок.Удалить(списокОшибок.Первый())
	если не списокОшибок.Пусто()
		знч текстОшибки = Строки.Соединить(списокОшибок, "\в\н")
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
	;
;

метод НастройкиПотокаВывода(): НастройкиЧтенияДанных
	пер настройкиПотокаВывода = новый НастройкиЧтенияДанных()
	настройкиПотокаВывода.Кодировка = СредаИсполнения.ПолучитьСвойство("file.encoding")

	возврат настройкиПотокаВывода
;


перечисление ОперационныеСистемы
	Windows,
	MacOS,
	Linux
;


метод ИспользуемаяОС(): ОперационныеСистемы
	знч имяОС = СредаИсполнения.ПолучитьСвойство("os.name")

	выбор когда имяОС.НачинаетсяС("windows", Истина)
		возврат ОперационныеСистемы.Windows

	когда имяОС.Содержит("mac", Истина)
		возврат ОперационныеСистемы.MacOS

	когда имяОС.Содержит("nux", Истина)
		возврат ОперационныеСистемы.Linux

	иначе
		выбросить новый ИсключениеНедопустимоеСостояние("Неизвестная ОС")
	;
;

метод КаталогиПлатформы(): Массив
	пер списокКаталогов: Массив

	знч используемаяОС = ИспользуемаяОС()

	выбор используемаяОС
	когда ОперационныеСистемы.Windows
		знч каталог32 = СредаИсполнения.ПолучитьПеременную("ProgramFiles(x86)")
		списокКаталогов.Добавить(каталог32 + "\\1Cv8")
		знч каталог64 = СредаИсполнения.ПолучитьПеременную("ProgramFiles")
		списокКаталогов.Добавить(каталог64 + "\\1Cv8")
	когда ОперационныеСистемы.MacOS
		списокКаталогов.Добавить("/opt/1Cv8")
	когда ОперационныеСистемы.Linux
		списокКаталогов.Добавить("/opt/1C/v8.3/x86_64")
	;

	возврат списокКаталогов
;