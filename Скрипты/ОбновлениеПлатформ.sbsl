/*******************************************************************************
 * Copyright (c) 2020 Alexander Kapralov and Contributors
 * This program and the accompanying materials are made available under
 * the terms of the BSD 3-Clause License which is available at
 * https://spdx.org/licenses/BSD-3-Clause.html#licenseText
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Contributors:
 *    
 *
 ******************************************************************************/

конст ИСПОЛЬЗУЕМЫЕ_ВЕРСИИ_ПЛАТФОРМЫ = ["10", "12", "14", "15", "16", "17"]


метод Скрипт()
    знч имяПользователя = Консоль.СчитатьСтроку("Имя пользователя: ")
    знч парольПользователя = Консоль.СчитатьСтроку("Пароль пользователя: ")

    ОбновитьПлатформы(имяПользователя, парольПользователя)
;

метод ОбновитьПлатформы(имяПользователя: Строка, парольПользователя: Строка)
    знч используемыеВерсииПлатформы = ИспользуемыеВерсииПлатформы()

    знч установленныеВерсииПлатформы = УстановленныеВерсииПлатформы()

    знч последниеВерсииПлатформы = ПоследниеВерсииПлатформы(имяПользователя, парольПользователя)

    пер лишниеВерсииПлатформы: Множество
    лишниеВерсииПлатформы.ДобавитьВсе(установленныеВерсииПлатформы)
    лишниеВерсииПлатформы.УдалитьВсе(используемыеВерсииПлатформы)
    лишниеВерсииПлатформы.УдалитьВсе(последниеВерсииПлатформы)

    пер новыеВерсииПлатформы: Множество
    новыеВерсииПлатформы.ДобавитьВсе(используемыеВерсииПлатформы)
    новыеВерсииПлатформы.ДобавитьВсе(последниеВерсииПлатформы)
    новыеВерсииПлатформы.УдалитьВсе(установленныеВерсииПлатформы)

    знч новыеВерсииПлатформыМассивом = новый Массив(новыеВерсииПлатформы)
    Массив.Сортировать(новыеВерсииПлатформыМассивом)
    для версияПлатформы из новыеВерсииПлатформыМассивом
        Консоль.Записать("Необходимо установить платформу %версияПлатформы")
    ;

    знч лишниеВерсииПлатформыМассивом = новый Массив(лишниеВерсииПлатформы)
    Массив.Сортировать(лишниеВерсииПлатформыМассивом)
    для версияПлатформы из лишниеВерсииПлатформыМассивом
        Консоль.Записать("Необходимо удалить платформу %версияПлатформы")
    ;
    
    знч установить = Консоль.СчитатьБулево("Выполнить обновление платформ?")
    если не установить
        возврат
    ;
    
    для версияПлатформы из новыеВерсииПлатформыМассивом
        Консоль.Записать("Скачиваю платформу %версияПлатформы")
        знч имяДистрибутива = СкачатьПлатформу(версияПлатформы, имяПользователя, парольПользователя)
        если имяДистрибутива == ""
            прервать
        ;
        Консоль.Записать("Устанавливаю платформу %версияПлатформы")
        УстановитьПлатформу(имяДистрибутива, версияПлатформы)
        Файлы.Удалить(имяДистрибутива)
    ;
;

метод ИспользуемыеВерсииПлатформы(): Множество
    знч потокВывода = ВыполнитьСкрипт("../Библиотеки/СписокИнформационныхБаз.sbsl", "ИспользуемыеВерсии", [])
    знч версииПлатформы = ОбъектИзПотокаВывода(потокВывода) как Массив

    пер используемыеВерсииПлатформы: Множество
    для версияПлатформы из версииПлатформы
        знч версияМассивом = версияПлатформы.Разделить("|")
        
        Консоль.Записать("База " + версияМассивом[0] + " использует версию " + версияМассивом[1])
        используемыеВерсииПлатформы.Добавить(версияМассивом[1])
    ;

    возврат используемыеВерсииПлатформы
;

метод УстановленныеВерсииПлатформы(): Множество
    знч потокВывода = ВыполнитьСкрипт("../Библиотеки/УстановленныеПлатформы83.sbsl", "УстановленныеПлатформы", [])
    знч версииПлатформы = ОбъектИзПотокаВывода(потокВывода) как Массив

    пер установленныеВерсииПлатформы: Множество
    для версияПлатформы из версииПлатформы
        установленныеВерсииПлатформы.Добавить(версияПлатформы.Подстрока(0, версияПлатформы.Найти("|")))
    ;

    возврат установленныеВерсииПлатформы
;

метод ПоследниеВерсииПлатформы(имяПользователя: Строка, парольПользователя: Строка): Множество
    знч потокВывода = ВыполнитьСкрипт("../Библиотеки/ОпубликованныеПлатформы83.sbsl", "ПоследниеРелизы", [имяПользователя,
        парольПользователя])
    знч версииПлатформы = ОбъектИзПотокаВывода(потокВывода) как Массив

    пер последниеВерсииПлатформы: Множество
    знч результатВыполненияСкрипта = новый ЧтениеДанных(потокВывода)
    для версияПлатформы из версииПлатформы
        знч разложеннаяВерсияПлатформы = версияПлатформы.Разделить(".")

        если не ИСПОЛЬЗУЕМЫЕ_ВЕРСИИ_ПЛАТФОРМЫ.Содержит(разложеннаяВерсияПлатформы[2])
        продолжить
        ;

        последниеВерсииПлатформы.Добавить(версияПлатформы)
    ;

    возврат последниеВерсииПлатформы
;

метод СкачатьПлатформу(версияПлатформы: Строка, имяПользователя: Строка, парольПользователя: Строка): Строка
    знч используемаяОС = ИспользуемаяОС()
    
    пер целеваяПлатформа: Строка
    выбор используемаяОС
    когда ОперационныеСистемы.Windows
        целеваяПлатформа = "platform-win64"
    когда ОперационныеСистемы.MacOS
        целеваяПлатформа = "platform-osx"
    когда ОперационныеСистемы.Linux
        целеваяПлатформа = "platform-deb64"
    ;

    знч потокВывода = ВыполнитьСкрипт("../Библиотеки/dl-1c.sbsl", "main", [имяПользователя,
        парольПользователя, целеваяПлатформа, версияПлатформы])
    знч имяДистрибутива = ОбъектИзПотокаВывода(потокВывода) как Строка

    возврат имяДистрибутива
;

метод УстановитьПлатформу(имяДистрибутива: Строка, версияПлатформы: Строка): Булево
    знч используемаяОС = ИспользуемаяОС()
    
    ВыполнитьСкрипт("../Библиотеки/УстановленныеПлатформы83.sbsl", "УстановитьПлатформу", [имяДистрибутива, версияПлатформы])
    
    возврат Истина
;

перечисление ОперационныеСистемы
    Windows,
    MacOS,
    Linux
;

метод ИспользуемаяОС(): ОперационныеСистемы
    знч имяОС = СредаИсполнения.ПолучитьСвойство("os.name")

    выбор
    когда имяОС.НачинаетсяС("windows", Истина)
        возврат ОперационныеСистемы.Windows

    когда имяОС.Содержит("mac", Истина)
        возврат ОперационныеСистемы.MacOS

    когда имяОС.Содержит("nux", Истина)
        возврат ОперационныеСистемы.Linux

    иначе
        выбросить новый ИсключениеНедопустимоеСостояние("Неизвестная ОС")
    ;
;

/* 
 * Методы для вызова других скриптов. Необходимо копировать в свой скрипт
 */
 
метод ВыполнитьСкрипт(имяФайлаСкрипта: Строка, имяКомандыСкрипта: Строка, параметрыСкрипта: Массив): ПотокЧтения
    пер расширениеИсполнителя: Строка
    знч имяОС = СредаИсполнения.ПолучитьСвойство("os.name")
    выбор
    когда имяОС.НачинаетсяС("windows", Истина)
        расширениеИсполнителя = "cmd"
    иначе
        расширениеИсполнителя = "sh"
    ;
    знч путьКИсполнителю = СредаИсполнения.ПолучитьСвойство("logback.configurationFile").Удалить("config" + Файлы.СимволРазделителя
        + "logback.xml") + "bin/executor_j11." + расширениеИсполнителя

    знч командаТекущегоСкрипта = СредаИсполнения.ПолучитьСвойство("sun.java.command")
    пер имяФайлаТекущегоСкрипта = командаТекущегоСкрипта.Подстрока(0, командаТекущегоСкрипта.Найти(".sbsl") + 5)
    имяФайлаТекущегоСкрипта = имяФайлаТекущегоСкрипта.Подстрока(имяФайлаТекущегоСкрипта.Найти(" ") + 1)
    имяФайлаТекущегоСкрипта = имяФайлаТекущегоСкрипта.Подстрока(имяФайлаТекущегоСкрипта.Найти(" ") + 1)
    знч файлТекущегоСкрипта = новый Файл(имяФайлаТекущегоСкрипта)
    пер путьТекущегоСкрипта = ""
    если файлТекущегоСкрипта.Каталог != Неопределено
        путьТекущегоСкрипта = файлТекущегоСкрипта.Каталог.Путь + Файлы.СимволРазделителя
    ;

    пер аргументыПроцессаОс = ["-s", путьТекущегоСкрипта + имяФайлаСкрипта, "-m", имяКомандыСкрипта]
    если не параметрыСкрипта.Пусто()
        аргументыПроцессаОс.ДобавитьВсе(параметрыСкрипта)
    ;

    знч библиотека = новый ПроцессОс(путьКИсполнителю, аргументыПроцессаОс, Ложь)

    библиотека.Запустить()

    знч ошибкиВыполненияСкрипта = новый ЧтениеДанных(библиотека.ПотокОшибок, НастройкиПотокаВывода())
    пер списокОшибок: Массив
    пока не ошибкиВыполненияСкрипта.ЧтениеЗавершено()
        знч прочитаннаяСтрока = ошибкиВыполненияСкрипта.ПрочитатьСтроку()
        если прочитаннаяСтрока == ""
        продолжить
        ;

        списокОшибок.Добавить(прочитаннаяСтрока)
    ;
    если не списокОшибок.Пусто()
        знч текстОшибки = Строки.Соединить(списокОшибок, "\в\н")
        выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
    ;

    возврат библиотека.ПотокВывода
;

метод НастройкиПотокаВывода(): НастройкиЧтенияДанных
    пер настройкиПотокаВывода = новый НастройкиЧтенияДанных()
    настройкиПотокаВывода.Кодировка = СредаИсполнения.ПолучитьСвойство("file.encoding")

    возврат настройкиПотокаВывода
;

метод ОбъектИзПотокаВывода(потокВывода: ПотокЧтения): Строка|Массив
    пер результаты: Массив
    знч результатВыполненияСкрипта = новый ЧтениеДанных(потокВывода, НастройкиПотокаВывода())
    пока не результатВыполненияСкрипта.ЧтениеЗавершено()
        знч прочитаннаяСтрока = результатВыполненияСкрипта.ПрочитатьСтроку()

        если прочитаннаяСтрока == ""
        продолжить
        ;

        знч объект = ОбъектИзСтроки(прочитаннаяСтрока)

        результаты.Добавить(объект)
    ;

    если результаты.Размер() == 1
        возврат результаты[0]
    ;

    возврат результаты
;

метод ОбъектИзСтроки(строкаПотокаВывода: Строка): Строка|Массив
    выбор строкаПотокаВывода[0]
    когда "["
        знч результатСтрокой = строкаПотокаВывода.Подстрока(1, строкаПотокаВывода.Длина() - 1)
        знч результатМассивом = результатСтрокой.Разделить(", ", Ложь)
        возврат результатМассивом

    иначе
        возврат строкаПотокаВывода
    ;
;