/*******************************************************************************
 * Copyright (c) 2020 Alexander Kapralov and Contributors
 * This program and the accompanying materials are made available under
 * the terms of the BSD 3-Clause License which is available at
 * https://spdx.org/licenses/BSD-3-Clause.html#licenseText
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Contributors:
 *    Dmitry Klimenko - utfTo866 method
 *
 ******************************************************************************/

конст ИСПОЛЬЗУЕМЫЕ_ВЕРСИИ_ПЛАТФОРМЫ = ["10", "12", "14", "15", "16", "17"]


метод Скрипт()
    знч имяПользователя = Консоль.СчитатьСтроку("Имя пользователя: ")
    знч парольПользователя = Консоль.СчитатьСтроку("Пароль пользователя: ")

    ОбновитьПлатформы(имяПользователя, парольПользователя)
;

метод ОбновитьПлатформы(имяПользователя: Строка, парольПользователя: Строка)
    знч используемыеВерсииПлатформы = ИспользуемыеВерсииПлатформы()

    знч установленныеВерсииПлатформы = УстановленныеВерсииПлатформы()

    знч последниеВерсииПлатформы = ПоследниеВерсииПлатформы(имяПользователя, парольПользователя)

    пер лишниеВерсииПлатформы: Множество
    лишниеВерсииПлатформы.ДобавитьВсе(установленныеВерсииПлатформы)
    лишниеВерсииПлатформы.УдалитьВсе(используемыеВерсииПлатформы)
    лишниеВерсииПлатформы.УдалитьВсе(последниеВерсииПлатформы)

    пер новыеВерсииПлатформы: Множество
    новыеВерсииПлатформы.ДобавитьВсе(используемыеВерсииПлатформы)
    новыеВерсииПлатформы.ДобавитьВсе(последниеВерсииПлатформы)
    новыеВерсииПлатформы.УдалитьВсе(установленныеВерсииПлатформы)

    знч новыеВерсииПлатформыМассивом = новый Массив(новыеВерсииПлатформы)
    Массив.Сортировать(новыеВерсииПлатформыМассивом)
    для версияПлатформы из новыеВерсииПлатформыМассивом
        Консоль.Записать("Необходимо установить платформу %версияПлатформы")
    ;

    знч лишниеВерсииПлатформыМассивом = новый Массив(лишниеВерсииПлатформы)
    Массив.Сортировать(лишниеВерсииПлатформыМассивом)
    для версияПлатформы из лишниеВерсииПлатформыМассивом
        Консоль.Записать("Необходимо удалить платформу %версияПлатформы")
    ;
;

метод ИспользуемыеВерсииПлатформы(): Множество
    знч потокВывода = ВыполнитьСкрипт("../Библиотеки/СписокИнформационныхБаз.sbsl", "ИспользуемыеВерсии", [])
    знч версииПлатформы = ОбъектИзПотокаВывода(потокВывода) как Массив

    пер используемыеВерсииПлатформы: Множество
    для версияПлатформы из версииПлатформы
        знч версияМассивом = версияПлатформы.Разделить("|")
        
        Консоль.Записать("База " + версияМассивом[0] + " использует версию " + версияМассивом[1])
        используемыеВерсииПлатформы.Добавить(версияМассивом[1])
    ;

    возврат используемыеВерсииПлатформы
;

метод УстановленныеВерсииПлатформы(): Множество
    знч потокВывода = ВыполнитьСкрипт("../Библиотеки/УстановленныеПлатформы83.sbsl", "Скрипт", [])
    знч версииПлатформы = ОбъектИзПотокаВывода(потокВывода) как Массив

    пер установленныеВерсииПлатформы: Множество
    для версияПлатформы из версииПлатформы
        установленныеВерсииПлатформы.Добавить(версияПлатформы.Подстрока(0, версияПлатформы.Найти("|")))
    ;

    возврат установленныеВерсииПлатформы
;

метод ПоследниеВерсииПлатформы(имяПользователя: Строка, парольПользователя: Строка): Множество
    знч потокВывода = ВыполнитьСкрипт("../Библиотеки/ОпубликованныеПлатформы83.sbsl", "ПоследниеРелизы", [имяПользователя,
        парольПользователя])
    знч версииПлатформы = ОбъектИзПотокаВывода(потокВывода) как Массив

    пер последниеВерсииПлатформы: Множество
    знч результатВыполненияСкрипта = новый ЧтениеДанных(потокВывода)
    для версияПлатформы из версииПлатформы
        знч разложеннаяВерсияПлатформы = версияПлатформы.Разделить(".")

        если не ИСПОЛЬЗУЕМЫЕ_ВЕРСИИ_ПЛАТФОРМЫ.Содержит(разложеннаяВерсияПлатформы[2])
        продолжить
        ;

        последниеВерсииПлатформы.Добавить(версияПлатформы)
    ;

    возврат последниеВерсииПлатформы
;

/* 
 * Методы для вызова других скриптов. Необходимо копировать в свой скрипт
 */

метод ВыполнитьСкрипт(имяФайлаСкрипта: Строка, имяКомандыСкрипта: Строка, параметрыСкрипта: Массив): ПотокЧтения
    пер расширениеИсполнителя: Строка
    знч имяОС = СредаИсполнения.ПолучитьСвойство("os.name")
    выбор
    когда имяОС.НачинаетсяС("windows", Истина)
        расширениеИсполнителя = "cmd"
    иначе
        расширениеИсполнителя = "sh"
    ;
    знч путьКИсполнителю = СредаИсполнения.ПолучитьСвойство("logback.configurationFile").Удалить("config" + Файлы.СимволРазделителя + "logback.xml")
        + "bin/executor_j11." + расширениеИсполнителя

    если имяОС.НачинаетсяС("windows", Истина)
        имяФайлаСкрипта = utfTo866(имяФайлаСкрипта)
        имяКомандыСкрипта = utfTo866(имяКомандыСкрипта)
    ;

    пер аргументыПроцессаОс = ["-s", имяФайлаСкрипта, "-m", имяКомандыСкрипта]
    если не параметрыСкрипта.Пусто()
        аргументыПроцессаОс.ДобавитьВсе(параметрыСкрипта)
    ;

    знч библиотека = новый ПроцессОс(путьКИсполнителю, аргументыПроцессаОс, Ложь)

    библиотека.Запустить()

    знч ошибкиВыполненияСкрипта = новый ЧтениеДанных(библиотека.ПотокОшибок)
    пер списокОшибок: Массив
    пока не ошибкиВыполненияСкрипта.ЧтениеЗавершено()
        знч прочитаннаяСтрока = ошибкиВыполненияСкрипта.ПрочитатьСтроку()
        если прочитаннаяСтрока == ""
        продолжить
        ;

        списокОшибок.Добавить(прочитаннаяСтрока)
    ;
    если не списокОшибок.Пусто()
        знч текстОшибки = Строки.Соединить(списокОшибок, "\в\н")
        выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
    ;

    возврат библиотека.ПотокВывода
;

метод ОбъектИзПотокаВывода(потокВывода: ПотокЧтения): Строка|Соответствие|Массив
    пер результаты: Массив
    знч результатВыполненияСкрипта = новый ЧтениеДанных(потокВывода)
    пока не результатВыполненияСкрипта.ЧтениеЗавершено()
        знч прочитаннаяСтрока = результатВыполненияСкрипта.ПрочитатьСтроку()

        если прочитаннаяСтрока == ""
        продолжить
        ;

        знч объект = ОбъектИзСтроки(прочитаннаяСтрока)

        результаты.Добавить(объект)
    ;

    если результаты.Размер() == 1
        возврат результаты[0]
    ;

    возврат результаты
;

метод ОбъектИзСтроки(строкаПотокаВывода: Строка): Строка|Соответствие|Массив
    пер соответствиеПотокаВывода: Соответствие

    выбор строкаПотокаВывода[0]
    когда "{"
        возврат соответствиеПотокаВывода

    когда "["
        знч результатСтрокой = строкаПотокаВывода.Подстрока(1, строкаПотокаВывода.Длина() - 1)
        знч результатМассивом = результатСтрокой.Разделить(", ", Ложь)
        возврат результатМассивом

    иначе
        возврат строкаПотокаВывода
    ;
;

method utfTo866(source: String): String

    var result = ""

    val ru_a = Chars.GetCode("а")
    val ru_p = Chars.GetCode("п")
    val ru_r = Chars.GetCode("р")
    val ru_z = Chars.GetCode("я")
    val ru_e = Chars.GetCode("ё")
    val ru_AA = Chars.GetCode("А")
    val ru_ZZ = Chars.GetCode("Я")
    val ru_EE = Chars.GetCode("Ё")
    val code_a = 160
    val code_r = 224
    val code_AA = 80
    val code_e = 240
    val code_EE = 241

    for s in source

        val codeUTF = Chars.GetCode(s)
        var code866 = codeUTF

        if ru_AA <= codeUTF and codeUTF <= ru_ZZ
            code866 = code_AA + codeUTF - ru_AA
        else if  ru_a <= codeUTF and codeUTF <= ru_p
            code866 = code_a + codeUTF - ru_a
        else if  ru_r <= codeUTF and codeUTF <= ru_z
            code866 = code_a + codeUTF - ru_r
        else if codeUTF == ru_e
            code866 = code_e
        else if codeUTF == ru_EE
            code866 = code_EE
        ;

        result += Chars.ByCode(code866)
    ;

    return result
;
