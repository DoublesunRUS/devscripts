#!/usr/bin/executor

/*******************************************************************************
 * Copyright (c) 2020 Alexander Kapralov and Contributors
 * This program and the accompanying materials are made available under
 * the terms of the BSD 3-Clause License which is available at
 * https://spdx.org/licenses/BSD-3-Clause.html#licenseText
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Contributors:
 *    
 *
 ******************************************************************************/

метод Скрипт(путьККонфигурацииЕДТ: Строка): Строка
    знч версияПлатформы = ВерсияПлатформыПроекта(путьККонфигурацииЕДТ)

    возврат ПутьКПлатформеПоМаксимальнойСборке(версияПлатформы)
;

метод ВерсияПлатформыПроекта(путьККонфигурацииЕДТ: Строка): Строка
    пер версияПлатформы: Строка = ""

    знч файлПроекта = новый Файл(путьККонфигурацииЕДТ + Файлы.СимволРазделителя + "DT-INF/PROJECT.PMF")
    если не файлПроекта.Существует()
        знч текстОшибки = "В указанном каталоге не найден файл PROJECT.PMF"
        выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
    ;

    знч чтение = новый ЧтениеДанных(файлПроекта.ОткрытьПотокЧтения())
    пока не чтение.ЧтениеЗавершено()
        знч строкаФайла = чтение.ПрочитатьСтроку()
        знч ключИЗначение = строкаФайла.Разделить(": ")
        если ключИЗначение[0] == "Runtime-Version"
            версияПлатформы = ключИЗначение[1]
        прервать
        ;
    ;

    возврат версияПлатформы
;

метод ПутьКПлатформеПоМаксимальнойСборке(версияПлатформы: Строка): Строка
    знч максимальныеПлатформы = МаксимальныеПлатформы()

    пер путьКПлатформе = максимальныеПлатформы.Получить(версияПлатформы)
    если путьКПлатформе == Неопределено
        знч текстОшибки = Строки.Шаблон("Не найдена установленная платформа $0", версияПлатформы)
        выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
    ;
    путьКПлатформе = путьКПлатформе + "/bin/1cv8"

    возврат путьКПлатформе
;

метод МаксимальныеПлатформы(): Соответствие
    знч потокВывода = ВыполнитьСкрипт("../Библиотеки/УстановленныеПлатформы83.sbsl", "МаксимальныеПлатформы", [])
    знч максимальныеПлатформы = ОбъектИзПотокаВывода(потокВывода) как Соответствие

    возврат максимальныеПлатформы
;

/* 
 * Методы для вызова других скриптов. Необходимо копировать в свой скрипт
 */
метод ВыполнитьСкрипт(имяФайлаСкрипта: Строка, имяКомандыСкрипта: Строка, параметрыСкрипта: Массив): ПотокЧтения
    пер расширениеИсполнителя: Строка
    знч имяОС = СредаИсполнения.ПолучитьСвойство("os.name")
    выбор когда имяОС.НачинаетсяС("windows", Истина)
        расширениеИсполнителя = "cmd"
    иначе
        расширениеИсполнителя = "sh"
    ;
    знч путьКИсполнителю = СредаИсполнения.ПолучитьСвойство("logback.configurationFile").Удалить("config" + Файлы.СимволРазделителя
        + "logback.xml") + "bin/executor_j11." + расширениеИсполнителя

    знч командаТекущегоСкрипта = СредаИсполнения.ПолучитьСвойство("sun.java.command")
    пер имяФайлаТекущегоСкрипта = командаТекущегоСкрипта.Подстрока(0, командаТекущегоСкрипта.Найти(".sbsl") + 5)
    имяФайлаТекущегоСкрипта = имяФайлаТекущегоСкрипта.Подстрока(имяФайлаТекущегоСкрипта.Найти(" ") + 1)
    имяФайлаТекущегоСкрипта = имяФайлаТекущегоСкрипта.Подстрока(имяФайлаТекущегоСкрипта.Найти(" ") + 1)
    знч файлТекущегоСкрипта = новый Файл(имяФайлаТекущегоСкрипта)
    пер путьТекущегоСкрипта = ""
    если файлТекущегоСкрипта.Каталог != Неопределено
        путьТекущегоСкрипта = файлТекущегоСкрипта.Каталог.Путь + Файлы.СимволРазделителя
    ;

    пер аргументыПроцессаОс = ["-s", путьТекущегоСкрипта + имяФайлаСкрипта, "-m", имяКомандыСкрипта]
    если не параметрыСкрипта.Пусто()
        аргументыПроцессаОс.ДобавитьВсе(параметрыСкрипта)
    ;

    знч библиотека = новый ПроцессОс(путьКИсполнителю, аргументыПроцессаОс, Ложь)

    библиотека.Запустить()
    библиотека.ОжидатьЗавершения()

    знч ошибкиВыполненияСкрипта = библиотека.ПолучитьПотокОшибок()
    знч текстОшибок = ошибкиВыполненияСкрипта.ПрочитатьКакТекст(КодировкаПотокаВыводаСкриптов())
    если не текстОшибок.Пусто()
        выбросить новый ИсключениеНедопустимоеСостояние(текстОшибок)
    ;

    возврат библиотека.ПотокВывода
;

метод КодировкаПотокаВыводаСкриптов(): Строка
    возврат СредаИсполнения.ПолучитьСвойство("file.encoding")
;

метод НастройкиПотокаВыводаСкриптов(): НастройкиЧтенияДанных
    пер настройкиПотокаВывода = новый НастройкиЧтенияДанных()
    настройкиПотокаВывода.Кодировка = КодировкаПотокаВыводаСкриптов()

    возврат настройкиПотокаВывода
;

метод ОбъектИзПотокаВывода(потокВывода: ПотокЧтения): Строка|Массив|Соответствие
    пер массивСтрок: Массив

    знч результатВыполненияСкрипта = новый ЧтениеДанных(потокВывода, НастройкиПотокаВыводаСкриптов())
    пока не результатВыполненияСкрипта.ЧтениеЗавершено()
        знч прочитаннаяСтрока = результатВыполненияСкрипта.ПрочитатьСтроку()

        если прочитаннаяСтрока.Пусто()
        продолжить
        ;

        выбор прочитаннаяСтрока[0]
        когда "["
            знч результатМассивом = МассивИзСтроки(прочитаннаяСтрока)
            если результатМассивом.Размер() == 1
                массивСтрок.Добавить(результатМассивом[0])
            иначе
                возврат результатМассивом
        ;
        когда "{"
            возврат СоответствиеИзСтроки(прочитаннаяСтрока)

        иначе
            массивСтрок.Добавить(прочитаннаяСтрока)
        ;
    ;
    возврат массивСтрок
;

метод МассивИзСтроки(строкаПотокаВывода: Строка): Массив
    знч результатСтрокой = строкаПотокаВывода.Подстрока(1, строкаПотокаВывода.Длина() - 1)
    знч результатМассивом = результатСтрокой.Разделить(", ", Ложь)
    возврат результатМассивом
;

метод СоответствиеИзСтроки(строкаПотокаВывода: Строка): Соответствие
    пер результатСоответствием: Соответствие

    знч результатСтрокой = строкаПотокаВывода.Подстрока(1, строкаПотокаВывода.Длина() - 1)

    знч результатМассивом = результатСтрокой.Разделить(", ")
    для строкаРезультата из результатМассивом
        знч ключИЗначение = строкаРезультата.Разделить("=")

        результатСоответствием.Вставить(ключИЗначение[0], ключИЗначение[1])
    ;

    возврат результатСоответствием
;