#!/usr/bin/executor

/*******************************************************************************
 * Copyright (c) 2020 Alexander Kapralov and Contributors
 * This program and the accompanying materials are made available under
 * the terms of the BSD 3-Clause License which is available at
 * https://spdx.org/licenses/BSD-3-Clause.html#licenseText
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Contributors:
 *    
 *
 ******************************************************************************/

конст ОТЛАДКА = Истина


структура ОписаниеУправляющегоФайла
    знч путьКРабочейОбласти: Строка
    знч путьКФайламКонфигурации: Строка
;


метод Инициализировать(): Файл
    знч управляющийФайл = Файлы.СоздатьВременныйФайл("cicd", ".json", Ложь)

    если ОТЛАДКА
        Консоль.Записать("Управляющий файл: " + управляющийФайл.Путь)
    ;

    знч временныйПутьКРабочейОбласти = "C:\\Users\\papa\\AppData\\Local\\Temp\\cicd_ws16246884117018625498"
    знч временныйПутьКФайламКонфигурации = "C:\\Users\\papa\\AppData\\Local\\Temp\\cicd_1c_xml4597531280410749415"
//    знч временныйПутьКРабочейОбласти = Файлы.СоздатьВременныйКаталог("cicd_ws", Ложь).Путь
//    знч временныйПутьКФайламКонфигурации = Файлы.СоздатьВременныйКаталог("cicd_1c_xml", Ложь).Путь
    если ОТЛАДКА
        Консоль.Записать("Рабочая область: " + временныйПутьКРабочейОбласти)
        Консоль.Записать("Файлы конфигурации: " + временныйПутьКФайламКонфигурации)
        Консоль.Записать("")
    ;

    знч содержимоеФайла = новый ОписаниеУправляющегоФайла(временныйПутьКРабочейОбласти, временныйПутьКФайламКонфигурации)
    ЗаписатьУправляющийФайл(содержимоеФайла, управляющийФайл)

    возврат управляющийФайл
;

метод ПрочитатьУправляющийФайл(управляющийФайл: Файл): ОписаниеУправляющегоФайла
    пер путьКРабочейОбласти: Строка
    пер путьКФайламКонфигурации: Строка

    знч потокЧтения = управляющийФайл.ОткрытьПотокЧтения()
    знч чтение = новый ЧтениеJson(потокЧтения)
    пока чтение.Следующий()
    ;

    потокЧтения.Закрыть()

    знч содержимоеФайла = новый ОписаниеУправляющегоФайла(путьКРабочейОбласти, путьКФайламКонфигурации)

    возврат содержимоеФайла
;

метод ЗаписатьУправляющийФайл(содержимоеФайла: ОписаниеУправляющегоФайла, управляющийФайл: Файл)
    знч потокЗаписи = управляющийФайл.ОткрытьПотокЗаписи()
    знч запись = новый ЗаписьJson(потокЗаписи)

    запись.ЗаписатьНачалоОбъекта()
    запись.Записать("ПутьКРабочейОбласти", содержимоеФайла.путьКРабочейОбласти)
    запись.Записать("ПутьКФайламКонфигурации", содержимоеФайла.путьКФайламКонфигурации)
    запись.ЗаписатьКонецОбъекта()

    потокЗаписи.Закрыть()
;

метод Завершить(управляющийФайл: Файл)
    знч содержимоеФайла = ПрочитатьУправляющийФайл(управляющийФайл)

//    Файлы.Удалить(содержимоеФайла.путьКРабочейОбласти)
//    Файлы.Удалить(содержимоеФайла.путьКФайламКонфигурации)
    Файлы.Удалить(управляющийФайл)
;

метод СкачатьКоммитИзРепозитория()
;

метод СобратьИзИсходниковФайлКонфигурации(путьККонфигурацииЕДТ: Строка, путьКФайлуCF: Строка, версияПлатформы: Строка)
    пер кодВозврата: Число

    знч управляющийФайл = Инициализировать()

    знч содержимоеФайла = ПрочитатьУправляющийФайл(управляющийФайл)

    знч максимальныеПлатформы = МаксимальныеПлатформы()

    знч путьКПлатформе = максимальныеПлатформы.Получить(версияПлатформы)
    если путьКПлатформе == Неопределено
        знч текстОшибки = Строки.Шаблон("Не найдена установленная платформа $0", версияПлатформы)
        выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
    ;

    знч временныйПутьКИБ = Файлы.СоздатьВременныйКаталог("cicd_1cd", Ложь).Путь

    Консоль.Записать("Создание пустой ИБ")
    кодВозврата = E1c_CreateInfobase(путьКПлатформе, временныйПутьКИБ)
    если кодВозврата != 0
    возврат
    ;

    Консоль.Записать("Загрузить Конфигурацию ЕДТ в ИБ")
    кодВозврата = E1c_CreateInfobase(путьКПлатформе, временныйПутьКИБ)
    если кодВозврата != 0
    возврат
    ;

    Завершить(управляющийФайл)
//
//    Консоль.Записать("Начало экспорта")
//    знч кодВозвратаЭкспорта = ring_edt_export(путьККонфигурацииЕДТ, временныйПутьКФайламКонфигурации, временныйПутьКРабочейОбласти)
//
//    если кодВозвратаЭкспорта != 0
//    возврат
//    ;
//
;

метод СобратьИзИсходниковФайлРасширения()
;

метод Ring_EDT_PlatformVersions(версияЕДТ: Строка = ""): Число
    пер параметрыПроцесса = новый Массив()
    параметрыПроцесса.Добавить("/c")
    параметрыПроцесса.Добавить("ring")
    если версияЕДТ.Пусто()
        параметрыПроцесса.Добавить("edt")
    иначе
        параметрыПроцесса.Добавить("edt@" + версияЕДТ)
    ;
    параметрыПроцесса.Добавить("platform-versions")

    возврат ВыполнитьКомандуСистемы("cmd.exe", параметрыПроцесса, Ложь)
;

метод Ring_EDT_Export(путьККонфигурацииЕДТ: Строка, путьККонфигурацииПлатформы: Строка, путьКРабочейОбласти: Строка, версияЕДТ: Строка =
    "")
    пер параметрыПроцесса = новый Массив()
    параметрыПроцесса.Добавить("/c")
    параметрыПроцесса.Добавить("ring")
    параметрыПроцесса.Добавить("-l")
    параметрыПроцесса.Добавить("error")
    если версияЕДТ.Пусто()
        параметрыПроцесса.Добавить("edt")
    иначе
        параметрыПроцесса.Добавить("edt@" + версияЕДТ)
    ;
    параметрыПроцесса.Добавить("workspace")
    параметрыПроцесса.Добавить("export")
    параметрыПроцесса.Добавить("--project")
    параметрыПроцесса.Добавить(путьККонфигурацииЕДТ)
    параметрыПроцесса.Добавить("--configuration-files")
    параметрыПроцесса.Добавить(путьККонфигурацииПлатформы)
    параметрыПроцесса.Добавить("--workspace-location")
    параметрыПроцесса.Добавить(путьКРабочейОбласти)

    ВыполнитьКомандуСистемы("cmd.exe", параметрыПроцесса, Ложь)
;

метод E1c_CreateInfobase(имяФайлаПлатформы: Строка, путьКИБ: Строка): Число
    пер параметрыПроцесса = новый Массив()
    параметрыПроцесса.Добавить("CreateInfobase")
    параметрыПроцесса.Добавить("File=" + путьКИБ)

    возврат ВыполнитьКомандуСистемы(имяФайлаПлатформы, параметрыПроцесса)
;

метод E1c_LoadConfigFromFiles(имяФайлаПлатформы: Строка, путьКИБ: Строка): Число
    пер параметрыПроцесса = новый Массив()
    параметрыПроцесса.Добавить("LoadConfigFromFiles")
    параметрыПроцесса.Добавить("File=" + путьКИБ)

    возврат ВыполнитьКомандуСистемы(имяФайлаПлатформы, параметрыПроцесса)
;

метод МаксимальныеПлатформы(): Соответствие
    знч потокВывода = ВыполнитьСкрипт("../Библиотеки/УстановленныеПлатформы83.sbsl", "МаксимальныеПлатформы", [])
    знч максимальныеПлатформы = ОбъектИзПотокаВывода(потокВывода) как Соответствие

    возврат максимальныеПлатформы
;

метод КодировкаПотокаВывода(): Строка
// СредаИсполнения.ПолучитьСвойство("file.encoding")
    возврат "Cp1251"
;

метод ВыполнитьКомандуСистемы(имяКоманды: Строка, параметры: Массив, выводитьОшибки: Булево = Истина): Число
    если ОТЛАДКА
        Консоль.Записать(имяКоманды + " " + Строки.Соединить(параметры, " "))
    ;

    знч процесс = новый ПроцессОс(имяКоманды, параметры, Ложь)
    процесс.Запустить()
    процесс.ОжидатьЗавершения()

    знч кодВозврата = процесс.ПолучитьКодВозврата()
    если кодВозврата != 0
        Консоль.Записать("Код возврата:" + кодВозврата)
    ;

    пер результатВыполненияСкрипта = процесс.ПолучитьПотокВывода()
    знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакТекст(КодировкаПотокаВывода())
    если не текстРезультата.Пусто()
        Консоль.Записать(текстРезультата)
    ;

    если кодВозврата == 0 или не выводитьОшибки
        возврат 0
    ;

    пер ошибкиВыполненияСкрипта = процесс.ПолучитьПотокОшибок()
    знч текстОшибок = ошибкиВыполненияСкрипта.ПрочитатьКакТекст(КодировкаПотокаВывода())
    если не текстОшибок.Пусто()
        Консоль.Записать("Ошибки при выполнении процесса:")
        Консоль.Записать(текстОшибок)
    ;

    возврат кодВозврата
;

/* 
 * Методы для вызова других скриптов. Необходимо копировать в свой скрипт
 */
метод ВыполнитьСкрипт(имяФайлаСкрипта: Строка, имяКомандыСкрипта: Строка, параметрыСкрипта: Массив): ПотокЧтения
    пер расширениеИсполнителя: Строка
    знч имяОС = СредаИсполнения.ПолучитьСвойство("os.name")
    выбор когда имяОС.НачинаетсяС("windows", Истина)
        расширениеИсполнителя = "cmd"
    иначе
        расширениеИсполнителя = "sh"
    ;
    знч путьКИсполнителю = СредаИсполнения.ПолучитьСвойство("logback.configurationFile").Удалить("config" + Файлы.СимволРазделителя
        + "logback.xml") + "bin/executor_j11." + расширениеИсполнителя

    знч командаТекущегоСкрипта = СредаИсполнения.ПолучитьСвойство("sun.java.command")
    пер имяФайлаТекущегоСкрипта = командаТекущегоСкрипта.Подстрока(0, командаТекущегоСкрипта.Найти(".sbsl") + 5)
    имяФайлаТекущегоСкрипта = имяФайлаТекущегоСкрипта.Подстрока(имяФайлаТекущегоСкрипта.Найти(" ") + 1)
    имяФайлаТекущегоСкрипта = имяФайлаТекущегоСкрипта.Подстрока(имяФайлаТекущегоСкрипта.Найти(" ") + 1)
    знч файлТекущегоСкрипта = новый Файл(имяФайлаТекущегоСкрипта)
    пер путьТекущегоСкрипта = ""
    если файлТекущегоСкрипта.Каталог != Неопределено
        путьТекущегоСкрипта = файлТекущегоСкрипта.Каталог.Путь + Файлы.СимволРазделителя
    ;

    пер аргументыПроцессаОс = ["-s", путьТекущегоСкрипта + имяФайлаСкрипта, "-m", имяКомандыСкрипта]
    если не параметрыСкрипта.Пусто()
        аргументыПроцессаОс.ДобавитьВсе(параметрыСкрипта)
    ;

    знч библиотека = новый ПроцессОс(путьКИсполнителю, аргументыПроцессаОс, Ложь)

    библиотека.Запустить()
    библиотека.ОжидатьЗавершения()

    знч ошибкиВыполненияСкрипта = библиотека.ПолучитьПотокОшибок()
    знч текстОшибок = ошибкиВыполненияСкрипта.ПрочитатьКакТекст(КодировкаПотокаВыводаСкриптов())
    если не текстОшибок.Пусто()
        выбросить новый ИсключениеНедопустимоеСостояние(текстОшибок)
    ;

    возврат библиотека.ПотокВывода
;

метод КодировкаПотокаВыводаСкриптов(): Строка
    возврат СредаИсполнения.ПолучитьСвойство("file.encoding")
;

метод НастройкиПотокаВыводаСкриптов(): НастройкиЧтенияДанных
    пер настройкиПотокаВывода = новый НастройкиЧтенияДанных()
    настройкиПотокаВывода.Кодировка = КодировкаПотокаВыводаСкриптов()

    возврат настройкиПотокаВывода
;

метод ОбъектИзПотокаВывода(потокВывода: ПотокЧтения): Строка|Массив|Соответствие
    пер массивСтрок: Массив

    знч результатВыполненияСкрипта = новый ЧтениеДанных(потокВывода, НастройкиПотокаВыводаСкриптов())
    пока не результатВыполненияСкрипта.ЧтениеЗавершено()
        знч прочитаннаяСтрока = результатВыполненияСкрипта.ПрочитатьСтроку()

        если прочитаннаяСтрока.Пусто()
        продолжить
        ;

        выбор прочитаннаяСтрока[0]
        когда "["
            знч результатМассивом = МассивИзСтроки(прочитаннаяСтрока)
            если результатМассивом.Размер() == 1
                массивСтрок.Добавить(результатМассивом[0])
            иначе
                возврат результатМассивом
        ;
        когда "{"
            возврат СоответствиеИзСтроки(прочитаннаяСтрока)

        иначе
            массивСтрок.Добавить(прочитаннаяСтрока)
        ;
    ;
    возврат массивСтрок
;

метод МассивИзСтроки(строкаПотокаВывода: Строка): Массив
    знч результатСтрокой = строкаПотокаВывода.Подстрока(1, строкаПотокаВывода.Длина() - 1)
    знч результатМассивом = результатСтрокой.Разделить(", ", Ложь)
    возврат результатМассивом
;

метод СоответствиеИзСтроки(строкаПотокаВывода: Строка): Соответствие
    пер результатСоответствием: Соответствие

    знч результатСтрокой = строкаПотокаВывода.Подстрока(1, строкаПотокаВывода.Длина() - 1)

    знч результатМассивом = результатСтрокой.Разделить(", ")
    для строкаРезультата из результатМассивом
        знч ключИЗначение = строкаРезультата.Разделить("=")

        результатСоответствием.Вставить(ключИЗначение[0], ключИЗначение[1])
    ;

    возврат результатСоответствием
;