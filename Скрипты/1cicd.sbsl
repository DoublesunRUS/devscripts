#!/usr/bin/executor

/*******************************************************************************
 * Copyright (c) 2021 Alexander Kapralov and Contributors
 * This program and the accompanying materials are made available under
 * the terms of the BSD 3-Clause License which is available at
 * https://spdx.org/licenses/BSD-3-Clause.html#licenseText
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Contributors:
 *    
 *
 ******************************************************************************/

конст ВЕРСИЯ_EDT = "2021.2.4"

конст ИМЯ_КАТАЛОГА_ПРИКЛАДНОЙ_СБОРКИ = "build/bin"
конст ИМЯ_КАТАЛОГА_ТЕСТОВОЙ_СБОРКИ = "build/util"
конст ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ = "ci"
конст ИМЯ_КАТАЛОГА_РЕЗУЛЬТАТОВ_ТЕСТОВ = "test"

конст КОМАНДЫ_ОБНОВЛЕНИЯ_БД = "ВыполнитьОбновлениеИЗавершитьРаботу;РегламентныеЗаданияОтключены"


метод Скрипт(режим: Строка)
	выбор режим
	когда "buildMaster"
		СобратьРелизДляАнализа()
		
	когда "buildMergeRequest"
		СобратьРелизДляСлияния()
		
	когда "buildRelease"
		знч CUSTOM_RELEASE_DATE = СредаИсполнения.ПолучитьПеременную("CUSTOM_RELEASE_DATE")
		если CUSTOM_RELEASE_DATE.Пусто()
			СобратьРелизДляВыпуска()
		иначе
			СобратьРелизДляВыпуска() // Доработать на СобратьРелизНаДату()
		;
		
	когда "testCore"
		ПротестироватьКод()
		
	когда "testUI"
		ПротестироватьИнтерфейс()
		
	когда "qualityCode"
		ОпубликоватьQualityCode()
		
	когда "sonarQube"
		ОпубликоватьSonarQube()
		
	когда "pages"
		ОпубликоватьAllureОтчет()
		
	когда "release"
		ОпубликоватьРелиз()
		
	иначе
		выбросить новый ИсключениеНедопустимыйАргумент("Неизвестный режим %режим")
		
	;
;

метод СобратьРелизДляВыпуска()
	знч CI_COMMIT_BRANCH = СредаИсполнения.ПолучитьПеременную("CI_COMMIT_BRANCH")
	знч CI_JOB_ID = СредаИсполнения.ПолучитьПеременную("CI_JOB_ID")
	знч CI_JOB_TOKEN = СредаИсполнения.ПолучитьПеременную("CI_JOB_TOKEN")
	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")
	знч CI_PROJECT_ID = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_ID")
	знч CI_PROJECT_PATH = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_PATH")
	знч CI_PROJECT_NAMESPACE = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_NAMESPACE")
	знч CI_SERVER_HOST = СредаИсполнения.ПолучитьПеременную("CI_SERVER_HOST")

	знч RELEASES_TOKEN = СредаИсполнения.ПолучитьПеременную("RELEASES_TOKEN")

	пер ошибкиТокенов = ""
	если RELEASES_TOKEN.Пусто()
		ошибкиТокенов += "В переменную RELEASES_TOKEN необходимо поместить api token репозитория Релизов." + Символы.НоваяСтрока
	;

	знч настройки = ПрочитатьНастройкиСборки("%CI_PROJECT_DIR")

	если СредаИсполнения.ПолучитьПеременную(настройки.Конфигурация.ПеременнаяТокена).Пусто()
		ошибкиТокенов += "В переменную %{настройки.Конфигурация
		.ПеременнаяТокена} необходимо поместить read api token репозитория %{настройки.Конфигурация.Имя}." + Символы.НоваяСтрока
	;
	для репозиторийРасширения из настройки.ПрикладныеРасширения
		если СредаИсполнения.ПолучитьПеременную(репозиторийРасширения.ПеременнаяТокена).Пусто()
			ошибкиТокенов += "В переменную %{репозиторийРасширения
				.ПеременнаяТокена} необходимо поместить read api token репозитория %{репозиторийРасширения.Имя}."
				+ Символы.НоваяСтрока
		;
	;
	для репозиторийРасширения из настройки.ТестовыеРасширения
		если СредаИсполнения.ПолучитьПеременную(репозиторийРасширения.ПеременнаяТокена).Пусто()
			ошибкиТокенов += "В переменную %{репозиторийРасширения
				.ПеременнаяТокена} необходимо поместить read api token репозитория %{репозиторийРасширения.Имя}."
				+ Символы.НоваяСтрока
		;
	;

	если не ошибкиТокенов.Пусто()
		выбросить новый ИсключениеНедопустимоеСостояние(ошибкиТокенов)
	;

	знч полныйПутьПрикладнойСборки = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_ПРИКЛАДНОЙ_СБОРКИ"
	знч полныйПутьТестовойСборки = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_ТЕСТОВОЙ_СБОРКИ"

	Консоль.Записать("Создать каталог: %полныйПутьПрикладнойСборки")
	Файлы.СоздатьКаталог(полныйПутьПрикладнойСборки)

	Консоль.Записать("Создать каталог: %полныйПутьТестовойСборки")
	Файлы.СоздатьКаталог(полныйПутьТестовойСборки)

	знч полныйПутьСлужебнойСборки = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ"
	Консоль.Записать("Создать каталог: %полныйПутьСлужебнойСборки")
	Файлы.СоздатьКаталог(полныйПутьСлужебнойСборки)

	знч адресРепозиторияКонфигурации = "https://gitlab-ci-token:%CI_JOB_TOKEN@%CI_SERVER_HOST/%CI_PROJECT_NAMESPACE/%{настройки
		.Конфигурация
	.Имя}.git"
	Консоль.Записать("Git_Clone: %адресРепозиторияКонфигурации %CI_COMMIT_BRANCH")
	Git_Clone(адресРепозиторияКонфигурации, CI_COMMIT_BRANCH)

	знч путьКонфигурацииЕДТ = "%CI_PROJECT_DIR/%{настройки.Конфигурация.Имя}/%{настройки.Конфигурация.Проект}"
	Консоль.Записать("ИсполняемыйФайлПлатформы: %путьКонфигурацииЕДТ")
	знч исполняемыйФайлПлатформы = ИсполняемыйФайлПлатформы(путьКонфигурацииЕДТ)

	знч строкаСоединения = СтрокаСоединенияДляФайловойИБ("%CI_PROJECT_DIR/temp/db")
	Консоль.Записать("CreateInfobase: %строкаСоединения %исполняемыйФайлПлатформы")
	CreateInfobase(строкаСоединения, исполняемыйФайлПлатформы)

	Консоль.Записать("Releases_LastDate: %CI_PROJECT_ID %CI_SERVER_HOST")
	знч датаПоследнегоРелиза = Releases_LastDate(CI_PROJECT_ID, RELEASES_TOKEN, CI_SERVER_HOST)
	Консоль.Записать("Дата последнего релиза = %датаПоследнегоРелиза")

	пер пересобиратьОсновнуюКонфигурацию = Ложь
	пер репозиторииДляПересборки = новый Массив()
	пер путиСборки = новый Соответствие()

	пер датаНовогоРелиза = датаПоследнегоРелиза

	знч результатПроверки = ПроверитьКоммитыРепозиторияДляПоследнегоРелиза(настройки.Конфигурация, датаПоследнегоРелиза)
	если результатПроверки != Неопределено
		пересобиратьОсновнуюКонфигурацию = Истина

		если результатПроверки > датаНовогоРелиза
			датаНовогоРелиза = результатПроверки
			Консоль.Записать("Новой датой релиза становится %датаНовогоРелиза")
		;
		
	иначе
		если не СкачатьАртефактРепозитория(настройки.Конфигурация, ИМЯ_КАТАЛОГА_ПРИКЛАДНОЙ_СБОРКИ, Ложь)
			пересобиратьОсновнуюКонфигурацию = Истина
		;
	;

	для репозиторийРасширения из настройки.ПрикладныеРасширения
		путиСборки.Вставить(репозиторийРасширения.Имя, полныйПутьПрикладнойСборки)

		знч результатПроверкиРасширения = ПроверитьКоммитыРепозиторияДляПоследнегоРелиза(репозиторийРасширения, датаПоследнегоРелиза)
		если результатПроверкиРасширения != Неопределено
			репозиторииДляПересборки.Добавить(репозиторийРасширения)

			если результатПроверкиРасширения > датаНовогоРелиза
				датаНовогоРелиза = результатПроверкиРасширения
				Консоль.Записать("Новой датой релиза становится %датаНовогоРелиза")
		;
		иначе
			если не СкачатьАртефактРепозитория(репозиторийРасширения, ИМЯ_КАТАЛОГА_ПРИКЛАДНОЙ_СБОРКИ, Истина)
				репозиторииДляПересборки.Добавить(репозиторийРасширения)
			;
		;
	;

	для репозиторийРасширения из настройки.ТестовыеРасширения
		путиСборки.Вставить(репозиторийРасширения.Имя, полныйПутьТестовойСборки)

		знч результатПроверкиРасширения = ПроверитьКоммитыРепозиторияДляПоследнегоРелиза(репозиторийРасширения, датаПоследнегоРелиза)
		если результатПроверкиРасширения != Неопределено
			репозиторииДляПересборки.Добавить(репозиторийРасширения)

			если результатПроверкиРасширения > датаНовогоРелиза
				датаНовогоРелиза = результатПроверкиРасширения
				Консоль.Записать("Новой датой релиза становится %датаНовогоРелиза")
		;
		иначе
			если не СкачатьАртефактРепозитория(репозиторийРасширения, ИМЯ_КАТАЛОГА_ТЕСТОВОЙ_СБОРКИ, Истина)
				репозиторииДляПересборки.Добавить(репозиторийРасширения)
			;
		;
	;

	если не пересобиратьОсновнуюКонфигурацию и репозиторииДляПересборки.Пусто()
		Консоль.Записать("Jobs_Cancel: %CI_JOB_ID %CI_PROJECT_ID %CI_SERVER_HOST")
		Jobs_Cancel(CI_JOB_ID, CI_PROJECT_ID, RELEASES_TOKEN, CI_SERVER_HOST)
	возврат
	;

	для репозиторий из репозиторииДляПересборки
		знч адресРепозитория = "https://gitlab-ci-token:%CI_JOB_TOKEN@%CI_SERVER_HOST/%CI_PROJECT_NAMESPACE/%{репозиторий
			.Имя}.git"
		Консоль.Записать("Git_Clone: %адресРепозитория %CI_COMMIT_BRANCH")
		Git_Clone(адресРепозитория, CI_COMMIT_BRANCH)
	;
	
	Консоль.Записать("Дата нового релиза = %датаНовогоРелиза")
	пер файлДатаНовогоРелиза = Файлы.Создать("%ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ/new_release_date.txt")
	исп потокЗаписиДатаНовогоРелиза = файлДатаНовогоРелиза.ОткрытьПотокЗаписи()
	потокЗаписиДатаНовогоРелиза.Записать(датаНовогоРелиза.Форматировать("гггг-ММ-дд'T'ЧЧ:мм:сс"))

	знч WP = "%CI_PROJECT_DIR/temp/wp"

	знч файлКонфигурации = "%полныйПутьПрикладнойСборки/1cv8.cf"
	если пересобиратьОсновнуюКонфигурацию
		знч путьКонфигурацииПлатформы = "%CI_PROJECT_DIR/temp/src_%{настройки.Конфигурация.Имя}"
		Консоль.Записать("WorkspaceExport: %путьКонфигурацииЕДТ %путьКонфигурацииПлатформы %WP")
		знч безОшибок = WorkspaceExport(путьКонфигурацииЕДТ, путьКонфигурацииПлатформы, WP, Ложь, ВЕРСИЯ_EDT)
		если не безОшибок
			Консоль.Записать("Удалить каталог workspace: %WP")
			Файлы.Удалить(WP)
			Консоль.Записать("WorkspaceExport: %путьКонфигурацииЕДТ %путьКонфигурацииПлатформы %WP")
			WorkspaceExport(путьКонфигурацииЕДТ, путьКонфигурацииПлатформы, WP, Истина, ВЕРСИЯ_EDT)
		;

		попытка
			знч файлПоставки = "%путьКонфигурацииПлатформы/Ext/ParentConfigurations.bin"
			Консоль.Записать("Удалить файл: %файлПоставки")
			Файлы.Удалить(файлПоставки)
		поймать исключение: любой
			Консоль.Записать("Было исключение %исключение")
		;
		попытка
			знч каталогПоставки = "%путьКонфигурацииПлатформы/Ext/ParentConfigurations"
			Консоль.Записать("Удалить каталог: %каталогПоставки")
			Файлы.Удалить(каталогПоставки)
		поймать исключение: любой
			Консоль.Записать("Было исключение %исключение")
		;

		Консоль.Записать("LoadConfigFromFiles: %путьКонфигурацииПлатформы %строкаСоединения %исполняемыйФайлПлатформы")
		LoadConfigFromFiles(путьКонфигурацииПлатформы, строкаСоединения, исполняемыйФайлПлатформы)

		Консоль.Записать("UpdateDBCfg: %строкаСоединения %исполняемыйФайлПлатформы")
		UpdateDBCfg(строкаСоединения, исполняемыйФайлПлатформы)

		Консоль.Записать("CreateDistributionFiles: %файлКонфигурации %строкаСоединения %исполняемыйФайлПлатформы")
		CreateDistributionFiles(файлКонфигурации, строкаСоединения, исполняемыйФайлПлатформы)
	иначе
		Консоль.Записать("LoadCfg: %файлКонфигурации %строкаСоединения %исполняемыйФайлПлатформы")
		LoadCfg(файлКонфигурации, строкаСоединения, исполняемыйФайлПлатформы)

		Консоль.Записать("UpdateDBCfg: %строкаСоединения %исполняемыйФайлПлатформы")
		UpdateDBCfg(строкаСоединения, исполняемыйФайлПлатформы)
	;

	для репозиторий из репозиторииДляПересборки
		пер путьРасширенияЕДТ = "%CI_PROJECT_DIR/%{репозиторий.Имя}/%{репозиторий.Проект}"
		знч путьРасширенияПлатформы = "%CI_PROJECT_DIR/temp/src_%{репозиторий.Имя}"
		Консоль.Записать("WorkspaceExport: %путьРасширенияЕДТ %путьРасширенияПлатформы %WP")
		WorkspaceExport(путьРасширенияЕДТ, путьРасширенияПлатформы, WP, Истина, ВЕРСИЯ_EDT)

		Консоль.Записать("LoadExtFromFiles: %путьРасширенияПлатформы %{репозиторий.Проект} %{строкаСоединения} %исполняемыйФайлПлатформы")
		LoadExtFromFiles(путьРасширенияПлатформы, репозиторий.Проект, строкаСоединения, исполняемыйФайлПлатформы)

		Консоль.Записать("UpdateDBExt: %строкаСоединения %исполняемыйФайлПлатформы")
		UpdateDBExt(репозиторий.Проект, строкаСоединения, исполняемыйФайлПлатформы)

		знч путьСборкиРасширения = путиСборки.Получить(репозиторий.Имя)
		знч файлРасширения = "%путьСборкиРасширения/%{репозиторий.Проект}.cfe"
		Консоль.Записать("DumpDBExt: %файлРасширения %{репозиторий.Проект} %строкаСоединения %исполняемыйФайлПлатформы")
		DumpExt(файлРасширения, репозиторий.Проект, строкаСоединения, исполняемыйФайлПлатформы)
	;

	пер списокФайловСсылок = новый Массив()
	знч каталогСборкиПроекта = новый Файл(CI_PROJECT_DIR)
	для файл из Файлы.Найти(ИМЯ_КАТАЛОГА_ПРИКЛАДНОЙ_СБОРКИ)
		знч путьВнутриСборки = файл.Путь.Удалить(каталогСборкиПроекта.Путь)
		списокФайловСсылок.Добавить(новый ОписаниеФайлаСсылкиАссетов(файл.Имя, путьВнутриСборки))
	;
	знч имяФайлаАссетов = "%ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ/assets_bin.json"
	Консоль.Записать("ЗаписатьОписаниеАссетов: %имяФайлаАссетов %CI_PROJECT_PATH %CI_JOB_ID")
	ЗаписатьОписаниеАссетов(имяФайлаАссетов, CI_PROJECT_PATH, CI_JOB_ID, списокФайловСсылок, "")

	знч логФайлыРабочейОбласти = "%WP/.metadata/"
	пер настройкиПоиска = новый НастройкиПоискаФайлов()
	настройкиПоиска.ИмяСодержит(".log")
	для файл из Файлы.Найти(логФайлыРабочейОбласти, настройкиПоиска)
		Консоль.Записать("Удалить файл: %{файл.Путь}")
		Файлы.Удалить(файл)
	;
;

метод СобратьРелизДляАнализа()
	знч CI_COMMIT_BRANCH = СредаИсполнения.ПолучитьПеременную("CI_COMMIT_BRANCH")
	знч CI_COMMIT_TIMESTAMP = СредаИсполнения.ПолучитьПеременную("CI_COMMIT_TIMESTAMP")
	знч CI_JOB_ID = СредаИсполнения.ПолучитьПеременную("CI_JOB_ID")
	знч CI_JOB_TOKEN = СредаИсполнения.ПолучитьПеременную("CI_JOB_TOKEN")
	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")
	знч CI_PROJECT_ID = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_ID")
	знч CI_PROJECT_NAME = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_NAME")
	знч CI_PROJECT_PATH = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_PATH")
	знч CI_PROJECT_NAMESPACE = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_NAMESPACE")
	знч CI_SERVER_HOST = СредаИсполнения.ПолучитьПеременную("CI_SERVER_HOST")

	пер ошибкиТокенов = ""

	знч настройкиСборки = ПрочитатьНастройкиСборки("%CI_PROJECT_DIR")

	если СредаИсполнения.ПолучитьПеременную(настройкиСборки.Конфигурация.ПеременнаяТокена).Пусто()
		ошибкиТокенов += "В переменную %{настройкиСборки.Конфигурация
		.ПеременнаяТокена} необходимо поместить read api token репозитория %{настройкиСборки.Конфигурация.Имя}." + Символы.НоваяСтрока
	;
	для репозиторийРасширения из настройкиСборки.ПрикладныеРасширения
		если СредаИсполнения.ПолучитьПеременную(репозиторийРасширения.ПеременнаяТокена).Пусто()
			ошибкиТокенов += "В переменную %{репозиторийРасширения
				.ПеременнаяТокена} необходимо поместить read api token репозитория %{репозиторийРасширения.Имя}."
				+ Символы.НоваяСтрока
		;
	;
	для репозиторийРасширения из настройкиСборки.ТестовыеРасширения
		если СредаИсполнения.ПолучитьПеременную(репозиторийРасширения.ПеременнаяТокена).Пусто()
			ошибкиТокенов += "В переменную %{репозиторийРасширения
				.ПеременнаяТокена} необходимо поместить read api token репозитория %{репозиторийРасширения.Имя}."
				+ Символы.НоваяСтрока
		;
	;

	если не ошибкиТокенов.Пусто()
		выбросить новый ИсключениеНедопустимоеСостояние(ошибкиТокенов)
	;

	знч имяТекущегоПроекта = CI_PROJECT_PATH.Заменить("%CI_PROJECT_NAMESPACE/", "")
	пер токен = ""
	если настройкиСборки.Конфигурация.Имя == имяТекущегоПроекта
		токен = СредаИсполнения.ПолучитьПеременную(настройкиСборки.Конфигурация.ПеременнаяТокена)
		
	иначе
		для репозиторийРасширения из настройкиСборки.ПрикладныеРасширения
			если репозиторийРасширения.Имя == имяТекущегоПроекта
				токен = СредаИсполнения.ПолучитьПеременную(репозиторийРасширения.ПеременнаяТокена)
			;
		;
		
	;

	если токен.Пусто()
		Консоль.Записать("Jobs_Cancel: %CI_JOB_ID %CI_PROJECT_ID %CI_SERVER_HOST")
		Jobs_Cancel(CI_JOB_ID, CI_PROJECT_ID, CI_JOB_TOKEN, CI_SERVER_HOST)
		возврат
	;

	знч полныйПутьПрикладнойСборки = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_ПРИКЛАДНОЙ_СБОРКИ"
	знч полныйПутьТестовойСборки = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_ТЕСТОВОЙ_СБОРКИ"

	Консоль.Записать("Создать каталог: %полныйПутьПрикладнойСборки")
	Файлы.СоздатьКаталог(полныйПутьПрикладнойСборки)

	Консоль.Записать("Создать каталог: %полныйПутьТестовойСборки")
	Файлы.СоздатьКаталог(полныйПутьТестовойСборки)

	знч полныйПутьСлужебнойСборки = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ"
	Консоль.Записать("Создать каталог: %полныйПутьСлужебнойСборки")
	Файлы.СоздатьКаталог(полныйПутьСлужебнойСборки)

	знч путьКонфигурацииЕДТ = "%CI_PROJECT_DIR/%{настройкиСборки.Конфигурация.Имя}/%{настройкиСборки.Конфигурация.Проект}"

	если настройкиСборки.Конфигурация.Имя == имяТекущегоПроекта
		Файлы.СоздатьКаталог(путьКонфигурацииЕДТ)
		Файлы.Переместить("%CI_PROJECT_DIR/%{настройкиСборки.Конфигурация.Проект}", путьКонфигурацииЕДТ)
	иначе
		знч адресРепозиторияКонфигурации = "https://gitlab-ci-token:%CI_JOB_TOKEN@%CI_SERVER_HOST/%CI_PROJECT_NAMESPACE/%{настройкиСборки
			.Конфигурация
		.Имя}.git"
		Консоль.Записать("Git_Clone: %адресРепозиторияКонфигурации %CI_COMMIT_BRANCH")
		Git_Clone(адресРепозиторияКонфигурации, CI_COMMIT_BRANCH)
	;

	Консоль.Записать("ИсполняемыйФайлПлатформы: %путьКонфигурацииЕДТ")
	знч исполняемыйФайлПлатформы = ИсполняемыйФайлПлатформы(путьКонфигурацииЕДТ)

	знч строкаСоединения = СтрокаСоединенияДляФайловойИБ("%CI_PROJECT_DIR/temp/db")
	Консоль.Записать("CreateInfobase: %строкаСоединения %исполняемыйФайлПлатформы")
	CreateInfobase(строкаСоединения, исполняемыйФайлПлатформы)

	знч датаТекущегоКоммита = новый ДатаВремя(CI_COMMIT_TIMESTAMP.ПодстрокаСНачала(19))
	знч имяПроекта = "%CI_PROJECT_NAMESPACE/%CI_PROJECT_NAME".Заменить("/", "\%2F")
	знч датаПредыдущегоКоммита = Commits_LastDate_Until(CI_COMMIT_BRANCH, имяПроекта, токен, CI_SERVER_HOST, датаТекущегоКоммита)
	Консоль.Записать("Дата предыдущего коммита = %датаПредыдущегоКоммита")

	пер пересобиратьОсновнуюКонфигурацию = Ложь
	пер репозиторииДляПересборки = новый Массив()
	пер путиСборки = новый Соответствие()

	если настройкиСборки.Конфигурация.Имя == имяТекущегоПроекта
		пересобиратьОсновнуюКонфигурацию = Истина
	иначе
		знч результатПроверки = ПроверитьКоммитыРепозиторияДляПоследнегоРелиза(настройкиСборки.Конфигурация, датаПредыдущегоКоммита)
		если результатПроверки != Неопределено
			пересобиратьОсновнуюКонфигурацию = Истина
	
		иначе
			если не СкачатьАртефактРепозитория(настройкиСборки.Конфигурация, ИМЯ_КАТАЛОГА_ПРИКЛАДНОЙ_СБОРКИ, Ложь)
				пересобиратьОсновнуюКонфигурацию = Истина
			;
		;
	;
	
	для репозиторийРасширения из настройкиСборки.ПрикладныеРасширения
		путиСборки.Вставить(репозиторийРасширения.Имя, полныйПутьПрикладнойСборки)

		если репозиторийРасширения.Имя == имяТекущегоПроекта
			репозиторииДляПересборки.Добавить(репозиторийРасширения)
		иначе
			знч результатПроверкиРасширения = ПроверитьКоммитыРепозиторияДляПоследнегоРелиза(репозиторийРасширения, датаПредыдущегоКоммита)
			если результатПроверкиРасширения != Неопределено
				репозиторииДляПересборки.Добавить(репозиторийРасширения)
	
			иначе
				если не СкачатьАртефактРепозитория(репозиторийРасширения, ИМЯ_КАТАЛОГА_ПРИКЛАДНОЙ_СБОРКИ, Истина)
					репозиторииДляПересборки.Добавить(репозиторийРасширения)
				;
			;
	
			если настройкиСборки.Конфигурация.Имя == имяТекущегоПроекта
				пересобиратьОсновнуюКонфигурацию = Истина
			;
		;
	;

	для репозиторийРасширения из настройкиСборки.ТестовыеРасширения
		путиСборки.Вставить(репозиторийРасширения.Имя, полныйПутьТестовойСборки)

		если репозиторийРасширения.Имя == имяТекущегоПроекта
			репозиторииДляПересборки.Добавить(репозиторийРасширения)
		иначе
			знч результатПроверкиРасширения = ПроверитьКоммитыРепозиторияДляПоследнегоРелиза(репозиторийРасширения, датаПредыдущегоКоммита)
			если результатПроверкиРасширения != Неопределено
				репозиторииДляПересборки.Добавить(репозиторийРасширения)
	
			иначе
				если не СкачатьАртефактРепозитория(репозиторийРасширения, ИМЯ_КАТАЛОГА_ТЕСТОВОЙ_СБОРКИ, Истина)
					репозиторииДляПересборки.Добавить(репозиторийРасширения)
				;
			;
		;
	;

	для репозиторий из репозиторииДляПересборки
		пер путьРасширенияЕДТ = "%CI_PROJECT_DIR/%{репозиторий.Имя}/%{репозиторий.Проект}"

		если репозиторий.Имя == имяТекущегоПроекта
			Файлы.СоздатьКаталог(путьРасширенияЕДТ)
			Файлы.Переместить("%CI_PROJECT_DIR/%{репозиторий.Проект}", путьРасширенияЕДТ)
		иначе
			знч адресРепозитория = "https://gitlab-ci-token:%CI_JOB_TOKEN@%CI_SERVER_HOST/%CI_PROJECT_NAMESPACE/%{репозиторий
				.Имя}.git"
			Консоль.Записать("Git_Clone: %адресРепозитория %CI_COMMIT_BRANCH")
			Git_Clone(адресРепозитория, CI_COMMIT_BRANCH)
		;
	;
	
	знч WP = "%CI_PROJECT_DIR/temp/wp"

	знч файлКонфигурации = "%полныйПутьПрикладнойСборки/1cv8.cf"
	если пересобиратьОсновнуюКонфигурацию
		знч путьКонфигурацииПлатформы = "%CI_PROJECT_DIR/temp/src_%{настройкиСборки.Конфигурация.Имя}"
		Консоль.Записать("WorkspaceExport: %путьКонфигурацииЕДТ %путьКонфигурацииПлатформы %WP")
		WorkspaceExport(путьКонфигурацииЕДТ, путьКонфигурацииПлатформы, WP, Истина, ВЕРСИЯ_EDT)

		попытка
			знч файлПоставки = "%путьКонфигурацииПлатформы/Ext/ParentConfigurations.bin"
			Консоль.Записать("Удалить файл: %файлПоставки")
			Файлы.Удалить(файлПоставки)
		поймать исключение: любой
			Консоль.Записать("Было исключение %исключение")
		;
		попытка
			знч каталогПоставки = "%путьКонфигурацииПлатформы/Ext/ParentConfigurations"
			Консоль.Записать("Удалить каталог: %каталогПоставки")
			Файлы.Удалить(каталогПоставки)
		поймать исключение: любой
			Консоль.Записать("Было исключение %исключение")
		;

		Консоль.Записать("LoadConfigFromFiles: %путьКонфигурацииПлатформы %строкаСоединения %исполняемыйФайлПлатформы")
		LoadConfigFromFiles(путьКонфигурацииПлатформы, строкаСоединения, исполняемыйФайлПлатформы)

		Консоль.Записать("UpdateDBCfg: %строкаСоединения %исполняемыйФайлПлатформы")
		UpdateDBCfg(строкаСоединения, исполняемыйФайлПлатформы)

		Консоль.Записать("CreateDistributionFiles: %файлКонфигурации %строкаСоединения %исполняемыйФайлПлатформы")
		CreateDistributionFiles(файлКонфигурации, строкаСоединения, исполняемыйФайлПлатформы)
	иначе
		Консоль.Записать("LoadCfg: %файлКонфигурации %строкаСоединения %исполняемыйФайлПлатформы")
		LoadCfg(файлКонфигурации, строкаСоединения, исполняемыйФайлПлатформы)

		Консоль.Записать("UpdateDBCfg: %строкаСоединения %исполняемыйФайлПлатформы")
		UpdateDBCfg(строкаСоединения, исполняемыйФайлПлатформы)
	;

	для репозиторий из репозиторииДляПересборки
		пер путьРасширенияЕДТ = "%CI_PROJECT_DIR/%{репозиторий.Имя}/%{репозиторий.Проект}"

		знч путьРасширенияПлатформы = "%CI_PROJECT_DIR/temp/src_%{репозиторий.Имя}"
		Консоль.Записать("WorkspaceExport: %путьРасширенияЕДТ %путьРасширенияПлатформы %WP")
		WorkspaceExport(путьРасширенияЕДТ, путьРасширенияПлатформы, WP, Истина, ВЕРСИЯ_EDT)

		Консоль.Записать("LoadExtFromFiles: %путьРасширенияПлатформы %{репозиторий.Проект} %строкаСоединения %исполняемыйФайлПлатформы")
		LoadExtFromFiles(путьРасширенияПлатформы, репозиторий.Проект, строкаСоединения, исполняемыйФайлПлатформы)

		Консоль.Записать("UpdateDBExt: %строкаСоединения %исполняемыйФайлПлатформы")
		UpdateDBExt(репозиторий.Проект, строкаСоединения, исполняемыйФайлПлатформы)

		знч путьСборкиРасширения = путиСборки.Получить(репозиторий.Имя)
		знч файлРасширения = "%путьСборкиРасширения/%{репозиторий.Проект}.cfe"
		Консоль.Записать("DumpDBExt: %файлРасширения %{репозиторий.Проект} %строкаСоединения %исполняемыйФайлПлатформы")
		DumpExt(файлРасширения, репозиторий.Проект, строкаСоединения, исполняемыйФайлПлатформы)
	;

	знч логФайлыРабочейОбласти = "%WP/.metadata/"
	пер настройкиПоиска = новый НастройкиПоискаФайлов()
	настройкиПоиска.ИмяСодержит(".log")
	для файл из Файлы.Найти(логФайлыРабочейОбласти, настройкиПоиска)
		Консоль.Записать("Удалить файл: %{файл.Путь}")
		Файлы.Удалить(файл)
	;
;

метод СобратьРелизДляСлияния()
	знч CI_JOB_ID = СредаИсполнения.ПолучитьПеременную("CI_JOB_ID")
	знч CI_JOB_TOKEN = СредаИсполнения.ПолучитьПеременную("CI_JOB_TOKEN")
	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")
	знч CI_PROJECT_ID = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_ID")
	знч CI_PROJECT_PATH = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_PATH")
	знч CI_PROJECT_NAMESPACE = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_NAMESPACE")
	знч CI_SERVER_HOST = СредаИсполнения.ПолучитьПеременную("CI_SERVER_HOST")

	знч RELEASES_TOKEN = СредаИсполнения.ПолучитьПеременную("RELEASES_TOKEN")

	пер ошибкиТокенов = ""
	если RELEASES_TOKEN.Пусто()
		ошибкиТокенов += "В переменную RELEASES_TOKEN необходимо поместить api token репозитория Релизов." + Символы.НоваяСтрока
	;

	знч настройкиСборки = ПрочитатьНастройкиСборки("%CI_PROJECT_DIR")

	если СредаИсполнения.ПолучитьПеременную(настройкиСборки.Конфигурация.ПеременнаяТокена).Пусто()
		ошибкиТокенов += "В переменную %{настройкиСборки.Конфигурация
		.ПеременнаяТокена} необходимо поместить read api token репозитория %{настройкиСборки.Конфигурация.Имя}." + Символы.НоваяСтрока
	;
	для репозиторийРасширения из настройкиСборки.ПрикладныеРасширения
		если СредаИсполнения.ПолучитьПеременную(репозиторийРасширения.ПеременнаяТокена).Пусто()
			ошибкиТокенов += "В переменную %{репозиторийРасширения
				.ПеременнаяТокена} необходимо поместить read api token репозитория %{репозиторийРасширения.Имя}."
				+ Символы.НоваяСтрока
		;
	;
	для репозиторийРасширения из настройкиСборки.ТестовыеРасширения
		если СредаИсполнения.ПолучитьПеременную(репозиторийРасширения.ПеременнаяТокена).Пусто()
			ошибкиТокенов += "В переменную %{репозиторийРасширения
				.ПеременнаяТокена} необходимо поместить read api token репозитория %{репозиторийРасширения.Имя}."
				+ Символы.НоваяСтрока
		;
	;

	если не ошибкиТокенов.Пусто()
		выбросить новый ИсключениеНедопустимоеСостояние(ошибкиТокенов)
	;

	знч запросНаСлияние = ПараметрыЗапросаНаСлияние()

	знч полныйПутьПрикладнойСборки = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_ПРИКЛАДНОЙ_СБОРКИ"
	знч полныйПутьТестовойСборки = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_ТЕСТОВОЙ_СБОРКИ"

	Консоль.Записать("Создать каталог: %полныйПутьПрикладнойСборки")
	Файлы.СоздатьКаталог(полныйПутьПрикладнойСборки)

	Консоль.Записать("Создать каталог: %полныйПутьТестовойСборки")
	Файлы.СоздатьКаталог(полныйПутьТестовойСборки)

	знч полныйПутьСлужебнойСборки = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ"
	Консоль.Записать("Создать каталог: %полныйПутьСлужебнойСборки")
	Файлы.СоздатьКаталог(полныйПутьСлужебнойСборки)

	знч путьКонфигурацииЕДТ = "%CI_PROJECT_DIR/%{настройкиСборки.Конфигурация.Имя}/%{настройкиСборки.Конфигурация.Проект}"

	знч имяТекущегоПроекта = CI_PROJECT_PATH.Заменить("%CI_PROJECT_NAMESPACE/", "")
	если настройкиСборки.Конфигурация.Имя == имяТекущегоПроекта
		Файлы.СоздатьКаталог(путьКонфигурацииЕДТ)
		Файлы.Переместить("%CI_PROJECT_DIR/%{настройкиСборки.Конфигурация.Проект}", путьКонфигурацииЕДТ)
	иначе
		знч адресРепозиторияКонфигурации = "https://gitlab-ci-token:%CI_JOB_TOKEN@%CI_SERVER_HOST/%CI_PROJECT_NAMESPACE/%{настройкиСборки
			.Конфигурация
		.Имя}.git"
		Консоль.Записать("Git_Clone: %адресРепозиторияКонфигурации %{запросНаСлияние.веткаПроекта}")
		Git_Clone(адресРепозиторияКонфигурации, запросНаСлияние.веткаПроекта)
	;

	Консоль.Записать("ИсполняемыйФайлПлатформы: %путьКонфигурацииЕДТ")
	знч исполняемыйФайлПлатформы = ИсполняемыйФайлПлатформы(путьКонфигурацииЕДТ)

	знч строкаСоединения = СтрокаСоединенияДляФайловойИБ("%CI_PROJECT_DIR/temp/db")
	Консоль.Записать("CreateInfobase: %строкаСоединения %исполняемыйФайлПлатформы")
	CreateInfobase(строкаСоединения, исполняемыйФайлПлатформы)

	знч имяРепозиторияРелизов = "%CI_PROJECT_NAMESPACE\%2Freleases"
	Консоль.Записать("Releases_LastDate: %имяРепозиторияРелизов %CI_SERVER_HOST")
	знч датаПоследнегоРелиза = Releases_LastDate(имяРепозиторияРелизов, RELEASES_TOKEN, CI_SERVER_HOST)
	Консоль.Записать("Дата последнего релиза = %датаПоследнегоРелиза")

	пер пересобиратьОсновнуюКонфигурацию = Ложь
	пер репозиторииДляПересборки = новый Массив()
	пер путиСборки = новый Соответствие()

	если настройкиСборки.Конфигурация.Имя == запросНаСлияние.имяПроекта
		пересобиратьОсновнуюКонфигурацию = Истина
	иначе
		знч результатПроверки = ПроверитьКоммитыРепозиторияДляПоследнегоРелиза(настройкиСборки.Конфигурация, датаПоследнегоРелиза)
		если результатПроверки != Неопределено
			пересобиратьОсновнуюКонфигурацию = Истина
	
		иначе
			если не СкачатьАртефактРепозитория(настройкиСборки.Конфигурация, ИМЯ_КАТАЛОГА_ПРИКЛАДНОЙ_СБОРКИ, Ложь)
				пересобиратьОсновнуюКонфигурацию = Истина
			;
		;
	;
	
	для репозиторийРасширения из настройкиСборки.ПрикладныеРасширения
		путиСборки.Вставить(репозиторийРасширения.Имя, полныйПутьПрикладнойСборки)

		если репозиторийРасширения.Имя == запросНаСлияние.имяПроекта
			репозиторииДляПересборки.Добавить(репозиторийРасширения)
		иначе
			знч результатПроверкиРасширения = ПроверитьКоммитыРепозиторияДляПоследнегоРелиза(репозиторийРасширения, датаПоследнегоРелиза)
			если результатПроверкиРасширения != Неопределено
				репозиторииДляПересборки.Добавить(репозиторийРасширения)
	
			иначе
				если не СкачатьАртефактРепозитория(репозиторийРасширения, ИМЯ_КАТАЛОГА_ПРИКЛАДНОЙ_СБОРКИ, Истина)
					репозиторииДляПересборки.Добавить(репозиторийРасширения)
				;
			;
	
			если настройкиСборки.Конфигурация.Имя == запросНаСлияние.имяПроекта
				пересобиратьОсновнуюКонфигурацию = Истина
			;
		;
	;

	для репозиторийРасширения из настройкиСборки.ТестовыеРасширения
		путиСборки.Вставить(репозиторийРасширения.Имя, полныйПутьТестовойСборки)

		если репозиторийРасширения.Имя == запросНаСлияние.имяПроекта
			репозиторииДляПересборки.Добавить(репозиторийРасширения)
		иначе
			знч результатПроверкиРасширения = ПроверитьКоммитыРепозиторияДляПоследнегоРелиза(репозиторийРасширения, датаПоследнегоРелиза)
			если результатПроверкиРасширения != Неопределено
				репозиторииДляПересборки.Добавить(репозиторийРасширения)
	
			иначе
				если не СкачатьАртефактРепозитория(репозиторийРасширения, ИМЯ_КАТАЛОГА_ТЕСТОВОЙ_СБОРКИ, Истина)
					репозиторииДляПересборки.Добавить(репозиторийРасширения)
				;
			;
		;
	;

	если не пересобиратьОсновнуюКонфигурацию и репозиторииДляПересборки.Пусто()
		Консоль.Записать("Jobs_Cancel: %CI_JOB_ID %CI_PROJECT_ID %CI_SERVER_HOST")
		Jobs_Cancel(CI_JOB_ID, CI_PROJECT_ID, RELEASES_TOKEN, CI_SERVER_HOST)
		возврат
	;

	для репозиторий из репозиторииДляПересборки
		пер путьРасширенияЕДТ = "%CI_PROJECT_DIR/%{репозиторий.Имя}/%{репозиторий.Проект}"
		
		если репозиторий.Имя == имяТекущегоПроекта
			Файлы.СоздатьКаталог(путьРасширенияЕДТ)
			Файлы.Переместить("%CI_PROJECT_DIR/%{репозиторий.Проект}", путьРасширенияЕДТ)
		иначе
			знч адресРепозитория = "https://gitlab-ci-token:%CI_JOB_TOKEN@%CI_SERVER_HOST/%CI_PROJECT_NAMESPACE/%{репозиторий
				.Имя}.git"
			Консоль.Записать("Git_Clone: %адресРепозитория %{запросНаСлияние.веткаПроекта}")
			Git_Clone(адресРепозитория, запросНаСлияние.веткаПроекта)
		;
	;
	
	знч WP = "%CI_PROJECT_DIR/temp/wp"

	знч файлКонфигурации = "%полныйПутьПрикладнойСборки/1cv8.cf"
	если пересобиратьОсновнуюКонфигурацию
		знч путьКонфигурацииПлатформы = "%CI_PROJECT_DIR/temp/src_%{настройкиСборки.Конфигурация.Имя}"
		Консоль.Записать("WorkspaceExport: %путьКонфигурацииЕДТ %путьКонфигурацииПлатформы %WP")
		WorkspaceExport(путьКонфигурацииЕДТ, путьКонфигурацииПлатформы, WP, Истина, ВЕРСИЯ_EDT)

		попытка
			знч файлПоставки = "%путьКонфигурацииПлатформы/Ext/ParentConfigurations.bin"
			Консоль.Записать("Удалить файл: %файлПоставки")
			Файлы.Удалить(файлПоставки)
		поймать исключение: любой
			Консоль.Записать("Было исключение %исключение")
		;
		попытка
			знч каталогПоставки = "%путьКонфигурацииПлатформы/Ext/ParentConfigurations"
			Консоль.Записать("Удалить каталог: %каталогПоставки")
			Файлы.Удалить(каталогПоставки)
		поймать исключение: любой
			Консоль.Записать("Было исключение %исключение")
		;

		Консоль.Записать("LoadConfigFromFiles: %путьКонфигурацииПлатформы %строкаСоединения %исполняемыйФайлПлатформы")
		LoadConfigFromFiles(путьКонфигурацииПлатформы, строкаСоединения, исполняемыйФайлПлатформы)

		Консоль.Записать("UpdateDBCfg: %строкаСоединения %исполняемыйФайлПлатформы")
		UpdateDBCfg(строкаСоединения, исполняемыйФайлПлатформы)

		Консоль.Записать("CreateDistributionFiles: %файлКонфигурации %строкаСоединения %исполняемыйФайлПлатформы")
		CreateDistributionFiles(файлКонфигурации, строкаСоединения, исполняемыйФайлПлатформы)
	иначе
		Консоль.Записать("LoadCfg: %файлКонфигурации %строкаСоединения %исполняемыйФайлПлатформы")
		LoadCfg(файлКонфигурации, строкаСоединения, исполняемыйФайлПлатформы)

		Консоль.Записать("UpdateDBCfg: %строкаСоединения %исполняемыйФайлПлатформы")
		UpdateDBCfg(строкаСоединения, исполняемыйФайлПлатформы)
	;

	для репозиторий из репозиторииДляПересборки
		пер путьРасширенияЕДТ = "%CI_PROJECT_DIR/%{репозиторий.Имя}/%{репозиторий.Проект}"
		
		знч путьРасширенияПлатформы = "%CI_PROJECT_DIR/temp/src_%{репозиторий.Имя}"
		Консоль.Записать("WorkspaceExport: %путьРасширенияЕДТ %путьРасширенияПлатформы %WP")
		WorkspaceExport(путьРасширенияЕДТ, путьРасширенияПлатформы, WP, Истина, ВЕРСИЯ_EDT)

		Консоль.Записать("LoadExtFromFiles: %путьРасширенияПлатформы %{репозиторий.Проект} %строкаСоединения %исполняемыйФайлПлатформы")
		LoadExtFromFiles(путьРасширенияПлатформы, репозиторий.Проект, строкаСоединения, исполняемыйФайлПлатформы)

		Консоль.Записать("UpdateDBExt: %строкаСоединения %исполняемыйФайлПлатформы")
		UpdateDBExt(репозиторий.Проект, строкаСоединения, исполняемыйФайлПлатформы)

		знч путьСборкиРасширения = путиСборки.Получить(репозиторий.Имя)
		знч файлРасширения = "%путьСборкиРасширения/%{репозиторий.Проект}.cfe"
		Консоль.Записать("DumpDBExt: %файлРасширения %{репозиторий.Проект} %строкаСоединения %исполняемыйФайлПлатформы")
		DumpExt(файлРасширения, репозиторий.Проект, строкаСоединения, исполняемыйФайлПлатформы)
	;

	пер списокФайловСсылок = новый Массив()
	знч каталогСборкиПроекта = новый Файл(CI_PROJECT_DIR)
	для файл из Файлы.Найти(ИМЯ_КАТАЛОГА_ПРИКЛАДНОЙ_СБОРКИ)
		знч путьВнутриСборки = файл.Путь.Удалить(каталогСборкиПроекта.Путь)
		списокФайловСсылок.Добавить(новый ОписаниеФайлаСсылкиАссетов(файл.Имя, путьВнутриСборки))
	;
	знч имяФайлаАссетов = "%ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ/assets_bin.json"
	Консоль.Записать("ЗаписатьОписаниеАссетов: %имяФайлаАссетов %CI_PROJECT_PATH %CI_JOB_ID")
	ЗаписатьОписаниеАссетов(имяФайлаАссетов, CI_PROJECT_PATH, CI_JOB_ID, списокФайловСсылок, "")

	знч логФайлыРабочейОбласти = "%WP/.metadata/"
	пер настройкиПоиска = новый НастройкиПоискаФайлов()
	настройкиПоиска.ИмяСодержит(".log")
	для файл из Файлы.Найти(логФайлыРабочейОбласти, настройкиПоиска)
		Консоль.Записать("Удалить файл: %{файл.Путь}")
		Файлы.Удалить(файл)
	;
;

метод ОпубликоватьQualityCode()
	знч CI_COMMIT_SHORT_SHA = СредаИсполнения.ПолучитьПеременную("CI_COMMIT_SHORT_SHA")
	знч CI_JOB_ID = СредаИсполнения.ПолучитьПеременную("CI_JOB_ID")
	знч CI_JOB_TOKEN = СредаИсполнения.ПолучитьПеременную("CI_JOB_TOKEN")
	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")
	знч CI_PROJECT_NAMESPACE = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_NAMESPACE")
	знч CI_PROJECT_PATH = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_PATH")
	знч CI_SERVER_HOST = СредаИсполнения.ПолучитьПеременную("CI_SERVER_HOST")

	знч настройкиСкрипта = ПрочитатьНастройкиСкрипта()
	знч настройкиСборки = ПрочитатьНастройкиСборки("%CI_PROJECT_DIR")

	знч полныйПутьРезультатовТестов = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_РЕЗУЛЬТАТОВ_ТЕСТОВ"

	Консоль.Записать("Создать каталог: %полныйПутьРезультатовТестов/codequality")
	Файлы.СоздатьКаталог("%полныйПутьРезультатовТестов/codequality")

	знч имяТекущегоПроекта = CI_PROJECT_PATH.Заменить("%CI_PROJECT_NAMESPACE/", "")

	пер репозиторииДляПроверки = новый Массив()

	если настройкиСборки.Конфигурация.Имя == имяТекущегоПроекта
		репозиторииДляПроверки.Добавить(настройкиСборки.Конфигурация)
	;
	
	для репозиторийРасширения из настройкиСборки.ПрикладныеРасширения
		если репозиторийРасширения.Имя == имяТекущегоПроекта
			репозиторииДляПроверки.Добавить(репозиторийРасширения)
		;
	;

	для репозиторий из репозиторииДляПроверки
		знч файлРезультатовВалидации = "%полныйПутьРезультатовТестов/%{репозиторий.Имя}.tsv"
	
		знч ошибкиEDT = ОшибкиEDT(файлРезультатовВалидации)
	
		знч файлCodeQuality = "%полныйПутьРезультатовТестов/codequality/%{репозиторий.Имя}.json"
		Консоль.Записать("ЗаписатьОшибкиВФорматCodeQuality: %файлCodeQuality %файлРезультатовВалидации")
		ЗаписатьОшибкиВФорматCodeQuality(файлCodeQuality, ошибкиEDT)
	;
;

метод ПротестироватьКод()
	знч CI_COMMIT_BRANCH = СредаИсполнения.ПолучитьПеременную("CI_COMMIT_BRANCH")
	знч CI_JOB_ID = СредаИсполнения.ПолучитьПеременную("CI_JOB_ID")
	знч CI_JOB_TOKEN = СредаИсполнения.ПолучитьПеременную("CI_JOB_TOKEN")
	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")
	знч CI_PROJECT_NAMESPACE = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_NAMESPACE")
	знч CI_PROJECT_PATH = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_PATH")
	знч CI_SERVER_HOST = СредаИсполнения.ПолучитьПеременную("CI_SERVER_HOST")

	знч SONARQUBE_TOKEN = СредаИсполнения.ПолучитьПеременную("SONARQUBE_TOKEN")

	знч настройкиСкрипта = ПрочитатьНастройкиСкрипта()
	знч настройкиСборки = ПрочитатьНастройкиСборки("%CI_PROJECT_DIR")

	пер ошибкиТокенов = ""

	если не настройкиСборки.СерверSonarQube.Пусто() и СредаИсполнения.ПолучитьПеременную("SONARQUBE_TOKEN").Пусто()
		ошибкиТокенов += "В переменную SONARQUBE_TOKEN необходимо поместить token SonarQube." + Символы.НоваяСтрока
	;

	если не настройкиСборки.СерверSonarQube.Пусто() и настройкиСкрипта.CI_SONARSCANNER.Пусто()
		ошибкиТокенов += "В настройке CI_SONARSCANNER необходимо указать путь к SonarScanner." + Символы.НоваяСтрока
	;

	если не ошибкиТокенов.Пусто()
		выбросить новый ИсключениеНедопустимоеСостояние(ошибкиТокенов)
	;

	знч запросНаСлияние = ПараметрыЗапросаНаСлияние()

	знч полныйПутьРезультатовТестов = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_РЕЗУЛЬТАТОВ_ТЕСТОВ"

	Консоль.Записать("Создать каталог: %полныйПутьРезультатовТестов")
	Файлы.СоздатьКаталог(полныйПутьРезультатовТестов)
	Консоль.Записать("Создать каталог: %полныйПутьРезультатовТестов/junit")
	Файлы.СоздатьКаталог("%полныйПутьРезультатовТестов/junit")

	знч имяТекущегоПроекта = CI_PROJECT_PATH.Заменить("%CI_PROJECT_NAMESPACE/", "")

	пер имяВетки = CI_COMMIT_BRANCH
	если запросНаСлияние != Неопределено
		имяВетки = запросНаСлияние.веткаПроекта
	;

	пер репозиторииДляПроверки = новый Массив()

	если настройкиСборки.Конфигурация.Имя == имяТекущегоПроекта
		репозиторииДляПроверки.Добавить(настройкиСборки.Конфигурация)
	;
	
	знч путьКонфигурацииЕДТ = "%CI_PROJECT_DIR/%{настройкиСборки.Конфигурация.Имя}/%{настройкиСборки.Конфигурация.Проект}"
	если настройкиСборки.Конфигурация.Имя == имяТекущегоПроекта
		Файлы.СоздатьКаталог(путьКонфигурацииЕДТ)
		Файлы.Переместить("%CI_PROJECT_DIR/%{настройкиСборки.Конфигурация.Проект}", путьКонфигурацииЕДТ)
	иначе
		знч адресРепозиторияКонфигурации = "https://gitlab-ci-token:%CI_JOB_TOKEN@%CI_SERVER_HOST/%CI_PROJECT_NAMESPACE/%{настройкиСборки
			.Конфигурация
		.Имя}.git"
		Консоль.Записать("Git_Clone: %адресРепозиторияКонфигурации %имяВетки")
		Git_Clone(адресРепозиторияКонфигурации, имяВетки)
	;

	для репозиторийРасширения из настройкиСборки.ПрикладныеРасширения
		если репозиторийРасширения.Имя == имяТекущегоПроекта
			репозиторииДляПроверки.Добавить(репозиторийРасширения)
		;
		
		знч путьРасширенияЕДТ = "%CI_PROJECT_DIR/%{репозиторийРасширения.Имя}/%{репозиторийРасширения.Проект}"

		если репозиторийРасширения.Имя == имяТекущегоПроекта
			Файлы.СоздатьКаталог(путьРасширенияЕДТ)
			Файлы.Переместить("%CI_PROJECT_DIR/%{репозиторийРасширения.Проект}", путьРасширенияЕДТ)
		иначе
			знч адресРепозитория = "https://gitlab-ci-token:%CI_JOB_TOKEN@%CI_SERVER_HOST/%CI_PROJECT_NAMESPACE/%{репозиторийРасширения
				.Имя}.git"
			Консоль.Записать("Git_Clone: %адресРепозитория %имяВетки")
			Git_Clone(адресРепозитория, имяВетки)
		;
	;

	для репозиторий из репозиторииДляПроверки
		знч путьРепозиторияЕДТ = "%CI_PROJECT_DIR/%{репозиторий.Имя}/%{репозиторий.Проект}"

		знч файлРезультатовВалидации = "%полныйПутьРезультатовТестов/%{репозиторий.Имя}.tsv"
		знч WP = "%CI_PROJECT_DIR/temp/wp"
		Консоль.Записать("WorkspaceValidate: %файлРезультатовВалидации %путьРепозиторияЕДТ %WP")
		WorkspaceValidate(файлРезультатовВалидации, путьРепозиторияЕДТ, WP, Истина, ВЕРСИЯ_EDT)
	;
	
	пер списокФайловСсылок = новый Массив()

	знч имяФайлаАссетов = "%ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ/assets_testCore.json"
	Консоль.Записать("ЗаписатьОписаниеАссетов: %имяФайлаАссетов %CI_PROJECT_PATH %CI_JOB_ID")
	ЗаписатьОписаниеАссетов(имяФайлаАссетов, CI_PROJECT_PATH, CI_JOB_ID, списокФайловСсылок,
		"")
;

метод ПротестироватьИнтерфейс()
	знч CI_COMMIT_BRANCH = СредаИсполнения.ПолучитьПеременную("CI_COMMIT_BRANCH")
	знч CI_JOB_TOKEN = СредаИсполнения.ПолучитьПеременную("CI_JOB_TOKEN")
	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")
	знч CI_PROJECT_NAMESPACE = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_NAMESPACE")
	знч CI_PROJECT_PATH = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_PATH")
	знч CI_SERVER_HOST = СредаИсполнения.ПолучитьПеременную("CI_SERVER_HOST")

	знч настройкиСкрипта = ПрочитатьНастройкиСкрипта()

	пер ошибкиТокенов = ""

	если настройкиСкрипта.CI_DATA.Пусто()
		ошибкиТокенов += "В настройку CI_DATA необходимо поместить путь до каталогов с шаблонами баз." + Символы
			.НоваяСтрока
	;

	если настройкиСкрипта.CI_EPFS.Пусто()
		ошибкиТокенов += "В настройку CI_EPFS необходимо поместить путь до служебных обработок." + Символы
			.НоваяСтрока
	;

	если настройкиСкрипта.CI_VA.Пусто()
		ошибкиТокенов += "В настройку CI_VA необходимо поместить путь до обработки и шагов VanessaAutomation." + Символы
			.НоваяСтрока
	;

	если не ошибкиТокенов.Пусто()
		выбросить новый ИсключениеНедопустимоеСостояние(ошибкиТокенов)
	;

	знч настройкиСборки = ПрочитатьНастройкиСборки("%CI_PROJECT_DIR")
	знч запросНаСлияние = ПараметрыЗапросаНаСлияние()

	знч путьКонфигурацииЕДТ = "%CI_PROJECT_DIR/%{настройкиСборки.Конфигурация.Имя}/%{настройкиСборки.Конфигурация.Проект}"

	знч имяТекущегоПроекта = CI_PROJECT_PATH.Заменить("%CI_PROJECT_NAMESPACE/", "")

	пер имяВетки = CI_COMMIT_BRANCH
	если запросНаСлияние != Неопределено
		имяВетки = запросНаСлияние.веткаПроекта
	;

	если настройкиСборки.Конфигурация.Имя == имяТекущегоПроекта
		Файлы.СоздатьКаталог(путьКонфигурацииЕДТ)
		Файлы.Переместить("%CI_PROJECT_DIR/%{настройкиСборки.Конфигурация.Проект}", путьКонфигурацииЕДТ)
	иначе
		знч адресРепозиторияКонфигурации = "https://gitlab-ci-token:%CI_JOB_TOKEN@%CI_SERVER_HOST/%CI_PROJECT_NAMESPACE/%{настройкиСборки
			.Конфигурация
		.Имя}.git"
		Консоль.Записать("Git_Clone: %адресРепозиторияКонфигурации %имяВетки")
		Git_Clone(адресРепозиторияКонфигурации, имяВетки)
	;
	
	Консоль.Записать("ИсполняемыйФайлПлатформы: %путьКонфигурацииЕДТ")
	знч исполняемыйФайлПлатформы = ИсполняемыйФайлПлатформы(путьКонфигурацииЕДТ)

	для репозиторийТестов из настройкиСборки.СценарныеТесты
		ПротестироватьТестовуюБазу(репозиторийТестов, настройкиСкрипта, настройкиСборки, исполняемыйФайлПлатформы)
	;
;

метод ОпубликоватьSonarQube()
	знч CI_JOB_ID = СредаИсполнения.ПолучитьПеременную("CI_JOB_ID")
	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")
	знч CI_PROJECT_NAMESPACE = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_NAMESPACE")
	знч CI_PROJECT_PATH = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_PATH")

	знч настройкиСкрипта = ПрочитатьНастройкиСкрипта()
	знч настройкиСборки = ПрочитатьНастройкиСборки("%CI_PROJECT_DIR")

	знч запросНаСлияние = ПараметрыЗапросаНаСлияние()
	если запросНаСлияние != Неопределено или настройкиСборки.СерверSonarQube.Пусто()
		возврат
	;

	пер ошибкиТокенов = ""

	если не настройкиСборки.СерверSonarQube.Пусто() и СредаИсполнения.ПолучитьПеременную("SONARQUBE_TOKEN").Пусто()
		ошибкиТокенов += "В переменную SONARQUBE_TOKEN необходимо поместить token SonarQube." + Символы.НоваяСтрока
	;

	если не настройкиСборки.СерверSonarQube.Пусто() и настройкиСкрипта.CI_SONARSCANNER.Пусто()
		ошибкиТокенов += "В настройке CI_SONARSCANNER необходимо указать путь к SonarScanner." + Символы.НоваяСтрока
	;

	если не ошибкиТокенов.Пусто()
		выбросить новый ИсключениеНедопустимоеСостояние(ошибкиТокенов)
	;

	знч полныйПутьРезультатовТестов = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_РЕЗУЛЬТАТОВ_ТЕСТОВ"

	Консоль.Записать("Создать каталог: %полныйПутьРезультатовТестов")
	Файлы.СоздатьКаталог(полныйПутьРезультатовТестов)
	Консоль.Записать("Создать каталог: %полныйПутьРезультатовТестов/sonarQube")
	Файлы.СоздатьКаталог("%полныйПутьРезультатовТестов/sonarQube")

	знч имяТекущегоПроекта = CI_PROJECT_PATH.Заменить("%CI_PROJECT_NAMESPACE/", "")

	пер списокФайловСсылок = новый Массив()

	пер репозиторииДляПроверки = новый Массив()

	если настройкиСборки.Конфигурация.Имя == имяТекущегоПроекта
		репозиторииДляПроверки.Добавить(настройкиСборки.Конфигурация)
	;
	
	для репозиторийРасширения из настройкиСборки.ПрикладныеРасширения
		если репозиторийРасширения.Имя == имяТекущегоПроекта
			репозиторииДляПроверки.Добавить(репозиторийРасширения)
		;
	;

	для репозиторий из репозиторииДляПроверки
		знч ключПроекта = ЗапуститьSonarScannerДляРепозитория(репозиторий, репозиторий.Имя == имяТекущегоПроекта)
	
		пер адресСонарПроекта = настройкиСборки.СерверSonarQube
		если не адресСонарПроекта.ЗаканчиваетсяНа("/")
			адресСонарПроекта += "/"
		;
		адресСонарПроекта += "dashboard?id=%ключПроекта"
		списокФайловСсылок.Добавить(новый ОписаниеФайлаСсылкиАссетов("SonarQube", адресСонарПроекта))
	;
	
	знч имяФайлаАссетов = "%ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ/assets_sonarQube.json"
	Консоль.Записать("ЗаписатьОписаниеАссетов: %имяФайлаАссетов %CI_PROJECT_PATH %CI_JOB_ID")
	ЗаписатьОписаниеАссетов(имяФайлаАссетов, CI_PROJECT_PATH, CI_JOB_ID, списокФайловСсылок,
		"")
;

метод ЗапуститьSonarScannerДляРепозитория(репозиторий: ОписаниеРепозитория, этоТекущийПроект: Булево): Строка
	знч CI_COMMIT_BRANCH = СредаИсполнения.ПолучитьПеременную("CI_COMMIT_BRANCH")
	знч CI_COMMIT_SHORT_SHA = СредаИсполнения.ПолучитьПеременную("CI_COMMIT_SHORT_SHA")
	знч CI_JOB_TOKEN = СредаИсполнения.ПолучитьПеременную("CI_JOB_TOKEN")
	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")
	знч CI_PROJECT_NAMESPACE = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_NAMESPACE")
	знч CI_SERVER_HOST = СредаИсполнения.ПолучитьПеременную("CI_SERVER_HOST")

	знч SONARQUBE_TOKEN = СредаИсполнения.ПолучитьПеременную("SONARQUBE_TOKEN")

	знч настройкиСкрипта = ПрочитатьНастройкиСкрипта()
	знч настройкиСборки = ПрочитатьНастройкиСборки("%CI_PROJECT_DIR")

	пер имяВетки = CI_COMMIT_BRANCH

	знч путьРепозиторияЕДТ = "%CI_PROJECT_DIR/%{репозиторий.Имя}/%{репозиторий.Проект}"

	если этоТекущийПроект
		Файлы.СоздатьКаталог(путьРепозиторияЕДТ)
		Файлы.Переместить("%CI_PROJECT_DIR/%{репозиторий.Проект}", путьРепозиторияЕДТ)
	иначе
		знч адресРепозитория = "https://gitlab-ci-token:%CI_JOB_TOKEN@%CI_SERVER_HOST/%CI_PROJECT_NAMESPACE/%{репозиторий.Имя}.git"
		Консоль.Записать("Git_Clone: %адресРепозитория %имяВетки")
		Git_Clone(адресРепозитория, имяВетки)
	;

	знч полныйПутьРезультатовТестов = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_РЕЗУЛЬТАТОВ_ТЕСТОВ"

	знч файлРезультатовВалидации = "%полныйПутьРезультатовТестов/%{репозиторий.Имя}.tsv"
	знч ошибкиEDT = ОшибкиEDT(файлРезультатовВалидации)

	знч ошибкиSonarQube = ОшибкиВФорматеSonarQube(ошибкиEDT)
	знч файлSonarQube = "%полныйПутьРезультатовТестов/sonarQube/%{репозиторий.Имя}.json"
	Консоль.Записать("ЗаписатьОшибкиВФорматSonarQube: %файлSonarQube %файлРезультатовВалидации")
	ЗаписатьОшибкиВФорматSonarQube(файлSonarQube, ошибкиSonarQube)

	знч файлПараметровСканера = "%CI_PROJECT_DIR/sonar-project-%{репозиторий.Имя}.properties"
	знч ключПроекта = "%CI_PROJECT_NAMESPACE-%{репозиторий.Имя}"

	//TODO: Сделать получение коммита для каждого проекта
	пер тегРелиза = CI_COMMIT_SHORT_SHA
	если не этоТекущийПроект
		тегРелиза = ДатаНовогоРелиза().Форматировать("гггг-ММ-дд")
	;

	Консоль.Записать("СохранитьНастройкиСканера: %файлПараметровСканера %{настройкиСборки.СерверSonarQube} %ключПроекта %{репозиторий.Проект} %тегРелиза %путьРепозиторияЕДТ %файлSonarQube")
	СохранитьНастройкиСканера(файлПараметровСканера, настройкиСборки.СерверSonarQube, ключПроекта, репозиторий.Проект, тегРелиза, путьРепозиторияЕДТ, файлSonarQube)

	Консоль.Записать("ЗапуститьSonarScanner: %файлПараметровСканера")
	ЗапуститьSonarScanner(файлПараметровСканера, SONARQUBE_TOKEN, настройкиСкрипта.CI_SONARSCANNER)
	
	возврат ключПроекта
;

структура ОписаниеНастроекАвтофич
	пер ТестоваяБаза: ОписаниеНастроекТестовойБазы
	пер Шаблоны: ОписаниеНастроекШаблонов
;

перечисление ТипыРасположенияИБ
	Файловая умолчание
	Серверная
;

структура ОписаниеНастроекТестовойБазы
	пер ПутьКDT: Строка
	пер ИмяПользователя: Строка
	пер ПарольПользователя: Строка
	пер ТипРасположенияИБ: ТипыРасположенияИБ
	пер КаталогОшибокСППР: Строка
;

структура ОписаниеНастроекШаблонов
	пер ФайлШаблонаШапки: Строка
	пер Пользователи: Массив
;

структура ОписаниеПользователя
	пер Представление: Строка
	пер Имя: Строка
	пер Пароль: Строка
;

структура ОписаниеОбъектаАвтофичи
	пер Объект: Строка
	пер ШаблонФичи: Строка
	пер Пользователи: Массив
;

перечисление VAParamsСпособыСнятияСкриншотовВнешнейКомпонентой
	ВесьЭкран умолчание // 0
	ТекущееОкноКлиентаТестирования // 1
	ВсеОкнаКлиентаТестирования // 2
;

структура VAParams
	пер КаталогПроекта: Строка
	пер КаталогФич: Строка
	пер КаталогиБиблиотек: Массив

	пер ВыполнитьСценарии: Булево = Истина
	пер ЗавершитьРаботуСистемы: Булево = Истина
	пер ЗакрытьTestClientПослеЗапускаСценариев: Булево = Истина

	пер ДелатьЛогВыполненияСценариевВЖР: Булево = Ложь
	пер ВыводитьЛогВКонсоль: Булево = Ложь

	пер ДелатьЛогВыполненияСценариевВТекстовыйФайл: Булево = Ложь
	пер ИмяФайлаЛогВыполненияСценариев: Строка = ""

	пер ДелатьЛогОшибокВТекстовыйФайл: Булево = Ложь
	пер ИмяКаталогаЛогОшибок: Строка = ""

	пер ПодробныйЛогВыполненияСценариев: Булево = Истина
	пер ВыводитьВЛогВыполнениеШагов: Булево = Истина

	пер ВыгружатьСтатусВыполненияСценариевВФайл: Булево = Ложь
	пер ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев: Строка = ""
	
	пер СобиратьДанныеОСостоянииАктивнойФормыПриОшибке: Булево = Ложь
	пер СобиратьДанныеОСостоянииВсехФормПриОшибке: Булево = Ложь
	пер СобиратьДанныеОСетевыхСоединениях: Булево = Ложь
	пер СобиратьДанныеОПроцессахОС: Булево = Ложь

	пер ИспользоватьКомпонентуVanessaExt: Булево = Истина
	пер ТихаяУстановкаVanessaExt: Булево = Ложь
	пер ИспользоватьВнешнююКомпонентуДляСкриншотов: Булево = Истина

	пер СпособСнятияСкриншотовВнешнейКомпонентой: Число = 1 // VAParamsСпособыСнятияСкриншотовВнешнейКомпонентой
	пер ДелатьСкриншотПриВозникновенииОшибки: Булево = Ложь
	пер СниматьСкриншотКаждогоОкна1С: Булево = Ложь
	пер КаталогВыгрузкиСкриншотов: Строка = ""

	пер ВыполнениеСценариев: VAParamsВыполнениеСценариев

	пер КлиентТестирования: VAParamsКлиентТестирования

	пер ДелатьОтчетВФорматеАллюр: Булево = Ложь
	пер ОтчетAllure: VAParamsОтчетAllure?

	пер ДелатьОтчетВФорматеjUnit: Булево = Ложь
	пер ОтчетJUnit: VAParamsОтчетJUnit?

	пер ДелатьОтчетВФорматеСППР: Булево = Ложь
	пер ОтчетСППР: VAParamsОтчетСППР?

	конструктор(КаталогПроекта, КаталогФич)
	конструктор(КаталогПроекта, КаталогФич, КаталогиБиблиотек)
;

структура VAParamsВыполнениеСценариев
	пер ВыполнятьШагиАссинхронно: Булево = Ложь
	пер ОбновлятьСтатистикуВДереве: Булево = Ложь
	пер ОбновлятьДеревоПриНачалеВыполненияСценария: Булево = Ложь

	конструктор()
;

структура VAParamsКлиентТестирования
	пер ЗапускатьКлиентТестированияСМаксимизированнымОкном: Булево = Истина
	пер ЗакрыватьКлиентТестированияПринудительно: Булево = Истина
	пер ТаймаутПередПринудительнымЗакрытиемКлиентаТестирования: Число = 10
	пер ДиапазонПортовTestclient: Строка = ""
	пер ТаймаутЗапуска1С: Число = 25

	конструктор()
	конструктор(ДиапазонПортовTestclient)
;

структура VAParamsОтчетAllureДанныеАллюрМеток
	пер РегулярноеВыражение: Строка = ""
	пер ИмяМетки: Строка = ""
	пер Значение: Строка = ""
	
	конструктор(ИмяМетки, Значение)
;

структура VAParamsОтчетAllure
	пер КаталогВыгрузкиAllure: Строка
	пер КаталогОтносительноКоторогоНадоСтроитьИерархию: Строка
	пер УровеньОтчета1: Строка = "#report.epic=;ИмяФичаФайла"
	пер УровеньОтчета2: Строка = "#report.feature="
	пер УровеньОтчета3: Строка = "#report.story="
	пер ГруппировкаTestSuites: Строка = "#report.feature="
	пер ДанныеАллюрМеток: Массив // VAParamsОтчетAllureДанныеАллюрМеток?

	конструктор(КаталогВыгрузкиAllure, КаталогОтносительноКоторогоНадоСтроитьИерархию)
;

структура VAParamsОтчетСППР
	пер КаталогВыгрузкиСППР: Строка

	конструктор(КаталогВыгрузкиСППР)
;

структура VAParamsОтчетJUnit
	пер КаталогВыгрузкиjUnit: Строка

	конструктор(КаталогВыгрузкиjUnit)
;

метод ПрочитатьНастройкиАвтофич(имяФайлаНастроек: Строка): ОписаниеНастроекАвтофич
	пер файлНастроек = новый Файл(имяФайлаНастроек)
	исп потокФайлаНастроек = файлНастроек.ОткрытьПотокЧтения()
	пер настройкиJson = новый НастройкиЧтенияОбъектовJson()
	настройкиJson.ИгнорироватьНеизвестныеСвойства = Истина
	пер настройки = СериализацияJson.ПрочитатьОбъект(потокФайлаНастроек, Тип(ОписаниеНастроекАвтофич), настройкиJson) как ОписаниеНастроекАвтофич
	пер пользователи = новый Массив()
	для пользователь из настройки.Шаблоны.Пользователи
		знч описаниеПользователя = новый ОписаниеПользователя(пользователь["ПредставлениеПользователя"], пользователь["ИмяПользователя"],
			пользователь["ПарольПользователя"])
		пользователи.Добавить(описаниеПользователя)
	;
	настройки.Шаблоны.Пользователи = пользователи

	возврат настройки
;

структура ВременнаяТестоваяИБ
	знч представлениеПользователя: Строка
	знч путьСлужебныхФайлов: Строка
	знч строкаСоединения: Строка
;

метод ПротестироватьТестовуюБазу(репозиторийСценарныхТестов: ОписаниеРепозитория, настройкиСкрипта: ОписаниеНастроекСкрипта, настройкиСборки: ОписаниеНастроекСборки, исполняемыйФайлПлатформы: Строка)
	знч CI_COMMIT_BRANCH = СредаИсполнения.ПолучитьПеременную("CI_COMMIT_BRANCH")
	знч CI_JOB_TOKEN = СредаИсполнения.ПолучитьПеременную("CI_JOB_TOKEN")
	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")
	знч CI_PROJECT_NAMESPACE = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_NAMESPACE")
	знч CI_SERVER_HOST = СредаИсполнения.ПолучитьПеременную("CI_SERVER_HOST")

	знч запросНаСлияние = ПараметрыЗапросаНаСлияние()

	пер имяВетки = CI_COMMIT_BRANCH
	если запросНаСлияние != Неопределено
		имяВетки = запросНаСлияние.веткаПроекта
	;
	// TODO: Сделать проверку на существование ветки
	имяВетки = "master"

	знч адресРепозиторияТестов = "https://gitlab-ci-token:%CI_JOB_TOKEN@%CI_SERVER_HOST/%CI_PROJECT_NAMESPACE/%{репозиторийСценарныхТестов
		.Имя}.git"
	Консоль.Записать("Git_Clone: %адресРепозиторияТестов %имяВетки")
	Git_Clone(адресРепозиторияТестов, имяВетки)

	знч настройкиАвтофич = ПрочитатьНастройкиАвтофич("%CI_PROJECT_DIR/%{репозиторийСценарныхТестов.Имя}/auto_features/AFParams.json")

	знч полныйПутьПрикладнойСборки = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_ПРИКЛАДНОЙ_СБОРКИ"
	знч полныйПутьТестовойСборки = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_ТЕСТОВОЙ_СБОРКИ"

	знч путьИБОбщий = "%CI_PROJECT_DIR/temp/db/%{репозиторийСценарныхТестов.Имя}"

	пер строкаСоединения = ""
	если настройкиАвтофич.ТестоваяБаза.ТипРасположенияИБ == ТипыРасположенияИБ.Серверная
		// TODO: Добавить создание пустой ИБ на сервере и загрузку dt в неё, затем сформировать строку подключения
		строкаСоединения = СтрокаСоединенияДляСервернойИБ(настройкиСкрипта.ТестовыйСервер.Сервер1С, "tempCI-%CI_JOB_TOKEN")
	иначе
		строкаСоединения = СтрокаСоединенияДляФайловойИБ("%путьИБОбщий-Исходная")
		
		знч файлDT = "%{настройкиСкрипта.CI_DATA}/%{настройкиАвтофич.ТестоваяБаза.ПутьКDT}"
		Консоль.Записать("CreateInfobaseFromTemplate: %файлDT %строкаСоединения %исполняемыйФайлПлатформы")
		CreateInfobaseFromTemplate(файлDT, строкаСоединения, исполняемыйФайлПлатформы)
	;
	
//	Консоль.Записать("DeleteCfgAllExtensions: %строкаСоединения %исполняемыйФайлПлатформы %{настройкиАвтофич.ТестоваяБаза
//	.ИмяПользователя}")
//	DeleteCfgAllExtensions(строкаСоединения, исполняемыйФайлПлатформы, настройкиАвтофич.ТестоваяБаза
//	.ИмяПользователя)

	знч файлКонфигурации = "%полныйПутьПрикладнойСборки/1cv8.cf"
	Консоль.Записать("LoadCfg: %файлКонфигурации %строкаСоединения %исполняемыйФайлПлатформы %{настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя}")
	LoadCfg(файлКонфигурации, строкаСоединения, исполняемыйФайлПлатформы, настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя)

	Консоль.Записать("UpdateDBCfg: %строкаСоединения %исполняемыйФайлПлатформы %{настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя}")
	UpdateDBCfg(строкаСоединения, исполняемыйФайлПлатформы, настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя)

	для репозиторий из настройкиСборки.ПрикладныеРасширения
		знч файлРасширения = "%полныйПутьПрикладнойСборки/%{репозиторий.Проект}.cfe"
		Консоль.Записать("LoadCfe: %файлРасширения %{репозиторий
			.Проект} %строкаСоединения %исполняемыйФайлПлатформы %{настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя}")
		LoadExt(файлРасширения, репозиторий.Проект, строкаСоединения, исполняемыйФайлПлатформы, настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя)

		Консоль.Записать("UpdateDBExt: %{репозиторий.Проект} %строкаСоединения %исполняемыйФайлПлатформы %{настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя}")
		UpdateDBExt(репозиторий.Проект, строкаСоединения, исполняемыйФайлПлатформы, настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя)
	;

	для репозиторий из настройкиСборки.ТестовыеРасширения
		знч файлРасширения = "%полныйПутьТестовойСборки/%{репозиторий.Проект}.cfe"
		Консоль.Записать("LoadCfe: %файлРасширения %{репозиторий
			.Проект} %строкаСоединения %исполняемыйФайлПлатформы %{настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя}")
		LoadExt(файлРасширения, репозиторий.Проект, строкаСоединения, исполняемыйФайлПлатформы, настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя)

		Консоль.Записать("UpdateDBExt: %{репозиторий.Проект} %строкаСоединения %исполняемыйФайлПлатформы %{настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя}")
		UpdateDBExt(репозиторий.Проект, строкаСоединения, исполняемыйФайлПлатформы, настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя)
	;

	знч имяОбработкиЗапретитьРаботуСВнешнимиРесурсами = "%{настройкиСкрипта.CI_EPFS}/ЗапретитьРаботуСВнешнимиРесурсами.epf"
	Консоль.Записать("ExecuteDataProcessor: %имяОбработкиЗапретитьРаботуСВнешнимиРесурсами %строкаСоединения %исполняемыйФайлПлатформы %{настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя}")
	ExecuteDataProcessor(имяОбработкиЗапретитьРаботуСВнешнимиРесурсами, "", строкаСоединения, исполняемыйФайлПлатформы, настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя, "", 300с)

	знч имяОбработкиОтключитьБезопасныйРежимРасширений = "%{настройкиСкрипта.CI_EPFS}/ОтключитьБезопасныйРежимРасширений.epf"
	Консоль.Записать("ExecuteDataProcessor: %имяОбработкиОтключитьБезопасныйРежимРасширений %строкаСоединения %исполняемыйФайлПлатформы %{настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя}")
	ExecuteDataProcessor(имяОбработкиОтключитьБезопасныйРежимРасширений, "", строкаСоединения, исполняемыйФайлПлатформы, настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя, "", 300с)

	Консоль.Записать("ExecuteCommand: %КОМАНДЫ_ОБНОВЛЕНИЯ_БД %строкаСоединения %исполняемыйФайлПлатформы %{настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя}")
	ExecuteCommand(КОМАНДЫ_ОБНОВЛЕНИЯ_БД, строкаСоединения, исполняемыйФайлПлатформы, настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя)

	знч имяФайлаVA = "%{настройкиСкрипта.CI_VA}/vanessa-automation-single.epf"
	знч параметрыVA = "QuietInstallVanessaExtAndClose"
	Консоль.Записать("ExecuteDataProcessor: %имяФайлаVA %параметрыVA %строкаСоединения %исполняемыйФайлПлатформы %{настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя}")
	ExecuteDataProcessor(имяФайлаVA, параметрыVA, строкаСоединения, исполняемыйФайлПлатформы, настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя, "", 300с)

	Консоль.Записать("СоздатьФичи: %{репозиторийСценарныхТестов.Имя}")
	СоздатьФичи(настройкиСкрипта, настройкиАвтофич, репозиторийСценарныхТестов.Имя)

	Консоль.Записать("Подготовить временные ИБ для тестирования: %{настройкиАвтофич.ТестоваяБаза.ТипРасположенияИБ} %путьИБОбщий")
	пер временныеИБПользователей = новый Соответствие()
	для пользователь из настройкиАвтофич.Шаблоны.Пользователи
		знч временныйКаталогИБ = Файлы.СоздатьКаталог("%путьИБОбщий-%{пользователь.Представление}")
		
		пер строкаСоединенияВременнойИБ = ""
		если настройкиАвтофич.ТестоваяБаза.ТипРасположенияИБ == ТипыРасположенияИБ.Серверная
			// TODO: Добавить дублирование исходной ИБ в серверные тестовые, затем сформировать строку подключения
			строкаСоединенияВременнойИБ = СтрокаСоединенияДляСервернойИБ(настройкиСкрипта.ТестовыйСервер.Сервер1С, "tempCI-%CI_JOB_TOKEN-%{пользователь.Представление}")
		иначе
			строкаСоединенияВременнойИБ = СтрокаСоединенияДляФайловойИБ("%путьИБОбщий-%{пользователь.Представление}")
			Файлы.Скопировать("%путьИБОбщий-Исходная/1Cv8.1CD", "%временныйКаталогИБ/1Cv8.1CD")
		;

		знч временнаяИБ = новый ВременнаяТестоваяИБ(пользователь.Представление, временныйКаталогИБ.Путь, строкаСоединенияВременнойИБ)
		временныеИБПользователей.Вставить(пользователь.Представление, временнаяИБ)
	;

	Консоль.Записать("ЗапуститьСценарныеТесты: %{репозиторийСценарныхТестов.Имя} %{настройкиАвтофич.ТестоваяБаза.ТипРасположенияИБ} %путьИБОбщий")
	ЗапуститьСценарныеТесты(настройкиСкрипта, настройкиАвтофич, исполняемыйФайлПлатформы, репозиторийСценарныхТестов.Имя, временныеИБПользователей)

	если настройкиАвтофич.ТестоваяБаза.ТипРасположенияИБ == ТипыРасположенияИБ.Серверная
		Консоль.Записать("Удалить временные серверные ИБ для тестирования")
		// TODO: Добавить удаление созданных временных ИБ на сервере, исходную и пользовательские
		для пользователь из настройкиАвтофич.Шаблоны.Пользователи
			пер временнаяИБ = временныеИБПользователей.Получить(пользователь.Представление)
		;
	;
;

метод СоздатьФичи(настройкиСкрипта: ОписаниеНастроекСкрипта, настройкиАвтофич: ОписаниеНастроекАвтофич, имяРепозитория: Строка)
	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")

	знч каталогПроекта = "%CI_PROJECT_DIR/%имяРепозитория"

	пер автофичи = новый Соответствие()

	пер настройкиПоиска = новый НастройкиПоискаФайлов()
	настройкиПоиска.ИмяСодержит(".tsv")
	для файлАвтофичи из Файлы.Найти("%каталогПроекта/auto_features", настройкиПоиска)
		пер массивОбъектов = новый Массив()

		исп потокФайлаАвтофичи = файлАвтофичи.ОткрытьПотокЧтения()
		пер чтениеФайлаАвтофичи = новый ЧтениеДанных(потокФайлаАвтофичи)
		// TODO: Отладка
		пока не чтениеФайлаАвтофичи.ЧтениеЗавершено()
			знч строкаФайла = чтениеФайлаАвтофичи.ПрочитатьСтроку("utf-8")
			если строкаФайла.Пусто()
			продолжить
			;
			знч массивСтроки = строкаФайла.Разделить("\т", Истина)
			если массивСтроки.Размер() != 3
				выбросить новый ИсключениеИндексВнеГраниц("В каждой строке автофича файла должно быть 3 значения, разделенных табуляцией.")
			;

			знч пользователиАвтофичи = массивСтроки[2].Разделить(",")
			знч объектАвтофичи = новый ОписаниеОбъектаАвтофичи(массивСтроки[0], массивСтроки[1], пользователиАвтофичи)
			массивОбъектов.Добавить(объектАвтофичи)
		;

		автофичи.Вставить(файлАвтофичи.ИмяБезРасширения, массивОбъектов)
	;

	пер файлШаблонаШапки = новый Файл("%{настройкиСкрипта.CI_VA}/templates/%{настройкиАвтофич.Шаблоны
	.ФайлШаблонаШапки}")
	исп потокШаблонаШапки = файлШаблонаШапки.ОткрытьПотокЧтения()
	знч текстШаблонаШапки = потокШаблонаШапки.ПрочитатьКакСтроку()

	пер текстыШаблоновОбъектов = новый Соответствие()

	для пользователь из настройкиАвтофич.Шаблоны.Пользователи
		для автофича из автофичи
			пер текстФичи = текстШаблонаШапки
			текстФичи = текстФичи.Заменить("\%Фича\%", автофича.Ключ)
			текстФичи = текстФичи.Заменить("\%ПредставлениеПользователя\%", пользователь.Представление)
			текстФичи = текстФичи.Заменить("\%ИмяПользователя\%", пользователь.Имя)
			текстФичи = текстФичи.Заменить("\%ПарольПользователя\%", пользователь.Пароль)

			для описаниеОбъекта из автофича.Значение
				если описаниеОбъекта.Пользователи.Найти(пользователь.Представление) == Неопределено
				продолжить
				;

				пер текстОбъекта = ""
				если текстыШаблоновОбъектов.СодержитКлюч(описаниеОбъекта.ШаблонФичи)
					текстОбъекта = текстыШаблоновОбъектов.Получить(описаниеОбъекта.ШаблонФичи)
				иначе
					пер файлШаблонаОбъекта = новый Файл("%{настройкиСкрипта.CI_VA}/templates/%{описаниеОбъекта.ШаблонФичи}")
					исп потокШаблонаОбъекта = файлШаблонаОбъекта.ОткрытьПотокЧтения()
					знч текстШаблонаОбъекта = потокШаблонаОбъекта.ПрочитатьКакСтроку()
					текстыШаблоновОбъектов.Вставить(описаниеОбъекта.ШаблонФичи, текстШаблонаОбъекта)

					текстОбъекта = текстШаблонаОбъекта
				;

				текстОбъекта = текстОбъекта.Заменить("\%ИмяОбъекта\%", описаниеОбъекта.Объект.Разделить(".")[1])
				текстФичи = текстФичи + Символы.НоваяСтрока + текстОбъекта
			;

			знч путьАвтофич = "%каталогПроекта/features/%{пользователь.Представление}"
			Файлы.СоздатьКаталог(путьАвтофич)
			пер файлФичи = новый Файл("%путьАвтофич/%{автофича.Ключ}.feature")
			исп потокФичи = файлФичи.ОткрытьПотокЗаписи()
			потокФичи.Записать(текстФичи)
		;
	;
;

метод ЗапуститьСценарныеТесты(настройкиСкрипта: ОписаниеНастроекСкрипта, настройкиАвтофич: ОписаниеНастроекАвтофич, исполняемыйФайлПлатформы: Строка, имяРепозитория: Строка, временныеИБПользователей: Соответствие)
	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")

	знч каталогПроекта = "%CI_PROJECT_DIR/%имяРепозитория"

	знч полныйПутьРезультатовТестов = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_РЕЗУЛЬТАТОВ_ТЕСТОВ"

	знч каталогВыгрузкиAllure = "%полныйПутьРезультатовТестов/allure"

	пер командыПлатформы = новый Соответствие()
	пер начальныйПорт = 48101
	знч диапазонПортов = 50
	для пользователь из настройкиАвтофич.Шаблоны.Пользователи
		пер временнаяИБ = временныеИБПользователей.Получить(пользователь.Представление)

		знч имяОбработкиЗапретитьРаботуСВнешнимиРесурсами = "%{настройкиСкрипта.CI_EPFS}/ЗапретитьРаботуСВнешнимиРесурсами.epf"
		Консоль.Записать("ExecuteDataProcessor: %имяОбработкиЗапретитьРаботуСВнешнимиРесурсами %{временнаяИБ.строкаСоединения} %исполняемыйФайлПлатформы %{настройкиАвтофич.ТестоваяБаза.ИмяПользователя}")
		ExecuteDataProcessor(имяОбработкиЗапретитьРаботуСВнешнимиРесурсами, "", временнаяИБ.строкаСоединения, исполняемыйФайлПлатформы, настройкиАвтофич.ТестоваяБаза.ИмяПользователя, настройкиАвтофич.ТестоваяБаза
		.ПарольПользователя, 300с)
	
		знч каталогФич = "%каталогПроекта/features/%{пользователь.Представление}"

		знч конечныйПорт = начальныйПорт + диапазонПортов - 1

		пер настройкиVAParams = новый VAParams(каталогПроекта, каталогФич, ["%{настройкиСкрипта.CI_VA}/steps"])

		знч настройкиVAParamsВыполнениеСценариев = новый VAParamsВыполнениеСценариев()
		настройкиVAParams.ВыполнениеСценариев = настройкиVAParamsВыполнениеСценариев
		
		пер настройкиVAParamsКлиентТестирования = новый VAParamsКлиентТестирования("%начальныйПорт-%конечныйПорт")
		настройкиVAParamsКлиентТестирования.ТаймаутЗапуска1С = 60
		настройкиVAParams.КлиентТестирования = настройкиVAParamsКлиентТестирования
		
		пер настройкиVAParamsОтчетAllure = новый VAParamsОтчетAllure(каталогВыгрузкиAllure, каталогФич)
		настройкиVAParamsОтчетAllure.ДанныеАллюрМеток.Добавить(новый VAParamsОтчетAllureДанныеАллюрМеток("thread", пользователь.Представление))
		настройкиVAParams.ДелатьОтчетВФорматеАллюр = Истина
		настройкиVAParams.ОтчетAllure = настройкиVAParamsОтчетAllure
		
		знч настройкиVAParamsОтчетJUnit = новый VAParamsОтчетJUnit(Файлы.СоздатьКаталог("%{временнаяИБ.путьСлужебныхФайлов}/junit").Путь)
		настройкиVAParams.ДелатьОтчетВФорматеjUnit = Истина
		настройкиVAParams.ОтчетJUnit = настройкиVAParamsОтчетJUnit

		если не настройкиАвтофич.ТестоваяБаза.КаталогОшибокСППР.Пусто()
			знч настройкиVAParamsОтчетСППР = новый VAParamsОтчетСППР("%{настройкиСкрипта.CI_DATA}/%{настройкиАвтофич.ТестоваяБаза.КаталогОшибокСППР}")
			настройкиVAParams.ДелатьОтчетВФорматеСППР = Истина
			настройкиVAParams.ОтчетСППР = настройкиVAParamsОтчетСППР
		;
		
		настройкиVAParams.ДелатьЛогВыполненияСценариевВТекстовыйФайл = Истина
		настройкиVAParams.ИмяФайлаЛогВыполненияСценариев = "%{временнаяИБ.путьСлужебныхФайлов}/ЛогВыполненияСценариевVA.txt"

		настройкиVAParams.ДелатьЛогОшибокВТекстовыйФайл = Истина
		настройкиVAParams.ИмяКаталогаЛогОшибок = Файлы.СоздатьКаталог("%{временнаяИБ.путьСлужебныхФайлов}/файлыОшибок").Путь

		настройкиVAParams.ВыгружатьСтатусВыполненияСценариевВФайл = Истина
		настройкиVAParams.ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев = "%{временнаяИБ.путьСлужебныхФайлов}/КодВозвратаVA.txt"

		настройкиVAParams.ДелатьСкриншотПриВозникновенииОшибки = Истина
		настройкиVAParams.КаталогВыгрузкиСкриншотов = Файлы.СоздатьКаталог("%{временнаяИБ.путьСлужебныхФайлов}/screenShots").Путь

		знч временныйФайлНастроекVA = Файлы.Создать("%{временнаяИБ.путьСлужебныхФайлов}/VAParams.json")
		исп потокНастроекVA = временныйФайлНастроекVA.ОткрытьПотокЗаписи()
		СериализацияJson.ЗаписатьОбъект(потокНастроекVA, настройкиVAParams)
		потокНастроекVA.Закрыть()

		знч параметрыVA =
			"StartFeaturePlayer;DisableUserSettingsLoader;DisableLoadTestClientsTable;DisableLoadConfig;ClearStepsCache;VAParams=%временныйФайлНастроекVA"

		знч имяФайлаVA = "%{настройкиСкрипта.CI_VA}/vanessa-automation-single.epf"
		Консоль.Записать("ExecuteDataProcessorTestManager: %имяФайлаVA %параметрыVA %{временнаяИБ.строкаСоединения} %исполняемыйФайлПлатформы %{настройкиАвтофич.ТестоваяБаза.ИмяПользователя}")
		пер командаПлатформы = ExecuteDataProcessorTestManager(имяФайлаVA,
			параметрыVA, временнаяИБ.строкаСоединения, исполняемыйФайлПлатформы, настройкиАвтофич.ТестоваяБаза.ИмяПользователя, настройкиАвтофич.ТестоваяБаза
		.ПарольПользователя)
		командыПлатформы.Вставить(временнаяИБ, командаПлатформы)

		начальныйПорт = начальныйПорт + диапазонПортов
	;

	пока не командыПлатформы.Пусто()
		для командаПлатформы из командыПлатформы
			знч процессЗавершен = ОбработатьЗавершениеКомандыПлатформы(командаПлатформы.Значение)
			если процессЗавершен
				знч временнаяИБ = командаПлатформы.Ключ
				пер файлКодВозвратаVA = новый Файл("%{временнаяИБ.путьСлужебныхФайлов}/КодВозвратаVA.txt")
				знч кодВозвратаVA = ПолучитьКодВозвратаИзФайла(файлКодВозвратаVA)
				если кодВозвратаVA != 0 и кодВозвратаVA != 1 и кодВозвратаVA != 2
					выбросить новый ИсключениеНедопустимоеСостояние(
						"Для тест-клиента пользователя %{временнаяИБ.представлениеПользователя} получен код возврата Vanessa Automation %кодВозвратаVA")
				;

				командыПлатформы.Удалить(командаПлатформы.Ключ)
				прервать
			;
		;
	;

	пер индекс = 1
	для пользователь из настройкиАвтофич.Шаблоны.Пользователи
		пер временнаяИБ = временныеИБПользователей.Получить(пользователь.Представление)
		
		Файлы.Скопировать("%{временнаяИБ.путьСлужебныхФайлов}/junit/junit.xml", "%полныйПутьРезультатовТестов/junit/junit-%индекс.xml")
		индекс += 1
	;
;

метод ExecuteDataProcessorTestManager(имяВнешнейОбработки: Строка, вспомогательныеПараметры: Строка, строкаСоединения: Строка, имяФайлаПлатформы: Строка,
	имяПользователя: Строка = "", пароль: Строка = ""): ОписаниеКомандыПлатформы
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("ENTERPRISE")
	параметрыПроцесса.Добавить("/TestManager")
	параметрыПроцесса.Добавить("/Execute")
	параметрыПроцесса.Добавить(имяВнешнейОбработки)
	если не вспомогательныеПараметры.Пусто()
		параметрыПроцесса.Добавить("/C\"%вспомогательныеПараметры\"")
	;
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить(строкаСоединения)
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	пер командаПлатформы = ВыполнитьКомандуПлатформыВФоне(имяФайлаПлатформы + "c", параметрыПроцесса)
	Консоль.Записать("Обработка запущена.")

	возврат командаПлатформы
;

метод AllureGenerate(настройки: ОписаниеНастроекАвтофич)
	пер имяКоманды = ""
	пер параметрыПроцесса = новый Массив()

	знч версияОС = ИспользуемаяОС()
	выбор версияОС
	когда ОперационныеСистемы.Windows
		имяКоманды = "allure.bat"
	иначе
		имяКоманды = "allure"
	;

	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")
	знч полныйПутьРезультатовТестов = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_РЕЗУЛЬТАТОВ_ТЕСТОВ"
	
	параметрыПроцесса.Добавить("generate")
	параметрыПроцесса.Добавить("%полныйПутьРезультатовТестов/allure")
	параметрыПроцесса.Добавить("--clean")
	параметрыПроцесса.Добавить("-o")
	параметрыПроцесса.Добавить("%CI_PROJECT_DIR/public")

	ВыполнитьКомандуСистемы(имяКоманды, параметрыПроцесса)
;

метод ВыполнитьКомандуСистемы(имяКоманды: Строка, параметры: Массив)
	знч процесс = новый ПроцессОс(имяКоманды, параметры, Ложь)
	процесс.Запустить()

	исп результатВыполненияСкрипта = процесс.ПолучитьПотокВывода()
	пока не процесс.ОжидатьЗавершения(60с)
		знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакСтроку()
		если не текстРезультата.Пусто()
			Консоль.Записать(текстРезультата)
		;
	;
	знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакСтроку()
	если не текстРезультата.Пусто()
		Консоль.Записать(текстРезультата)
	;

	знч кодВозврата = процесс.ПолучитьКодВозврата()
	Консоль.Записать("Код возврата:" + кодВозврата)

	пер ошибкиВыполненияСкрипта = процесс.ПолучитьПотокОшибок()
	знч текстОшибок = ошибкиВыполненияСкрипта.ПрочитатьКакСтроку(КодировкаПотокаВывода())
	если не текстОшибок.Пусто()
		Консоль.Записать("Поток ошибок:")
		Консоль.Записать(текстОшибок)
	;
;

метод КодировкаПотокаВывода(): Строка
	возврат "Cp1251"
;

структура ОписаниеКомандыПлатформы
	пер процесс: ПроцессОс
	пер имяКоманды: Строка
	пер параметры: Массив
	пер временныйФайлЛогов: Файл
	пер выводитьОшибки: Булево = Истина
;

метод ВыполнитьКомандуПлатформыВФоне(имяКоманды: Строка, параметры: Массив, выводитьОшибки: Булево =
	Истина): ОписаниеКомандыПлатформы
	знч временныйФайлЛогов = Файлы.СоздатьВременныйФайл()
	знч временныйФайлКодВозврата = Файлы.СоздатьВременныйФайл()

	параметры.Добавить("/Out")
	параметры.Добавить(временныйФайлЛогов.Путь)

	знч параметрыСтрокой = Строки.Соединить(параметры, " ")
	Консоль.Записать("\"%имяКоманды\" %параметрыСтрокой")
	пер процесс = новый ПроцессОс(имяКоманды, параметры)
	процесс.Запустить()

	возврат новый ОписаниеКомандыПлатформы(процесс, имяКоманды, параметры, временныйФайлЛогов, выводитьОшибки)
;

метод ОбработатьЗавершениеКомандыПлатформы(командаПлатформы: ОписаниеКомандыПлатформы): Булево
	пер кодВозврата = командаПлатформы.процесс.ПолучитьКодВозврата()

	если кодВозврата == Неопределено и (не командаПлатформы.процесс.ОжидатьЗавершения(60с) или командаПлатформы.процесс.Живой())
		возврат Ложь
	;

	если командаПлатформы.процесс.Живой()
		командаПлатформы.процесс.Остановить()
	;

	Консоль.Записать("Команда платформы выполнена.")

	кодВозврата = командаПлатформы.процесс.ПолучитьКодВозврата()

	если кодВозврата == 0
		возврат Истина
	;

	пер текстОшибки = "Код возврата: %кодВозврата"
	если не командаПлатформы.выводитьОшибки
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
	;

	текстОшибки += Строки.Шаблон("\в\нКоманда: $0\в\нПараметры: $1", [командаПлатформы.имяКоманды, Строки.Соединить(командаПлатформы
		.параметры, " ")])

	исп ошибкиВыполненияСкрипта = командаПлатформы.временныйФайлЛогов.ОткрытьПотокЧтения()
	текстОшибки += "\в\нСодержимое лога:\в\н" + ошибкиВыполненияСкрипта.ПрочитатьКакСтроку()
	выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
;

метод ОпубликоватьAllureОтчет()
	знч CI_COMMIT_BRANCH = СредаИсполнения.ПолучитьПеременную("CI_COMMIT_BRANCH")
	знч CI_JOB_ID = СредаИсполнения.ПолучитьПеременную("CI_JOB_ID")
	знч CI_JOB_TOKEN = СредаИсполнения.ПолучитьПеременную("CI_JOB_TOKEN")
	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")
	знч CI_PROJECT_NAMESPACE = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_NAMESPACE")
	знч CI_PROJECT_PATH = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_PATH")
	знч CI_SERVER_HOST = СредаИсполнения.ПолучитьПеременную("CI_SERVER_HOST")

	знч настройки = ПрочитатьНастройкиСборки("%CI_PROJECT_DIR")
	знч запросНаСлияние = ПараметрыЗапросаНаСлияние()

	пер имяВетки = CI_COMMIT_BRANCH
	если запросНаСлияние != Неопределено
		имяВетки = запросНаСлияние.веткаПроекта
	;
	// TODO: Сделать проверку на существование ветки
	имяВетки = "master"

	для репозиторийСценарныхТестов из настройки.СценарныеТесты
		знч адресРепозиторияТестов = "https://gitlab-ci-token:%CI_JOB_TOKEN@%CI_SERVER_HOST/%CI_PROJECT_NAMESPACE/%{репозиторийСценарныхТестов
			.Имя}.git"
		Консоль.Записать("Git_Clone: %адресРепозиторияТестов %имяВетки")
		Git_Clone(адресРепозиторияТестов, имяВетки)
	
		знч настройкиАвтофич = ПрочитатьНастройкиАвтофич("%CI_PROJECT_DIR/%{репозиторийСценарныхТестов.Имя}/auto_features/AFParams.json")
	
		AllureGenerate(настройкиАвтофич)
	;
	
	пер списокРезультатовТестов = новый Массив()
	
	пер тестовВсего = 0
	пер тестовНеПрошло = 0
	пер тестовПропущено = 0

	знч полныйПутьРезультатовТестов = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_РЕЗУЛЬТАТОВ_ТЕСТОВ/junit/"
	пер настройкиПоискаФайлов = новый НастройкиПоискаФайлов()
	настройкиПоискаФайлов.ИмяСодержит(".xml")
	знч найденныеФайлы = Файлы.Найти(полныйПутьРезультатовТестов, настройкиПоискаФайлов)
	для найденныйФайл из найденныеФайлы
		если не найденныйФайл.Имя.НачинаетсяС("junit")
		продолжить
		;
		знч тестыJunit = ПрочитатьОшибкиВФорматеJUnit(найденныйФайл.Путь)
		для testSuite из тестыJunit.testSuites
			тестовВсего += testSuite.tests
			тестовНеПрошло += testSuite.failures
			тестовПропущено += testSuite.skipped
			
			если testSuite.errors == 0 и testSuite.failures == 0
				продолжить
			;
			
			знч представлениеТестов = "Тесты %{testSuite.name}: всего %{testSuite.tests}, не прошло %{testSuite.failures}, пропущено %{testSuite.skipped}"
			списокРезультатовТестов.Добавить(представлениеТестов)
		;
	;
	
	пер списокФайловСсылок = новый Массив()
	списокФайловСсылок.Добавить(новый ОписаниеФайлаСсылкиАссетов("Allure Report: всего %тестовВсего, не прошло %тестовНеПрошло, пропущено %тестовПропущено", "/public/index.html"))

	знч имяФайлаАссетов = "%ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ/assets_pages.json"
	Консоль.Записать("ЗаписатьОписаниеАссетов: %имяФайлаАссетов %CI_PROJECT_PATH %CI_JOB_ID")
	ЗаписатьОписаниеАссетов(имяФайлаАссетов, CI_PROJECT_PATH, CI_JOB_ID, списокФайловСсылок,
		Строки.Соединить(списокРезультатовТестов, Символы.НоваяСтрока))
;

метод ОпубликоватьРелиз()
	знч CI_COMMIT_SHORT_SHA = СредаИсполнения.ПолучитьПеременную("CI_COMMIT_SHORT_SHA")
	знч CI_PROJECT_ID = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_ID")
	знч CI_PROJECT_NAMESPACE = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_NAMESPACE")
	знч CI_JOB_TOKEN = СредаИсполнения.ПолучитьПеременную("CI_JOB_TOKEN")
	знч CI_SERVER_HOST = СредаИсполнения.ПолучитьПеременную("CI_SERVER_HOST")

	знч датаНовогоРелиза = ДатаНовогоРелиза()

	знч тегРелиза = датаНовогоРелиза.Форматировать("гггг-ММ-дд")
	знч имяРелиза = "Релиз %CI_PROJECT_NAMESPACE %тегРелиза"
	пер комментарийРелиза = "Автоматически собранный релиз %CI_PROJECT_NAMESPACE %тегРелиза"

	пер ссылки = новый Массив()

	знч описаниеАссетовBin = ПрочитатьОписаниеАссетов("%ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ/assets_bin.json")
	для данныеФайла из описаниеАссетовBin.списокФайловСсылок
		знч файлДляУрл = данныеФайла.путь.Заменить("\\", "/")
		знч урлАссерта = "https://%CI_SERVER_HOST/%{описаниеАссетовBin.имяПроекта}/-/jobs/%{описаниеАссетовBin.идЗадания}/artifacts/raw%файлДляУрл"
		знч ассерт = новый Releases_Create_Assets_Link_Data(данныеФайла.имя, урлАссерта)
		ссылки.Добавить(ассерт)
	;
	если не описаниеАссетовBin.описание.Пусто()
		комментарийРелиза += Символы.НоваяСтрока + Символы.НоваяСтрока
			+ описаниеАссетовBin.описание.Заменить(Символы.НоваяСтрока, "<br/>")
	;

	знч описаниеАссетовTestCore = ПрочитатьОписаниеАссетов("%ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ/assets_testCore.json")
	для данныеФайла из описаниеАссетовTestCore.списокФайловСсылок
		знч ассерт = новый Releases_Create_Assets_Link_Data(данныеФайла.имя, данныеФайла.путь)
		ссылки.Добавить(ассерт)
	;
	если не описаниеАссетовTestCore.описание.Пусто()
		комментарийРелиза += Символы.НоваяСтрока + Символы.НоваяСтрока
			+ описаниеАссетовTestCore.описание.Заменить(Символы.НоваяСтрока, "<br/>")
	;

	знч описаниеАссетовSonarQube = ПрочитатьОписаниеАссетов("%ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ/assets_sonarQube.json")
	для данныеФайла из описаниеАссетовSonarQube.списокФайловСсылок
		знч ассерт = новый Releases_Create_Assets_Link_Data(данныеФайла.имя, данныеФайла.путь)
		ссылки.Добавить(ассерт)
	;
	если не описаниеАссетовSonarQube.описание.Пусто()
		комментарийРелиза += Символы.НоваяСтрока + Символы.НоваяСтрока
			+ описаниеАссетовSonarQube.описание.Заменить(Символы.НоваяСтрока, "<br/>")
	;
	
	знч описаниеАссетовPages = ПрочитатьОписаниеАссетов("%ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ/assets_pages.json")
	для данныеФайла из описаниеАссетовPages.списокФайловСсылок
		знч файлДляУрл = данныеФайла.путь.Заменить("\\", "/")
		знч урлАссерта = "https://%CI_SERVER_HOST/%{описаниеАссетовPages.имяПроекта}/-/jobs/%{описаниеАссетовPages.идЗадания}/artifacts/file%файлДляУрл"
		знч ассерт = новый Releases_Create_Assets_Link_Data(данныеФайла.имя, урлАссерта)
		ссылки.Добавить(ассерт)
	;
	если не описаниеАссетовPages.описание.Пусто()
		комментарийРелиза += Символы.НоваяСтрока + Символы.НоваяСтрока
			+ описаниеАссетовPages.описание.Заменить(Символы.НоваяСтрока, "<br/>")
	;

	Консоль.Записать(
		"Releases_Create: %тегРелиза %CI_COMMIT_SHORT_SHA %CI_PROJECT_ID %CI_SERVER_HOST")
	Releases_Create(датаНовогоРелиза, тегРелиза, имяРелиза, комментарийРелиза, ссылки, CI_COMMIT_SHORT_SHA, CI_PROJECT_ID,
		CI_JOB_TOKEN, CI_SERVER_HOST)
;

метод ПроверитьКоммитыРепозиторияДляПоследнегоРелиза(репозиторий: ОписаниеРепозитория, датаПоследнегоРелиза: ДатаВремя): ДатаВремя?
	знч CI_COMMIT_BRANCH = СредаИсполнения.ПолучитьПеременную("CI_COMMIT_BRANCH")
	знч CI_PROJECT_NAMESPACE = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_NAMESPACE")
	знч CI_SERVER_HOST = СредаИсполнения.ПолучитьПеременную("CI_SERVER_HOST")

	знч токен = СредаИсполнения.ПолучитьПеременную(репозиторий.ПеременнаяТокена)

	знч имяПроекта = "%CI_PROJECT_NAMESPACE/%{репозиторий.Имя}".Заменить("/", "\%2F")
	пер коммиты = новый Массив()
	если датаПоследнегоРелиза == новый ДатаВремя(1, 1, 1)
		Консоль.Записать("Commits_List: %CI_COMMIT_BRANCH %имяПроекта %CI_SERVER_HOST")
		коммиты = Commits_List(CI_COMMIT_BRANCH, имяПроекта, токен, CI_SERVER_HOST, "", датаПоследнегоРелиза)
	иначе
		Консоль.Записать("Commits_List_Since: %CI_COMMIT_BRANCH %имяПроекта %CI_SERVER_HOST %датаПоследнегоРелиза")
		коммиты = Commits_List_Since(CI_COMMIT_BRANCH, имяПроекта, токен, CI_SERVER_HOST, датаПоследнегоРелиза)
	;
	если коммиты.Пусто()
		Консоль.Записать("Нет новых коммитов в репозитории %{репозиторий.Имя}")
		возврат Неопределено
	;

	знч датаПоследнегоКоммита = новый ДатаВремя(коммиты[0].Получить("created_at").Подстрока(0, 19))
	Консоль.Записать("Последний коммит в репозитории %{репозиторий.Имя} от %датаПоследнегоКоммита")

	возврат датаПоследнегоКоммита
;

метод СкачатьАртефактРепозитория(репозиторий: ОписаниеРепозитория, путьСборки: Строка, расширение: Булево): Булево
	знч CI_COMMIT_REF_SLUG = СредаИсполнения.ПолучитьПеременную("CI_COMMIT_REF_SLUG")
	знч CI_PROJECT_NAMESPACE = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_NAMESPACE")
	знч CI_SERVER_HOST = СредаИсполнения.ПолучитьПеременную("CI_SERVER_HOST")

	знч RELEASES_TOKEN = СредаИсполнения.ПолучитьПеременную("RELEASES_TOKEN")

	пер имяФайла = "%путьСборки/1cv8.cf"
	если расширение
		имяФайла = "%путьСборки/%{репозиторий.Проект}.cfe"
	;

	знч имяРепозиторияРелизов = "%CI_PROJECT_NAMESPACE/releases".Заменить("/", "\%2F")

	Консоль.Записать(
		"JobArtifacts_DownloadFile: %имяФайла build %CI_COMMIT_REF_SLUG %имяРепозиторияРелизов %CI_SERVER_HOST")
	возврат JobArtifacts_DownloadFile(имяФайла, "build", CI_COMMIT_REF_SLUG, имяРепозиторияРелизов, RELEASES_TOKEN,
		CI_SERVER_HOST)
;

метод ДатаНовогоРелиза(): ДатаВремя
	пер файлДатаНовогоРелиза = новый Файл("%ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ/new_release_date.txt")
	если не файлДатаНовогоРелиза.Существует()
		возврат ДатаВремя.Сейчас()
	;
	
	исп потокЧтенияДатаНовогоРелиза = файлДатаНовогоРелиза.ОткрытьПотокЧтения()
	возврат новый ДатаВремя(потокЧтенияДатаНовогоРелиза.ПрочитатьКакСтроку())
;


структура ОписаниеНастроекСборки
	знч Конфигурация: ОписаниеРепозитория
	пер ПрикладныеРасширения: Массив
	пер ТестовыеРасширения: Массив
	пер СценарныеТесты: Массив
	знч СерверSonarQube: Строка
;

структура ОписаниеРепозитория
	знч Имя: Строка
	знч Проект: Строка
	знч ПеременнаяТокена: Строка
	
	конструктор (Имя, ПеременнаяТокена)
	конструктор (Имя, Проект, ПеременнаяТокена)
;


структура ОписаниеЗапросаНаСлияние
	знч имяПроекта: Строка
	знч веткаПроекта: Строка
;

метод ПараметрыЗапросаНаСлияние(): ОписаниеЗапросаНаСлияние?
	знч CI_MERGE_REQUEST_PROJECT_PATH = СредаИсполнения.ПолучитьПеременную("CI_MERGE_REQUEST_PROJECT_PATH")
	знч CI_MERGE_REQUEST_SOURCE_BRANCH_NAME = СредаИсполнения.ПолучитьПеременную("CI_MERGE_REQUEST_SOURCE_BRANCH_NAME")
	знч CI_PROJECT_NAMESPACE = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_NAMESPACE")

	если CI_MERGE_REQUEST_PROJECT_PATH.Пусто()
		возврат Неопределено
	;
	
	знч имяПроектаСлияния = CI_MERGE_REQUEST_PROJECT_PATH.Заменить("%CI_PROJECT_NAMESPACE/", "")
	
	возврат новый ОписаниеЗапросаНаСлияние(имяПроектаСлияния, CI_MERGE_REQUEST_SOURCE_BRANCH_NAME)
;

метод ПрочитатьНастройкиСборки(путьОписанияНастроек: Строка): ОписаниеНастроекСборки
	знч запросНаСлияние = ПараметрыЗапросаНаСлияние()

	если запросНаСлияние != Неопределено
		Консоль.Записать("ЗапросНаСлияние: %{запросНаСлияние.имяПроекта} %{запросНаСлияние.веткаПроекта}")
	;

	пер файлОписанияНастроек = ".1cicd.json"
	если не путьОписанияНастроек.Пусто()
		файлОписанияНастроек = "%путьОписанияНастроек/.1cicd.json"
	;
	знч файл = новый Файл(файлОписанияНастроек)
	исп поток = файл.ОткрытьПотокЧтения()

	пер настройкиJson = новый НастройкиЧтенияОбъектовJson()
	настройкиJson.ИгнорироватьНеизвестныеСвойства = Истина

	пер настройки = СериализацияJson.ПрочитатьОбъект(поток, Тип(ОписаниеНастроекСборки),
		настройкиJson) как ОписаниеНастроекСборки

	пер прикладныеРасширения = новый Массив()
	для репозиторийРасширения из настройки.ПрикладныеРасширения
		знч описание = новый ОписаниеРепозитория(репозиторийРасширения["Имя"], репозиторийРасширения["Проект"],
			репозиторийРасширения["ПеременнаяТокена"])
		прикладныеРасширения.Добавить(описание)
	;
	настройки.ПрикладныеРасширения = прикладныеРасширения

	пер тестовыеРасширения = новый Массив()
	для репозиторийРасширения из настройки.ТестовыеРасширения
		знч описание = новый ОписаниеРепозитория(репозиторийРасширения["Имя"], репозиторийРасширения["Проект"],
			репозиторийРасширения["ПеременнаяТокена"])
		тестовыеРасширения.Добавить(описание)
	;
	настройки.ТестовыеРасширения = тестовыеРасширения

	пер сценарныеТесты = новый Массив()
	для репозиторийТестов из настройки.СценарныеТесты
		знч описание = новый ОписаниеРепозитория(репозиторийТестов["Имя"], "", репозиторийТестов["ПеременнаяТокена"])
		сценарныеТесты.Добавить(описание)
	;
	настройки.СценарныеТесты = сценарныеТесты

	возврат настройки
;

перечисление ТипыСУБД
	MSSQLServer умолчание
;

структура ОписаниеТестовогоСервера
	пер Сервер1С: Строка
	пер Пользователь1С: Строка
	пер Пароль1С: Строка
	пер ТипСУБД: ТипыСУБД
	пер СерверБазДанных: Строка
	пер ПользовательБазыДанных: Строка
	пер ПарольБазыДанных: Строка
;

структура ОписаниеНастроекСкрипта
	пер CI_DATA: Строка
	пер CI_EPFS: Строка
	пер CI_VA: Строка
	пер CI_SONARSCANNER: Строка
	пер ТестовыйСервер: ОписаниеТестовогоСервера
;

метод ПрочитатьНастройкиСкрипта(): ОписаниеНастроекСкрипта
	знч CI_SCRIPTS = СредаИсполнения.ПолучитьПеременную("CI_SCRIPTS")

	пер файлОписанияНастроек = "%CI_SCRIPTS/1cicd.json"
	знч файл = новый Файл(файлОписанияНастроек)
	исп поток = файл.ОткрытьПотокЧтения()

	пер настройкиJson = новый НастройкиЧтенияОбъектовJson()
	настройкиJson.ИгнорироватьНеизвестныеСвойства = Истина

	пер настройки = СериализацияJson.ПрочитатьОбъект(поток, Тип(ОписаниеНастроекСкрипта),
		настройкиJson) как ОписаниеНастроекСкрипта
	
	возврат настройки
;


перечисление ОперационныеСистемы
	Windows,
	MacOS,
	Linux
;


метод ИспользуемаяОС(): ОперационныеСистемы
	знч имяОС = СредаИсполнения.ПолучитьСвойство("os.name")

	выбор когда имяОС.НачинаетсяС("windows", Истина)
		возврат ОперационныеСистемы.Windows

	когда имяОС.Содержит("mac", Истина)
		возврат ОперационныеСистемы.MacOS

	когда имяОС.Содержит("nux", Истина)
		возврат ОперационныеСистемы.Linux

	иначе
		выбросить новый ИсключениеНедопустимоеСостояние("Неизвестная ОС")
	;
;

/*
	* Работа с Git
	*/
метод Git_Clone(адресРепозитория: Строка, веткаРепозитория: Строка)
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("clone")
	параметрыПроцесса.Добавить("--quiet")
	параметрыПроцесса.Добавить("--single-branch")
	параметрыПроцесса.Добавить("--branch")
	параметрыПроцесса.Добавить(веткаРепозитория)
	параметрыПроцесса.Добавить(адресРепозитория)

	пер процесс = новый ПроцессОс("git", параметрыПроцесса)
	процесс.Запустить()

	исп результатВыполненияСкрипта = процесс.ПолучитьПотокВывода()
	пока не процесс.ОжидатьЗавершения(60с)
		знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакСтроку()
		если не текстРезультата.Пусто()
			Консоль.Записать(текстРезультата)
		;
	;
	знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакСтроку()
	если не текстРезультата.Пусто()
		Консоль.Записать(текстРезультата)
	;

	знч кодВозврата = процесс.ПолучитьКодВозврата()

	если кодВозврата == 0
		Консоль.Записать("Репозиторий успешно склонирован.")
	возврат
	;

	пер текстОшибки = "Код возврата: %кодВозврата"

	текстОшибки += Строки.Шаблон("\в\н$0\в\нgit $0", Строки.Соединить(параметрыПроцесса, " "))

	выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
;

/*
	* Путь к платформе проекта
	*/
метод ИсполняемыйФайлПлатформы(путьККонфигурацииЕДТ: Строка): Строка
	знч версияПлатформы = ВерсияПлатформыПроекта(путьККонфигурацииЕДТ)

	возврат ИсполняемыйФайлПлатформыПоМаксимальнойСборке(версияПлатформы)
;

метод ВерсияПлатформыПроекта(путьККонфигурацииЕДТ: Строка): Строка
	пер версияПлатформы: Строка = ""

	знч файлПроекта = новый Файл("%путьККонфигурацииЕДТ/DT-INF/PROJECT.PMF")
	если не файлПроекта.Существует()
		знч текстОшибки = "В указанном каталоге не найден файл PROJECT.PMF"
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
	;

	знч чтение = новый ЧтениеДанных(файлПроекта.ОткрытьПотокЧтения())
	пока не чтение.ЧтениеЗавершено()
		знч строкаФайла = чтение.ПрочитатьСтроку()
		знч ключИЗначение = строкаФайла.Разделить(": ")
		если ключИЗначение[0] == "Runtime-Version"
			версияПлатформы = ключИЗначение[1]
		прервать
		;
	;

	возврат версияПлатформы
;

метод ИсполняемыйФайлПлатформыПоМаксимальнойСборке(версияПлатформы: Строка): Строка
	знч установленныеПлатформы = УстановленныеПлатформы()
	если установленныеПлатформы.СодержитКлюч(версияПлатформы)
		знч путьКПлатформе = установленныеПлатформы.Получить(версияПлатформы)
		возврат "%путьКПлатформе/bin/1cv8"
	;

	знч максимальныеПлатформы = МаксимальныеПлатформы()
	если максимальныеПлатформы.СодержитКлюч(версияПлатформы)
		знч путьКПлатформе = максимальныеПлатформы.Получить(версияПлатформы)
		возврат "%путьКПлатформе/bin/1cv8"
	;

	знч текстОшибки = "Не найдена установленная платформа %версияПлатформы"
	выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
;

метод КаталогиПлатформы(): Массив
	пер списокКаталогов: Массив

	знч используемаяОС = ИспользуемаяОС()

	выбор используемаяОС
	когда ОперационныеСистемы.Windows
		знч каталог32 = СредаИсполнения.ПолучитьПеременную("ProgramFiles(x86)")
		списокКаталогов.Добавить("%каталог32\\1Cv8")
		знч каталог64 = СредаИсполнения.ПолучитьПеременную("ProgramFiles")
		списокКаталогов.Добавить("%каталог64\\1Cv8")
	когда ОперационныеСистемы.MacOS
		списокКаталогов.Добавить("/opt/1Cv8")
	когда ОперационныеСистемы.Linux
		списокКаталогов.Добавить("/opt/1C/v8.3/x86_64")
	;

	возврат списокКаталогов
;

метод УстановленныеПлатформы(): Соответствие
	пер установленныеПлатформы: Соответствие

	знч каталогиПлатформы = КаталогиПлатформы()

	знч настройкиПоискаФайлов = новый НастройкиПоискаФайлов()
	настройкиПоискаФайлов.ИсключитьФайлы(Истина)
	настройкиПоискаФайлов.МаксимальнаяГлубина(1)

	для каталогПлатформы из каталогиПлатформы
		знч найденныеФайлы = Файлы.Найти(каталогПлатформы, настройкиПоискаФайлов)
		для найденныйФайл из найденныеФайлы
			если не найденныйФайл.Имя.НачинаетсяС("8.3")
			продолжить
			;
			установленныеПлатформы.Вставить(найденныйФайл.Имя, найденныйФайл.Путь)
		;
	;

	возврат установленныеПлатформы
;

метод МаксимальныеПлатформы(): Соответствие
	знч установленныеПлатформы = УстановленныеПлатформы()

	пер максимальныеПлатформы: Соответствие

	для платформа из установленныеПлатформы
		знч разложенныйТекущийРелиз = платформа.Ключ.Разделить(".")

		пер релизБезВерсииМассивом = новый Массив(разложенныйТекущийРелиз)
		релизБезВерсииМассивом.УдалитьПоИндексу(3)

		знч релизБезВерсии = Строки.Соединить(релизБезВерсииМассивом, ".")

		если не максимальныеПлатформы.СодержитКлюч(релизБезВерсии)
			максимальныеПлатформы.Вставить(релизБезВерсии, платформа.Значение)
		продолжить
		;

		знч последнийРелиз = максимальныеПлатформы.Получить(релизБезВерсии)
		знч разложенныйПоследнийРелиз = последнийРелиз.Разделить(".")

		если разложенныйТекущийРелиз[3] > разложенныйПоследнийРелиз[3]
			максимальныеПлатформы.Вставить(релизБезВерсии, платформа.Значение)
		;
	;

	возврат максимальныеПлатформы
;

/*
	* Пакетный режим платформы
	*/
метод СтрокаСоединенияДляФайловойИБ(путьКИБ: Строка): Строка
	возврат "\"File=\"\"%путьКИБ\"\"\""
;

метод СтрокаСоединенияДляСервернойИБ(имяСервера: Строка, имяИБ: Строка): Строка
	возврат "\"Srvr=\"\"%имяСервера\"\";Ref=\"\"%имяИБ\"\";\""
;

метод CreateInfobase(строкаСоединения: Строка, имяФайлаПлатформы: Строка)
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("CREATEINFOBASE")
	параметрыПроцесса.Добавить(строкаСоединения)

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса, Истина)
	Консоль.Записать("ИБ успешно создана.")
;

метод CreateInfobaseFromTemplate(путьКДТ: Строка, строкаСоединения: Строка, имяФайлаПлатформы: Строка)
	если не (новый Файл(путьКДТ)).Существует()
		знч текстОшибки = "Файл %путьКДТ не существует."
		выбросить новый ИсключениеНедопустимыйАргумент(текстОшибки)
	;

	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("CREATEINFOBASE")
	параметрыПроцесса.Добавить(строкаСоединения)
	параметрыПроцесса.Добавить("/UseTemplate")
	параметрыПроцесса.Добавить(путьКДТ)

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса, Истина)
	Консоль.Записать("ИБ успешно создана.")
;

метод LoadConfigFromFiles(путьКФайламКонфигурации: Строка, строкаСоединения: Строка, имяФайлаПлатформы: Строка,
	имяПользователя: Строка = "", пароль: Строка = "")
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("DESIGNER")
	параметрыПроцесса.Добавить("/LoadConfigFromFiles")
	параметрыПроцесса.Добавить(путьКФайламКонфигурации)
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить(строкаСоединения)
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/DisableStartupMessages")
	параметрыПроцесса.Добавить("/DisableUnrecoverableErrorMessage")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса, Истина)
	Консоль.Записать("XML файлы конфигурации успешно загружены в ИБ.")
;

метод LoadCfg(путьКФайлуCF: Строка, строкаСоединения: Строка, имяФайлаПлатформы: Строка, имяПользователя: Строка = "",
	пароль: Строка = "")
	если не (новый Файл(путьКФайлуCF)).Существует()
		знч текстОшибки = "Файл %путьКФайлуCF не существует."
		выбросить новый ИсключениеНедопустимыйАргумент(текстОшибки)
	;

	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("DESIGNER")
	параметрыПроцесса.Добавить("/LoadCfg")
	параметрыПроцесса.Добавить(путьКФайлуCF)
	параметрыПроцесса.Добавить("-force")
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить(строкаСоединения)
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/DisableStartupMessages")
	параметрыПроцесса.Добавить("/DisableUnrecoverableErrorMessage")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса, Истина)
	Консоль.Записать("CF файл конфигурации успешно загружен в ИБ.")
;

метод UpdateDBCfg(строкаСоединения: Строка, имяФайлаПлатформы: Строка, имяПользователя: Строка = "", пароль: Строка = "")
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("DESIGNER")
	параметрыПроцесса.Добавить("/UpdateDBCfg")
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить(строкаСоединения)
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса, Истина)
	Консоль.Записать("Конфигурация БД успешно обновлена для конфигурации в ИБ.")
;

метод CreateDistributionFiles(путьКФайлуCF: Строка, строкаСоединения: Строка, имяФайлаПлатформы: Строка,
	имяПользователя: Строка = "", пароль: Строка = "")
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("DESIGNER")
	параметрыПроцесса.Добавить("/CreateDistributionFiles")
	параметрыПроцесса.Добавить("-cffile")
	параметрыПроцесса.Добавить(путьКФайлуCF)
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить(строкаСоединения)
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса, Истина)
	Консоль.Записать("CF Файл поставки успешно создан.")
;

метод LoadExtFromFiles(путьКФайламРасширения: Строка, имяРасширения: Строка, строкаСоединения: Строка,
	имяФайлаПлатформы: Строка, имяПользователя: Строка = "", пароль: Строка = "")
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("DESIGNER")
	параметрыПроцесса.Добавить("/LoadConfigFromFiles")
	параметрыПроцесса.Добавить(путьКФайламРасширения)
	параметрыПроцесса.Добавить("-Extension")
	параметрыПроцесса.Добавить(имяРасширения)
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить(строкаСоединения)
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса, Истина)
	Консоль.Записать("XML файлы расширения успешно загружены в ИБ.")
;

метод LoadExt(путьКФайлуCFE: Строка, имяРасширения: Строка, строкаСоединения: Строка, имяФайлаПлатформы: Строка,
	имяПользователя: Строка = "", пароль: Строка = "")
	
	если не (новый Файл(путьКФайлуCFE)).Существует()
		знч текстОшибки = "Файл %путьКФайлуCFE не существует."
		выбросить новый ИсключениеНедопустимыйАргумент(текстОшибки)
	;
	
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("DESIGNER")
	параметрыПроцесса.Добавить("/LoadCfg")
	параметрыПроцесса.Добавить(путьКФайлуCFE)
	параметрыПроцесса.Добавить("-Extension")
	параметрыПроцесса.Добавить(имяРасширения)
	параметрыПроцесса.Добавить("-force")
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить(строкаСоединения)
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса, Истина)
	Консоль.Записать("CFE файл расширения успешно загружен в ИБ.")
;

метод UpdateDBExt(имяРасширения: Строка, строкаСоединения: Строка, имяФайлаПлатформы: Строка, имяПользователя: Строка = "",
	пароль: Строка = "")
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("DESIGNER")
	параметрыПроцесса.Добавить("/UpdateDBCfg")
	параметрыПроцесса.Добавить("-Extension")
	параметрыПроцесса.Добавить(имяРасширения)
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить(строкаСоединения)
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса, Истина)
	Консоль.Записать("Конфигурация БД успешно обновлена для расширения в ИБ.")
;

метод DumpExt(путьКФайлуCFE: Строка, имяРасширения: Строка, строкаСоединения: Строка, имяФайлаПлатформы: Строка,
	имяПользователя: Строка = "", пароль: Строка = "")
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("DESIGNER")
	параметрыПроцесса.Добавить("/DumpCfg")
	параметрыПроцесса.Добавить(путьКФайлуCFE)
	параметрыПроцесса.Добавить("-Extension")
	параметрыПроцесса.Добавить(имяРасширения)
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить(строкаСоединения)
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса, Истина)
	Консоль.Записать("CFE Файл расширения успешно создан.")
;

метод DeleteCfgAllExtensions(строкаСоединения: Строка, имяФайлаПлатформы: Строка, имяПользователя: Строка = "",
	пароль: Строка = "")
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("DESIGNER")
	параметрыПроцесса.Добавить("/DeleteCfg")
	параметрыПроцесса.Добавить("-AllExtensions")
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить(строкаСоединения)
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса, Истина)
	Консоль.Записать("Конфигурация и все расширения удалены из ИБ.")
;

метод ExecuteCommand(именаКоманд: Строка, строкаСоединения: Строка, имяФайлаПлатформы: Строка, имяПользователя: Строка = "",
	пароль: Строка = "")
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("ENTERPRISE")
	параметрыПроцесса.Добавить("/C\"%именаКоманд\"")
	параметрыПроцесса.Добавить("/AllowExecuteScheduledJobs")
	параметрыПроцесса.Добавить("-Off")
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить(строкаСоединения)
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы + "c", параметрыПроцесса, Ложь)
	Консоль.Записать("Команда выполнена.")
;

метод ExecuteDataProcessor(имяВнешнейОбработки: Строка, вспомогательныеПараметры: Строка, строкаСоединения: Строка, имяФайлаПлатформы: Строка,
	имяПользователя: Строка = "", пароль: Строка = "", таймаут: Длительность = 0с)
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("ENTERPRISE")
	параметрыПроцесса.Добавить("/Execute")
	параметрыПроцесса.Добавить(имяВнешнейОбработки)
	если не вспомогательныеПараметры.Пусто()
		параметрыПроцесса.Добавить("/C\"%вспомогательныеПараметры\"")
	;
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить(строкаСоединения)
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы + "c", параметрыПроцесса, Ложь, таймаут)
	Консоль.Записать("Обработка выполнена.")
;

метод КодировкаПотокаВыводаПлатформы(): Строка
	если ИспользуемаяОС() == ОперационныеСистемы.Windows
		возврат "windows-1251"
	;

	возврат "UTF-8"
;

метод вывестиФайлЛога(файлЛога: Файл, кодировкаЛога: Строка, количествоВыведенныхСтрок: Число, удалитьЛог: Булево = Ложь): Число
	если не файлЛога.Существует()
		возврат 0
	;
	
	исп потокЛога = файлЛога.ОткрытьПотокЧтения()
	знч текстЛога = потокЛога.ПрочитатьКакСтроку(кодировкаЛога)
	пер строкиЛога = текстЛога.Разделить(Символы.НоваяСтрока)
	если строкиЛога.Размер() > количествоВыведенныхСтрок
		если количествоВыведенныхСтрок == 0
			Консоль.Записать(текстЛога)
		иначе
			строкиЛога.УдалитьДиапазон(0, количествоВыведенныхСтрок - 1)
			пер текстСообщения = Строки.Соединить(строкиЛога, Символы.НоваяСтрока)
			Консоль.Записать(текстСообщения)
		;
		количествоВыведенныхСтрок = строкиЛога.Размер()
	;
	потокЛога.Закрыть()
	
	если удалитьЛог
		Файлы.Удалить(файлЛога)
	;
	
	возврат количествоВыведенныхСтрок
;

метод ПолучитьКодВозвратаИзФайла(файлКодаВозврата: Файл): Число|Строка?
	если не файлКодаВозврата.Существует()
		возврат Неопределено
	;

	исп потокКодаВозврата = файлКодаВозврата.ОткрытьПотокЧтения()
	пер кодВозврата = потокКодаВозврата.ПрочитатьКакСтроку()
	если кодВозврата.Пусто()
		возврат Неопределено
	;
	
	если кодВозврата.ТолькоЦифры()
		возврат Число(кодВозврата)
	;
	
	возврат кодВозврата.Подстрока(1)
;

метод ВыполнитьКомандуПлатформыСОжиданием(имяКоманды: Строка, параметры: Массив, записыватьКодВозвратаВФайл: Булево, таймаут: Длительность = 0с)
	знч временныйФайлЛогов = Файлы.СоздатьВременныйФайл()
	знч временныйФайлКодВозврата = Файлы.СоздатьВременныйФайл()

	параметры.Добавить("/Out")
	параметры.Добавить(временныйФайлЛогов.Путь)
	если записыватьКодВозвратаВФайл
		параметры.Добавить("/DumpResult")
		параметры.Добавить(временныйФайлКодВозврата.Путь)
	;
	
	знч параметрыСтрокой = Строки.Соединить(параметры, " ")
	Консоль.Записать("\"%имяКоманды\" %параметрыСтрокой")
	пер процесс = новый ПроцессОс(имяКоманды, параметры)
	процесс.Запустить()

	пер времяОжидания = 0с
	пер количествоВыведенныхСтрок = 0
	пер кодВозврата = Неопределено
	пока не процесс.ОжидатьЗавершения(60с) и процесс.Живой()
		количествоВыведенныхСтрок = вывестиФайлЛога(временныйФайлЛогов, "utf-8", количествоВыведенныхСтрок)

		если записыватьКодВозвратаВФайл
			кодВозврата = ПолучитьКодВозвратаИзФайла(временныйФайлКодВозврата)
		иначе
			кодВозврата = процесс.ПолучитьКодВозврата()
		;
		если кодВозврата != Неопределено
			процесс.ОжидатьЗавершения(10с)
			прервать
		;

		если таймаут != 0с и таймаут <= времяОжидания
			пер текстОшибки = "При выполнении команды платформы превышено время ожидания выполнения %таймаут"
			процесс.Остановить()
			выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
		;
		времяОжидания += 60с
	;
	вывестиФайлЛога(временныйФайлЛогов, "utf-8", количествоВыведенныхСтрок, Истина)

	если процесс.Живой()
		процесс.Остановить()
	;

	если записыватьКодВозвратаВФайл
		кодВозврата = ПолучитьКодВозвратаИзФайла(временныйФайлКодВозврата)
	иначе
		кодВозврата = процесс.ПолучитьКодВозврата()
	;

	если кодВозврата == 0
		возврат
	;

	пер текстОшибки = "Код возврата: %кодВозврата"

	текстОшибки += Строки.Шаблон("\в\нКоманда: $0\в\нПараметры: $1", [имяКоманды, Строки.Соединить(параметры, " ")])
	выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
;

/*
	* Пакетный режим EDT
	*/
метод WorkspaceExport(путьККонфигурацииЕДТ: Строка, путьККонфигурацииПлатформы: Строка, путьКРабочейОбласти: Строка, вызыватьМсключение: Булево, версияЕДТ: Строка =
	""): Булево
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("-l")
	параметрыПроцесса.Добавить("error")
	если версияЕДТ.Пусто()
		параметрыПроцесса.Добавить("edt")
	иначе
		параметрыПроцесса.Добавить("edt@" + версияЕДТ)
	;
	параметрыПроцесса.Добавить("workspace")
	параметрыПроцесса.Добавить("export")
	параметрыПроцесса.Добавить("--project")
	параметрыПроцесса.Добавить(путьККонфигурацииЕДТ)
	параметрыПроцесса.Добавить("--configuration-files")
	параметрыПроцесса.Добавить(путьККонфигурацииПлатформы)
	параметрыПроцесса.Добавить("--workspace-location")
	параметрыПроцесса.Добавить(путьКРабочейОбласти)

	возврат ВыполнитьКомандуRingEDT(параметрыПроцесса, вызыватьМсключение)
;

метод WorkspaceValidate(файлРезультатовВалидации: Строка, путьККонфигурацииЕДТ: Строка, путьКРабочейОбласти: Строка, вызыватьМсключение: Булево, версияЕДТ: Строка =
	""): Булево
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("-l")
	параметрыПроцесса.Добавить("error")
	если версияЕДТ.Пусто()
		параметрыПроцесса.Добавить("edt")
	иначе
		параметрыПроцесса.Добавить("edt@" + версияЕДТ)
	;
	параметрыПроцесса.Добавить("workspace")
	параметрыПроцесса.Добавить("validate")
	параметрыПроцесса.Добавить("--project-list")
	параметрыПроцесса.Добавить(путьККонфигурацииЕДТ)
	параметрыПроцесса.Добавить("--workspace-location")
	параметрыПроцесса.Добавить(путьКРабочейОбласти)
	параметрыПроцесса.Добавить("--file")
	параметрыПроцесса.Добавить(файлРезультатовВалидации)

	возврат ВыполнитьКомандуRingEDT(параметрыПроцесса, вызыватьМсключение)
;

метод ВыполнитьКомандуRingEDT(параметры: Массив, вызыватьМсключение: Булево): Булево
	пер имяКоманды = ""
	знч версияОС = ИспользуемаяОС()
	выбор версияОС
	когда ОперационныеСистемы.Windows
		имяКоманды = "ring.cmd"
	иначе
		имяКоманды = "ring"
	;

	пер процесс = новый ПроцессОс(имяКоманды, параметры, Ложь)
	процесс.Запустить()
	исп результатВыполненияСкрипта = процесс.ПолучитьПотокВывода()

	пока не процесс.ОжидатьЗавершения(60с)
		знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакСтроку()
		если не текстРезультата.Пусто()
			Консоль.Записать(текстРезультата)
		;
	;

	знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакСтроку()
	если не текстРезультата.Пусто()
		Консоль.Записать(текстРезультата)
	;

	знч кодВозврата = процесс.ПолучитьКодВозврата()

	если кодВозврата == 0
	возврат Истина
	;

	пер текстОшибки = "Код возврата: %кодВозврата"

	текстОшибки += Строки.Шаблон("\в\нКоманда: $0\в\нПараметры: $1", [имяКоманды, Строки.Соединить(параметры, " ")])

	исп ошибкиВыполненияСкрипта = процесс.ПолучитьПотокОшибок()
	текстОшибки += "\в\н" + ошибкиВыполненияСкрипта.ПрочитатьКакСтроку(КодировкаПотокаВыводаПлатформы())
	
	если вызыватьМсключение
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
	;
	
	Консоль.Записать(текстОшибки)
	возврат Ложь
;

метод ЗаписатьОшибкиВФорматSonarQube(файлSonarQube: Строка, данныеОшибок: SonarqubeGenericFormat)
	знч файлПараметров = новый Файл(файлSonarQube)
	исп поток = файлПараметров.ОткрытьПотокЗаписи()

	СериализацияJson.ЗаписатьОбъект(поток, данныеОшибок)
;

структура ОписаниеСтрокиCodeQuality
	знч begin: Число
;

структура ОписаниеРасположенияCodeQuality
	знч path: Строка
	знч lines: ОписаниеСтрокиCodeQuality
;

перечисление ОшибкаCodeQualityКритичность
	blocker,
	critical,
	major,
	minor,
	info
;

структура ОписаниеОшибкиCodeQuality
	знч description: Строка
	знч fingerprint: Строка
	знч severity: ОшибкаCodeQualityКритичность
	знч location: ОписаниеРасположенияCodeQuality
;

метод ЗаписатьОшибкиВФорматCodeQuality(файлCodeQuality: Строка, ошибкиEDT: Массив)
	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")

	пер ошибкиCodeQuality = новый Массив()
	
	для ошибка из ошибкиEDT
		пер путьКОбъекту = ПутьКФайлуПоОбъекту(ошибка).Заменить("\\", "/")
		путьКОбъекту = "%{ошибка.проект}/%путьКОбъекту"
	
		знч файлМодуля = новый Файл("%CI_PROJECT_DIR/%путьКОбъекту")
		если не файлМодуля.Существует()
			продолжить
		;
	
		исп поток = файлМодуля.ОткрытьПотокЧтения()
		знч строкиМодуля = поток.ПрочитатьКакСтроку().Разделить(Символы.НоваяСтрока)
		пер родитель = ""
		для номерСтроки = 1 по ошибка.положение
			знч строкаМодуля = строкиМодуля[ошибка.положение - номерСтроки]
			если строкаМодуля.НачинаетсяС("Процедура", Истина)
				или строкаМодуля.НачинаетсяС("Функция", Истина)
				или строкаМодуля.НачинаетсяС("Procedure", Истина)
				или строкаМодуля.НачинаетсяС("Function", Истина)
				или строкаМодуля.НачинаетсяС("#Область", Истина)
				родитель = строкаМодуля
				прервать
			;
		;
		знч строкаОшибки = строкиМодуля[ошибка.положение - 1].Заменить(Символы.Таб, " ").Сократить()
	
		знч отпечатокОшибки = Строка(новый ХешированиеДанных(АлгоритмХеширования.Sha256)
			.ДобавитьДанные(ошибка.объект.ВБайты())
			.ДобавитьДанные(родитель.ВБайты())
			.ДобавитьДанные(ошибка.ид.ВБайты())
			.ДобавитьДанные(строкаОшибки.ВБайты())
			.Результат)
		
		пер критичность = ОшибкаCodeQualityКритичность.info
		выбор ошибка.критичность
		когда ОшибкаEDTКритичность.Блокирующая
			критичность = ОшибкаCodeQualityКритичность.blocker
			
		когда ОшибкаEDTКритичность.Критическая
			критичность = ОшибкаCodeQualityКритичность.critical
			
		когда ОшибкаEDTКритичность.Значительная
			критичность = ОшибкаCodeQualityКритичность.major
			
		когда ОшибкаEDTКритичность.Незначительная
			критичность = ОшибкаCodeQualityКритичность.minor
			
		;
		
		знч номерСтроки = новый ОписаниеСтрокиCodeQuality(ошибка.положение)
		знч положение = новый ОписаниеРасположенияCodeQuality(путьКОбъекту, номерСтроки)
		знч описаниеОшибки = новый ОписаниеОшибкиCodeQuality(
			ошибка.описание, отпечатокОшибки, критичность, положение)
	
		ошибкиCodeQuality.Добавить(описаниеОшибки)
	;

	знч файлПараметров = новый Файл(файлCodeQuality)
	исп поток = файлПараметров.ОткрытьПотокЗаписи()
	СериализацияJson.ЗаписатьОбъект(поток, ошибкиCodeQuality)
;

метод ЗаписатьОшибкиВФорматJUnit(файлJUnit: Строка, ошибкиEDT: Массив)
	знч файлПараметров = новый Файл(файлJUnit)
	исп поток = файлПараметров.ОткрытьПотокЗаписи()

	пер записьXML = новый ЗаписьXml(поток)

	пер количествоОшибок = 0
	для ошибка из ошибкиEDT // ОписаниеОшибкиEDT
		если ошибка.тип == SonarqubeType.BUG
			количествоОшибок += 1
		;
	;

	записьXML.ЗаписатьНачалоДокумента()
	
	записьXML.ЗаписатьНачалоЭлемента("testsuites")
	записьXML
		.ЗаписатьНачалоЭлемента("testsuite")
		.ЗаписатьАтрибут("name", "EDT Workspace Validate")
		.ЗаписатьАтрибут("errors", Строка(количествоОшибок))
		.ЗаписатьАтрибут("skipped", "0")
		.ЗаписатьАтрибут("tests", Строка(количествоОшибок))
		.ЗаписатьАтрибут("failures", "0")
		.ЗаписатьАтрибут("time", "0")
	
	для ошибка из ошибкиEDT
		если ошибка.тип != SonarqubeType.BUG
			продолжить
		;
		записьXML
			.ЗаписатьНачалоЭлемента("testcase")
			.ЗаписатьАтрибут("name", ошибка.ruleId)
			.ЗаписатьАтрибут("classname", ошибка.primaryLocation.filePath)
			.ЗаписатьАтрибут("time", "0")
	
		записьXML
			.ЗаписатьНачалоЭлемента("error")
			.ЗаписатьТекст("%{ошибка.primaryLocation.message}\в\нСтрока: %{ошибка.primaryLocation.textRange.startLine}")
			.ЗаписатьКонецЭлемента()
	
		записьXML.ЗаписатьКонецЭлемента()
	;
	
	записьXML.ЗаписатьКонецЭлемента()
	записьXML.ЗаписатьКонецЭлемента()
	
	записьXML.ЗаписатьКонецДокумента()
;

структура ОписаниеJunitTestSuites
	пер testSuites: Массив
;

структура ОписаниеJunitTestSuite
	пер name: Строка
	пер tests: Число
	пер errors: Число
	пер skipped: Число
	пер failures: Число
	пер time: Число
;

метод ПрочитатьОшибкиВФорматеJUnit(файлJUnit: Строка): ОписаниеJunitTestSuites
	знч файл = новый Файл(файлJUnit)
	исп поток = файл.ОткрытьПотокЧтения()

	пер testSuites = новый Массив()
	пер потокXml = новый ЧтениеXml(поток)
	пока потокXml.Следующий()
		если потокXml.ВидУзла != ВидУзлаXml.НачалоЭлемента
			продолжить
		;
		если потокXml.Имя == "testsuite"
			знч name = потокXml.ЗначениеАтрибута("name")
			знч tests = Число(потокXml.ЗначениеАтрибута("tests"))
			знч errors = Число(потокXml.ЗначениеАтрибута("errors"))
			знч skipped = Число(потокXml.ЗначениеАтрибута("skipped"))
			знч failures = Число(потокXml.ЗначениеАтрибута("failures"))
			знч time = Число(потокXml.ЗначениеАтрибута("time"))
			пер testSuite = новый ОписаниеJunitTestSuite(name, tests, errors, skipped, failures, time)
			testSuites.Добавить(testSuite)
		;
	;

	пер ошибкиJunit = новый ОписаниеJunitTestSuites(testSuites)
	
	возврат ошибкиJunit
;

метод ОшибкиEDT(файлРезультатовВалидации: Строка): Массив
	пер ошибки = новый Массив()

	знч файл = новый Файл(файлРезультатовВалидации)
	исп поток = файл.ОткрытьПотокЧтения()

	знч чтение = новый ЧтениеДанных(поток)
	пока не чтение.ЧтениеЗавершено()
		знч строкаДанных = чтение.ПрочитатьСтроку()
		если строкаДанных.Пусто()
			продолжить
		;

		знч описаниеОшибки = ОшибкаEDT(строкаДанных)
		если описаниеОшибки == Неопределено
			продолжить
		;

		ошибки.Добавить(описаниеОшибки)
	;

	возврат ошибки
;

метод ОшибкиВФорматеSonarQube(ошибкиEDT: Массив): SonarqubeGenericFormat
	пер issues = новый Массив()
	пер rules = новый Массив()
	пер соответствиеПравил = новый Соответствие()

	для описаниеОшибки из ошибкиEDT
		знч issue = IssueИзОшибкиEDT(описаниеОшибки)
		issues.Добавить(issue)

		соответствиеПравил.Вставить(issue.ruleId, RuleИзIssue(issue))
	;

	для правило из соответствиеПравил
		rules.Добавить(правило.Значение)
	;

	возврат новый SonarqubeGenericFormat(issues, rules)
;


перечисление ОшибкаEDTКритичность
	Блокирующая,
	Критическая,
	Значительная,
	Незначительная,
	Тривиальная
;

перечисление ОшибкаEDTТип
	Предупреждение,
	Производительность,
	РазработкаИИспользованиеБиблиотек,
	СтандартыРазработкиИнтерфейсов,
	Безопасность,
	Переносимость,
	СтандартыКодирования,
	Орфография
;


структура ОписаниеОшибкиEDT
	знч создано: ДатаВремя
	знч критичность: ОшибкаEDTКритичность
	знч тип: ОшибкаEDTТип
	знч проект: Строка
	знч объект: Строка
	знч положение: Число
	знч описание: Строка
	пер источник: Строка
	пер ид: Строка
	пер контекст: Массив

	конструктор(создано, критичность, тип, проект, ид, объект, положение, описание)
;


метод ОшибкаEDT(строкаДанных: Строка): ОписаниеОшибкиEDT?
	знч массивДанных = строкаДанных.Разделить(Символы.Таб, Истина)

	если массивДанных[5].Пусто() или не массивДанных[5].НачинаетсяС("строка")
		возврат Неопределено
	;

	знч создано = новый ДатаВремя(массивДанных[0].Подстрока(0, 19))
	знч положение = Число(массивДанных[5].Подстрока(7))

	пер критичность = ОшибкаEDTКритичность.Тривиальная
	выбор массивДанных[1]
	когда "Блокирующая"
		критичность = ОшибкаEDTКритичность.Блокирующая
		
	когда "Критическая"
		критичность = ОшибкаEDTКритичность.Критическая
		
	когда "Значительная"
		критичность = ОшибкаEDTКритичность.Значительная
		
	когда "Незначительная"
		критичность = ОшибкаEDTКритичность.Незначительная
		
	когда "Тривиальная"
		критичность = ОшибкаEDTКритичность.Тривиальная
		
	иначе
		критичность = ОшибкаEDTКритичность.Значительная
//		выбросить новый ИсключениеНедопустимоеСостояние("Неизвестная критичность %{массивДанных[1]}")
		
	;

	пер тип = ОшибкаEDTТип.СтандартыКодирования

	пер ид = массивДанных[3]
	если ид.Пусто()
		ид = "edt-legacy"
	;

	пер описаниеОшибки = новый ОписаниеОшибкиEDT(создано, критичность, тип, массивДанных[2], ид, массивДанных[4],
		положение, массивДанных[6])
	описаниеОшибки.источник = "EDT"

	возврат описаниеОшибки
;

метод ПутьКФайлуПоОбъекту(описаниеОшибки: ОписаниеОшибкиEDT): Строка
	пер массивОбъекта = описаниеОшибки.объект.Разделить(".")

	пер объектМетаданных = массивОбъекта[0]
	выбор объектМетаданных
	когда "РегистрБухгалтерии"
		объектМетаданных = "AccountingRegisters"
	когда "РегистрНакопления"
		объектМетаданных = "AccumulationRegisters"
	когда "БизнесПроцесс"
		объектМетаданных = "BusinessProcesses"
	когда "РегистрРасчета"
		объектМетаданных = "CalculationRegisters"
	когда "Справочник"
		объектМетаданных = "Catalogs"
	когда "ПланСчетов"
		объектМетаданных = "ChartsOfAccounts"
	когда "ПланВидовРасчета"
		объектМетаданных = "ChartsOfCalculationTypes"
	когда "ПланВидовХарактеристик"
		объектМетаданных = "ChartsOfCharacteristicTypes"
	когда "ГруппаКоманд"
		объектМетаданных = "CommandGroups"
	когда "ОбщаяКоманда"
		объектМетаданных = "CommonCommands"
	когда "ОбщаяФорма"
		объектМетаданных = "CommonForms"
	когда "ОбщийМодуль"
		объектМетаданных = "CommonModules"
	когда "Конфигурация"
		объектМетаданных = "Configuration"
	когда "Константа"
		объектМетаданных = "Constants"
	когда "Обработка"
		объектМетаданных = "DataProcessors"
	когда "ЖурналДокумента"
		объектМетаданных = "DocumentJournals"
	когда "Документ"
		объектМетаданных = "Documents"
	когда "Перечисление"
		объектМетаданных = "Enums"
	когда "ПодпискаНаСобытие"
		объектМетаданных = "EventSubscriptions"
	когда "ПланОбмена"
		объектМетаданных = "ExchangePlans"
	когда "КритерийОтбора"
		объектМетаданных = "FilterCriteria"
	когда "HTTPСервис"
		объектМетаданных = "HTTPServices"
	когда "РегистрСведений"
		объектМетаданных = "InformationRegisters"
	когда "Отчет"
		объектМетаданных = "Reports"
	когда "ХранилищеНастроек"
		объектМетаданных = "SettingsStorages"
	когда "Задача"
		объектМетаданных = "Tasks"
	когда "WebСервис"
		объектМетаданных = "WebServices"
	когда "WSСсылка"
		объектМетаданных = "WSReferences"
	иначе
		выбросить новый ИсключениеНедопустимоеСостояние("Неизвестный объект метаданных %{описаниеОшибки.объект}")
	;

	пер имяМодуля = массивОбъекта[массивОбъекта.Размер() - 1]
	выбор имяМодуля
	когда "МодульКоманды"
		имяМодуля = "CommandModule"
	когда "МодульУправляемогоПриложения"
		имяМодуля = "ManagedApplicationModule"
	когда "МодульМенеджера"
		имяМодуля = "ManagerModule"
	когда "Модуль"
		имяМодуля = "Module"
	когда "МодульОбъекта"
		имяМодуля = "ObjectModule"
	когда "МодульОбычногоПриложения"
		имяМодуля = "OrdinaryApplicationModule"
	когда "МодульНабораЗаписей"
		имяМодуля = "RecordSetModule"
	когда "МодульСеанса"
		имяМодуля = "SessionModule"
	когда "МодульМенеджераЗначения"
		имяМодуля = "ValueManagerModule"
	иначе
		выбросить новый ИсключениеНедопустимоеСостояние("Неизвестный модуль %{описаниеОшибки.объект}")
	;

	массивОбъекта.УдалитьПоИндексу(0)
	массивОбъекта.УдалитьПоИндексу(массивОбъекта.Размер() - 1)
	пер наименованиеОбъекта = массивОбъекта[0]
	массивОбъекта.УдалитьПоИндексу(0)
	если массивОбъекта.Размер() == 1
		если массивОбъекта[0] != "Форма"
			выбросить новый ИсключениеНедопустимоеСостояние("Не удалось определить объект %{описаниеОшибки.объект}")
		;
	
	иначе если массивОбъекта.Размер() > 1
		выбор массивОбъекта[0]
		когда "Форма"
			наименованиеОбъекта += "\\Forms\\%{массивОбъекта[1]}"
		когда "Команда"
			наименованиеОбъекта += "\\Commands\\%{массивОбъекта[1]}"
		иначе
			выбросить новый ИсключениеНедопустимоеСостояние("Неизвестный вид объекта %{массивОбъекта[0]}")
		;
	
	;

	возврат "src\\%объектМетаданных\\%наименованиеОбъекта\\%имяМодуля.bsl"
;

метод IssueИзОшибкиEDT(описаниеОшибки: ОписаниеОшибкиEDT): SonarqubeIssue
	знч engineId = описаниеОшибки.источник
	знч ruleId = описаниеОшибки.ид
	пер primaryLocation = новый SonarqubeLocation(описаниеОшибки.описание, ПутьКФайлуПоОбъекту(описаниеОшибки))
	primaryLocation.textRange = новый SonarqubeTextRange(описаниеОшибки.положение)


	пер severity = SonarqubeSeverity.INFO
	выбор описаниеОшибки.критичность
	когда ОшибкаEDTКритичность.Блокирующая
		severity = SonarqubeSeverity.BLOCKER
		
	когда ОшибкаEDTКритичность.Критическая
		severity = SonarqubeSeverity.CRITICAL
		
	когда ОшибкаEDTКритичность.Значительная
		severity = SonarqubeSeverity.MAJOR
		
	когда ОшибкаEDTКритичность.Незначительная
		severity = SonarqubeSeverity.MINOR
		
	;

	пер type = SonarqubeType.BUG
	выбор описаниеОшибки.тип
	когда ОшибкаEDTТип.Безопасность
		type = SonarqubeType.VULNERABILITY
		
	когда ОшибкаEDTТип.Орфография
		type = SonarqubeType.CODE_SMELL
		
	когда ОшибкаEDTТип.СтандартыКодирования
		type = SonarqubeType.CODE_SMELL
		
	;

	знч issue = новый SonarqubeIssue(engineId, ruleId, primaryLocation, type, severity)

	возврат issue
;

метод RuleИзIssue(issue: SonarqubeIssue): BslLsRule
	возврат новый BslLsRule(issue.engineId, issue.ruleId, issue.ruleId, issue.type, issue.severity, issue.ruleId)
;


/*
	* GitLab API
	*/
структура Commits_List_Data
	пер id: Строка
	пер ref_name: Строка
	пер since: Строка
	пер until: Строка
	пер path: Строка
	пер all: Булево
	пер with_stats: Булево
	пер first_parent: Булево
	пер order: Строка = "default"

	конструктор(id)
;

структура Releases_Create_Data
	пер id: Строка
	пер name: Строка
	пер tag_name: Строка
	пер description: Строка
	пер ref: Строка
	пер assets: Releases_Create_Assets_Data
	пер released_at: ДатаВремя

	конструктор(id, tag_name, ref, assets, released_at)
;


перечисление Releases_Create_Asset_LinkType
	other умолчание,
	runbook,
	image,
	package
;


структура Releases_Create_Assets_Data
	пер links: Массив
;

структура Releases_Create_Assets_Link_Data
	пер name: Строка
	пер url: Строка
//    пер filepath: Строка
	пер link_type: Releases_Create_Asset_LinkType

	конструктор(name, url)
;

структура ОписаниеФайлаСсылкиАссетов
	пер имя: Строка
	пер путь: Строка
;

структура ОписаниеАссетов
	пер имяПроекта: Строка
	пер идЗадания: Строка
	пер списокФайловСсылок: Массив
	пер описание: Строка
;


метод Commits_List_Since(имяВетки: Строка, имяПроекта: Строка, токен: Строка, адресСервера: Строка,
	датаС: ДатаВремя): Массив
	возврат Commits_List(имяВетки, имяПроекта, токен, адресСервера, "since", датаС)
;

метод Commits_List_Until(имяВетки: Строка, имяПроекта: Строка, токен: Строка, адресСервера: Строка,
	датаПо: ДатаВремя): Массив
	возврат Commits_List(имяВетки, имяПроекта, токен, адресСервера, "until", датаПо)
;

метод Commits_List(имяВетки: Строка, имяПроекта: Строка, токен: Строка, адресСервера: Строка, условиеНаДату: Строка,
	дата: ДатаВремя): Массив
	знч имяПроектаКодированное = имяПроекта.Заменить("/", "\%2F")

	пер строкаЗапроса = "https://%адресСервера/api/v4/projects/%имяПроектаКодированное/repository/commits?ref_name=%имяВетки"
	если не условиеНаДату.Пусто()
		строкаЗапроса += "&%условиеНаДату=%дата"
	;
	пер запрос = КлиентHttp.ЗапросGet(строкаЗапроса)
	запрос.ДобавитьЗаголовок("PRIVATE-TOKEN", токен)

	исп ответ = запрос.Выполнить()

	если ответ.КодСостояния != 200
		знч текстОшибки = Строки.Шаблон(
			"Строка запроса: $0\в\нКод состояния: $1, причина: $2\в\нТекст ответа:\в\н$3\в\н", [строкаЗапроса, ответ
			.КодСостояния, ответ.Причина, ответ.Тело.ПрочитатьКакСтроку()])
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
	;

	знч данные = СериализацияJson.ПрочитатьМассив(ответ.Тело)

	возврат данные
;

метод Commits_LastDate_Since(имяВетки: Строка, имяПроекта: Строка, токен: Строка, адресСервера: Строка,
	датаС: ДатаВремя): ДатаВремя
	знч коммиты = Commits_List_Since(имяВетки, имяПроекта, токен, адресСервера, датаС)

	если коммиты.Пусто()
		возврат новый ДатаВремя(1, 1, 1)
	;

	возврат новый ДатаВремя(коммиты.Первый().Получить("created_at").ПодстрокаСНачала(19))
;

метод Commits_LastDate_Until(имяВетки: Строка, имяПроекта: Строка, токен: Строка, адресСервера: Строка,
	датаПо: ДатаВремя): ДатаВремя
	знч коммиты = Commits_List_Until(имяВетки, имяПроекта, токен, адресСервера, датаПо)

	если коммиты.Пусто()
		возврат новый ДатаВремя(1, 1, 1)
	;

	возврат новый ДатаВремя(коммиты.Первый().Получить("created_at").ПодстрокаСНачала(19))
;

метод Jobs_Cancel(идЗадания: Строка, идПроекта: Строка, токен: Строка, адресСервера: Строка)
	знч строкаЗапроса = "https://%адресСервера/api/v4/projects/%идПроекта/jobs/%идЗадания/cancel"
	пер запрос = КлиентHttp.ЗапросPost(строкаЗапроса)
	запрос.ДобавитьЗаголовок("PRIVATE-TOKEN", токен)

	исп ответ = запрос.Выполнить()

	если ответ.КодСостояния != 201
		знч текстОшибки = Строки.Шаблон(
			"Строка запроса: $0\в\нКод состояния: $1, причина: $2\в\нТекст ответа:\в\н$3\в\н", [строкаЗапроса, ответ
			.КодСостояния, ответ.Причина, ответ.Тело.ПрочитатьКакСтроку()])
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
	;

	Консоль.Записать("Задание прервано.")
;

метод JobArtifacts_DownloadFile(имяФайла: Строка, имяЗадания: Строка, имяВетки: Строка, идПроекта: Строка, токен: Строка,
	адресСервера: Строка): Булево
	знч строкаЗапроса = "https://%адресСервера/api/v4/projects/%идПроекта/jobs/artifacts/%имяВетки/raw/%имяФайла?job=%имяЗадания"
	пер запрос = КлиентHttp.ЗапросGet(строкаЗапроса)
	запрос.ДобавитьЗаголовок("PRIVATE-TOKEN", токен)

	пер ответ = запрос.Выполнить()

	если ответ.КодСостояния != 200 и ответ.КодСостояния != 404
		пер текстОтвета = ""
		попытка
			текстОтвета = ответ.Тело.ПрочитатьКакСтроку()
		поймать исключение: любой
			Консоль.Записать("Было исключение %исключение")
		;

		знч текстОшибки = Строки.Шаблон(
			"Строка запроса: $0\в\нКод состояния: $1, причина: $2\в\нТекст ответа:\в\н$3\в\н", [строкаЗапроса, ответ
			.КодСостояния, ответ.Причина, текстОтвета])
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
	;

	пер результат = Ложь
	если ответ.КодСостояния == 200
		исп потокЗаписи = новый Файл(имяФайла).ОткрытьПотокЗаписи()
		ответ.Тело.КопироватьВ(потокЗаписи)

		Консоль.Записать("Файл загружен.")
		результат = Истина
	иначе
		Консоль.Записать("Файл для загрузки отсутствует.")
	;

	попытка
		ответ.Закрыть()
	поймать исключение: любой
		Консоль.Записать("Было исключение %исключение")
	;

	возврат результат
;

метод Pipelines_ListJobs(идСборочнойЛинии: Строка, идПроекта: Строка, токен: Строка, адресСервера: Строка)
	знч строкаЗапроса = "https://%адресСервера/api/v4/projects/%идПроекта/pipelines/%идСборочнойЛинии/jobs?scope[]=success"
	пер запрос = КлиентHttp.ЗапросGet(строкаЗапроса)
	запрос.ДобавитьЗаголовок("PRIVATE-TOKEN", токен)

	исп ответ = запрос.Выполнить()

	если ответ.КодСостояния != 200
		знч текстОшибки = Строки.Шаблон(
			"Строка запроса: $0\в\нКод состояния: $1, причина: $2\в\нТекст ответа:\в\н$3\в\н", [строкаЗапроса, ответ
			.КодСостояния, ответ.Причина, ответ.Тело.ПрочитатьКакСтроку()])
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
	;

	знч данные = СериализацияJson.ПрочитатьОбъект(ответ.Тело)

	Консоль.Записать("Список заданий получен.")
;

метод Releases_Create(датаРелиза: ДатаВремя, тег: Строка, имя: Строка, описание: Строка,
	ссылки: Массив, идКоммита: Строка, идПроекта: Строка, токен: Строка, адресСервера: Строка)
	пер ассеты = новый Releases_Create_Assets_Data(ссылки)
	пер параметры = новый Releases_Create_Data(идПроекта, тег, идКоммита, ассеты, датаРелиза)
	параметры.name = имя
	параметры.description = описание

	исп поток = новый СтроковыйПотокЗаписи()
	СериализацияJson.ЗаписатьОбъект(поток, параметры)

	знч строкаЗапроса = "https://%адресСервера/api/v4/projects/%идПроекта/releases"
	пер запрос = КлиентHttp.ЗапросPost(строкаЗапроса)
	запрос.ДобавитьЗаголовок("JOB-TOKEN", токен)

	запрос.УстановитьТипСодержимого("application/json")
	запрос.УстановитьТело(поток.ВСтроку())

	исп ответ = запрос.Выполнить()

	если ответ.КодСостояния != 201
		знч текстОшибки = Строки.Шаблон(
			"Строка запроса: $0\в\нКод состояния: $1, причина: $2\в\нТекст ответа:\в\н$3\в\нТекст запроса:\в\н$4", [
			строкаЗапроса, ответ.КодСостояния, ответ.Причина, ответ.Тело.ПрочитатьКакСтроку(), поток.ВСтроку()])
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
	;

	Консоль.Записать("Релиз создан.")
;

метод Releases_List(идПроекта: Строка, токен: Строка, адресСервера: Строка): Массив
	знч строкаЗапроса = "https://%адресСервера/api/v4/projects/%идПроекта/releases"
	пер запрос = КлиентHttp.ЗапросGet(строкаЗапроса)
	запрос.ДобавитьЗаголовок("PRIVATE-TOKEN", токен)

	исп ответ = запрос.Выполнить()

	если ответ.КодСостояния != 200
		знч текстОшибки = Строки.Шаблон(
			"Строка запроса: $0\в\нКод состояния: $1, причина: $2\в\нТекст ответа:\в\н$3\в\н", [строкаЗапроса, ответ
			.КодСостояния, ответ.Причина, ответ.Тело.ПрочитатьКакСтроку()])
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
	;

	знч данные = СериализацияJson.ПрочитатьМассив(ответ.Тело)

	возврат данные
;

метод Releases_LastDate(идПроекта: Строка, токен: Строка, адресСервера: Строка): ДатаВремя
	знч релизы = Releases_List(идПроекта, токен, адресСервера)

	если релизы.Пусто()
		возврат новый ДатаВремя(1, 1, 1)
	;

	возврат новый ДатаВремя(релизы[0]["released_at"].Подстрока(0, 19))
;

метод ЗаписатьОписаниеАссетов(файлОписанияАссертов: Строка, имяПроекта: Строка, идЗадания: Строка, списокФайловСсылок: Массив, описание: Строка)
	знч описаниеАссетов = новый ОписаниеАссетов(имяПроекта, идЗадания, списокФайловСсылок, описание)

	знч файлПараметров = новый Файл(файлОписанияАссертов)
	исп поток = файлПараметров.ОткрытьПотокЗаписи()
	СериализацияJson.ЗаписатьОбъект(поток, описаниеАссетов)
;

метод ПрочитатьОписаниеАссетов(файлОписанияАссертов: Строка): ОписаниеАссетов
	знч файл = новый Файл(файлОписанияАссертов)
	исп поток = файл.ОткрытьПотокЧтения()

	пер описаниеАссетов = СериализацияJson.ПрочитатьОбъект(поток, Тип(ОписаниеАссетов)) как ОписаниеАссетов

	пер файлыСсылки = новый Массив()
	для файлСсылка из описаниеАссетов.списокФайловСсылок
		знч описаниеФайлаСсылки = новый ОписаниеФайлаСсылкиАссетов(файлСсылка["имя"], файлСсылка["путь"])
		файлыСсылки.Добавить(описаниеФайлаСсылки)
	;
	описаниеАссетов.списокФайловСсылок = файлыСсылки

	возврат описаниеАссетов
;

метод Commits_List_Data_НастройкиЗаписиJson(данные: Commits_List_Data): НастройкиЗаписиОбъектовJson
	пер настройки = новый НастройкиЗаписиОбъектовJson()

	пер игнорируемыеСвойства = новый Массив()
	знч всеСтроковыеСвойства = ["ref_name", "since", "until", "path"]
	для свойство из всеСтроковыеСвойства
		если (данные[свойство] как Строка).Пусто()
			игнорируемыеСвойства.Добавить(свойство)
		;
	;
	знч всеБулевоСвойства = ["all", "with_stats", "first_parent"]
	для свойство из всеБулевоСвойства
		если не (данные[свойство] как Булево)
			игнорируемыеСвойства.Добавить(свойство)
		;
	;

	настройки.ИгнорируемыеСвойства = {Тип(Commits_List_Data) : новый Множество(игнорируемыеСвойства)}

	возврат настройки
;

/* 
	* Sonarqube API
	*/
структура SonarqubeGenericFormat
	знч issues: Массив
	знч rules: Массив
;

структура SonarqubeTextRange
	знч startLine: Число

//	пер endLine: Число = 0
//	пер startColumn: Число = 0
//	пер endColumn: Число = 0
	конструктор(startLine)
;

структура SonarqubeLocation
	знч message: Строка
	знч filePath: Строка
	пер textRange: SonarqubeTextRange?

	конструктор(message, filePath)
;


перечисление SonarqubeType
	BUG,
	VULNERABILITY,
	CODE_SMELL
;

перечисление SonarqubeSeverity
	BLOCKER,
	CRITICAL,
	MAJOR,
	MINOR,
	INFO
;


структура SonarqubeIssue
	знч engineId: Строка
	знч ruleId: Строка
	знч primaryLocation: SonarqubeLocation
	знч type: SonarqubeType
	знч severity: SonarqubeSeverity

//	пер effortMinutes: Число = 0
//	пер secondaryLocations: SonarqubeLocation?
	конструктор(engineId, ruleId, primaryLocation, type, severity)
;

структура BslLsRule
	знч engineId: Строка
	знч ruleId: Строка
	знч name: Строка
	знч type: SonarqubeType
	знч severity: SonarqubeSeverity
	знч description: Строка
;


метод DecToHex(десятичноеЧисло: Число): Строка
	пер база = 16

	пер результат = ""

	пока десятичноеЧисло != 0
		пер поз = десятичноеЧисло % база

		результат = "0123456789ABCDEF".Символ(поз) + результат

		десятичноеЧисло = (десятичноеЧисло / база).ЦелаяЧасть()
	;
	результат = "0000" + результат

	возврат результат.ПодстрокаСКонца(4)
;

метод СтрокуВUnicode(исходнаяСтрока: Строка): Строка
	пер результат = ""

	пер кодыДопустимыхСимволов = новый Массив()
	кодыДопустимыхСимволов.Добавить(1105) // "ё"
	кодыДопустимыхСимволов.Добавить(1025) // "Ё"

	для номер = 0 по исходнаяСтрока.Длина() - 1
		знч кодСимвола = Символы.ПолучитьКод(исходнаяСтрока.Символ(номер))
		знч оставить = ((кодСимвола < 1040) или (кодСимвола > 1103)) и (кодыДопустимыхСимволов.Найти(кодСимвола)
			== Неопределено)
		если оставить
			результат += исходнаяСтрока.Символ(номер)
		иначе
			результат += "\\u" + DecToHex(кодСимвола)
		;
	;

	возврат результат
;

метод СохранитьНастройкиСканера(имяФайлаПараметров: Строка, сервер: Строка, ключПроекта: Строка, наименованиеПроекта: Строка,
	версияПроекта: Строка, путьКонфигурацииЕДТ: Строка, файлSonarQube: Строка)
	знч файлПараметров = новый Файл(имяФайлаПараметров)
	исп поток = файлПараметров.ОткрытьПотокЗаписи()

	пер запись = новый ЗаписьДанных(поток)

	знч наименованиеПроектаUnicode = СтрокуВUnicode(наименованиеПроекта)
	знч путьКонфигурацииЕДТUnicode = СтрокуВUnicode(путьКонфигурацииЕДТ.Заменить("\\", "/"))
	знч файлSonarQubeUnicode = СтрокуВUnicode(файлSonarQube.Заменить("\\", "/"))

	запись.ЗаписатьСтроку("sonar.host.url=%сервер")
	запись.ЗаписатьСтроку("sonar.projectKey=%ключПроекта")
	запись.ЗаписатьСтроку("sonar.projectName=%наименованиеПроектаUnicode (%ключПроекта)")
	запись.ЗаписатьСтроку("sonar.projectVersion=%версияПроекта")
	запись.ЗаписатьСтроку("sonar.sourceEncoding=UTF-8")
	запись.ЗаписатьСтроку("sonar.inclusions=**/*.bsl")
	запись.ЗаписатьСтроку("sonar.sources=src")
	запись.ЗаписатьСтроку("sonar.projectBaseDir=%путьКонфигурацииЕДТUnicode")
	запись.ЗаписатьСтроку("sonar.scm.enabled=true")
	запись.ЗаписатьСтроку("sonar.scm.provider=git")
	запись.ЗаписатьСтроку("sonar.externalIssuesReportPaths=%файлSonarQubeUnicode")
	запись.ЗаписатьСтроку("sonar.bsl.languageserver.enabled=false")
;

метод ЗапуститьSonarScanner(имяФайлаПараметров: Строка, токен: Строка, путьSonarScanner: Строка)
	пер имяКоманды = ""
	знч версияОС = ИспользуемаяОС()
	выбор версияОС
	когда ОперационныеСистемы.Windows
		имяКоманды = "%путьSonarScanner/bin/sonar-scanner.bat"
	иначе
		имяКоманды = "%путьSonarScanner/bin/sonar-scanner"
	;

	знч временныйФайлЛогов = Файлы.СоздатьВременныйФайл()

	пер параметры = новый Массив()
	параметры.Добавить("-Dproject.settings=\"%имяФайлаПараметров\"")
	параметры.Добавить("-D\"sonar.login=%токен\"")
//	параметры.Добавить(">%{временныйФайлЛогов.Путь}")

	знч представление = Строки.Шаблон("\в\нКоманда: $0\в\нПараметры: $1", [имяКоманды, Строки.Соединить(параметры, " ")])
	Консоль.Записать(представление)

	пер процесс = новый ПроцессОс(имяКоманды, параметры)
	процесс.Запустить()
	пер количествоВыведенныхСтрок = 0
	пер кодВозврата = Неопределено
	пока не процесс.ОжидатьЗавершения(60с) и процесс.Живой()
		знч текстПотока = процесс.ПолучитьПотокВывода().ПрочитатьКакТекст(КодировкаПотокаВыводаПлатформы())
		если не текстПотока.Пусто()
			Консоль.Записать(текстПотока)
		;

//		количествоВыведенныхСтрок = вывестиФайлЛога(временныйФайлЛогов, КодировкаПотокаВыводаПлатформы(), количествоВыведенныхСтрок)
		
		кодВозврата = процесс.ПолучитьКодВозврата()
		если кодВозврата != Неопределено
			процесс.ОжидатьЗавершения(10с)
			прервать
		;
	;
//	вывестиФайлЛога(временныйФайлЛогов, КодировкаПотокаВыводаПлатформы(), количествоВыведенныхСтрок, Истина)

	если процесс.Живой()
		процесс.Остановить()
	;

	знч текстПотока = процесс.ПолучитьПотокВывода().ПрочитатьКакТекст(КодировкаПотокаВыводаПлатформы())
	если не текстПотока.Пусто()
		Консоль.Записать(текстПотока)
	;
	
	кодВозврата = процесс.ПолучитьКодВозврата()

	если кодВозврата == 0
		Консоль.Записать("SonarQube Scanner успешно запущен.")
		возврат
	;

	знч текстОшибки = "Код возврата: %кодВозврата"
	выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
;
