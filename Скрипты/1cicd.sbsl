#!/usr/bin/executor

/*******************************************************************************
 * Copyright (c) 2020 Alexander Kapralov and Contributors
 * This program and the accompanying materials are made available under
 * the terms of the BSD 3-Clause License which is available at
 * https://spdx.org/licenses/BSD-3-Clause.html#licenseText
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Contributors:
 *    
 *
 ******************************************************************************/

конст ВЕРСИЯ_EDT = "2020.6.2"

конст ИМЯ_КАТАЛОГА_ПРИКЛАДНОЙ_СБОРКИ = "build/bin"
конст ИМЯ_КАТАЛОГА_ТЕСТОВОЙ_СБОРКИ = "build/util"
конст ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ = "ci"
конст ИМЯ_КАТАЛОГА_РЕЗУЛЬТАТОВ_ТЕСТОВ = "test"

конст КОМАНДЫ_ОБНОВЛЕНИЯ_БД = "ВыполнитьОбновлениеИЗавершитьРаботу;РегламентныеЗаданияОтключены"


метод Скрипт(режим: Строка)
	выбор режим
	когда "build"
		знч CUSTOM_RELEASE_DATE = СредаИсполнения.ПолучитьПеременную("CUSTOM_RELEASE_DATE")
		если CUSTOM_RELEASE_DATE.Пусто()
			СобратьПоследнийРелиз()
		иначе
			СобратьПоследнийРелиз() // Доработать на СобратьРелизНаДату()
	;
	когда "buildMR"
		СобратьРелизДляСлияния()
	когда "testCore"
		ПротестироватьКод()
	когда "testUI"
		ПротестироватьИнтерфейс()
	когда "pages"
		ОпубликоватьОтчет()
	когда "release"
		ОпубликоватьРелиз()
	иначе
		Консоль.Записать("Неизвестный режим %режим")
	;
;

метод СобратьПоследнийРелиз()
	знч WP = СредаИсполнения.ПолучитьПеременную("WP")

	знч CI_JOB_ID = СредаИсполнения.ПолучитьПеременную("CI_JOB_ID")
	знч CI_JOB_TOKEN = СредаИсполнения.ПолучитьПеременную("CI_JOB_TOKEN")
	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")
	знч CI_PROJECT_ID = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_ID")
	знч CI_PROJECT_PATH = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_PATH")
	знч CI_PROJECT_NAMESPACE = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_NAMESPACE")
	знч CI_SERVER_HOST = СредаИсполнения.ПолучитьПеременную("CI_SERVER_HOST")

	знч RELEASES_TOKEN = СредаИсполнения.ПолучитьПеременную("RELEASES_TOKEN")

	пер ошибкиТокенов = ""
	если RELEASES_TOKEN.Пусто()
		ошибкиТокенов += "В переменную RELEASES_TOKEN необходимо поместить api token репозитория Релизов." + Символы.НоваяСтрока
	;

	знч настройки = ПрочитатьНастройкиСборки("%CI_PROJECT_DIR")

	если СредаИсполнения.ПолучитьПеременную(настройки.Конфигурация.ПеременнаяТокена).Пусто()
		ошибкиТокенов += "В переменную %{настройки.Конфигурация
		.ПеременнаяТокена} необходимо поместить read api token репозитория %{настройки.Конфигурация.Имя}." + Символы.НоваяСтрока
	;
	для репозиторийРасширения из настройки.ПрикладныеРасширения
		если СредаИсполнения.ПолучитьПеременную(репозиторийРасширения.ПеременнаяТокена).Пусто()
			ошибкиТокенов += "В переменную %{репозиторийРасширения
				.ПеременнаяТокена} необходимо поместить read api token репозитория %{репозиторийРасширения.Имя}."
				+ Символы.НоваяСтрока
		;
	;
	для репозиторийРасширения из настройки.ТестовыеРасширения
		если СредаИсполнения.ПолучитьПеременную(репозиторийРасширения.ПеременнаяТокена).Пусто()
			ошибкиТокенов += "В переменную %{репозиторийРасширения
				.ПеременнаяТокена} необходимо поместить read api token репозитория %{репозиторийРасширения.Имя}."
				+ Символы.НоваяСтрока
		;
	;

	если не ошибкиТокенов.Пусто()
		выбросить новый ИсключениеНедопустимоеСостояние(ошибкиТокенов)
	;

	знч полныйПутьПрикладнойСборки = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_ПРИКЛАДНОЙ_СБОРКИ"
	знч полныйПутьТестовойСборки = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_ТЕСТОВОЙ_СБОРКИ"

	Консоль.Записать("Создать каталог: %полныйПутьПрикладнойСборки")
	Файлы.СоздатьКаталог(полныйПутьПрикладнойСборки)

	Консоль.Записать("Создать каталог: %полныйПутьТестовойСборки")
	Файлы.СоздатьКаталог(полныйПутьТестовойСборки)

	знч полныйПутьСлужебнойСборки = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ"
	Консоль.Записать("Создать каталог: %полныйПутьСлужебнойСборки")
	Файлы.СоздатьКаталог(полныйПутьСлужебнойСборки)

	знч адресРепозиторияКонфигурации = "https://gitlab-ci-token:%CI_JOB_TOKEN@%CI_SERVER_HOST/%CI_PROJECT_NAMESPACE/%{настройки
		.Конфигурация
	.Имя}.git"
	Консоль.Записать("Git_Clone: %адресРепозиторияКонфигурации %{настройки.Конфигурация.Ветка}")
	Git_Clone(адресРепозиторияКонфигурации, настройки.Конфигурация.Ветка)

	знч путьКонфигурацииЕДТ = "%CI_PROJECT_DIR/%{настройки.Конфигурация.Имя}/%{настройки.Конфигурация.Проект}"
	Консоль.Записать("ИсполняемыйФайлПлатформы: %путьКонфигурацииЕДТ")
	знч исполняемыйФайлПлатформы = ИсполняемыйФайлПлатформы(путьКонфигурацииЕДТ)

	знч путьИБ = "%CI_PROJECT_DIR/temp/db"
	Консоль.Записать("CreateInfobase: %путьИБ %исполняемыйФайлПлатформы")
	CreateInfobase(путьИБ, исполняемыйФайлПлатформы)

	Консоль.Записать("Releases_LastDate: %CI_PROJECT_ID %CI_SERVER_HOST")
	знч датаПоследнегоРелиза = Releases_LastDate(CI_PROJECT_ID, RELEASES_TOKEN, CI_SERVER_HOST)
	Консоль.Записать("Дата последнего релиза = %датаПоследнегоРелиза")

	пер пересобиратьОсновнуюКонфигурацию = Ложь
	пер репозиторииДляПересборки = новый Массив()
	пер путиСборки = новый Соответствие()

	пер датаНовогоРелиза = датаПоследнегоРелиза

	знч результатПроверки = ПроверитьКоммитыРепозиторияДляПоследнегоРелиза(настройки.Конфигурация, датаПоследнегоРелиза)
	если результатПроверки != Неопределено
		пересобиратьОсновнуюКонфигурацию = Истина

		если результатПроверки > датаНовогоРелиза
			датаНовогоРелиза = результатПроверки
			Консоль.Записать("Новой датой релиза становится %датаНовогоРелиза")
	;
	иначе
		если не СкачатьАртефактРепозитория(настройки.Конфигурация, ИМЯ_КАТАЛОГА_ПРИКЛАДНОЙ_СБОРКИ, Ложь)
			пересобиратьОсновнуюКонфигурацию = Истина
		;
	;

	для репозиторийРасширения из настройки.ПрикладныеРасширения
		путиСборки.Вставить(репозиторийРасширения.Имя, полныйПутьПрикладнойСборки)

		знч результатПроверкиРасширения = ПроверитьКоммитыРепозиторияДляПоследнегоРелиза(репозиторийРасширения, датаПоследнегоРелиза)
		если результатПроверкиРасширения != Неопределено
			репозиторииДляПересборки.Добавить(репозиторийРасширения)

			если результатПроверкиРасширения > датаНовогоРелиза
				датаНовогоРелиза = результатПроверкиРасширения
				Консоль.Записать("Новой датой релиза становится %датаНовогоРелиза")
		;
		иначе
			если не СкачатьАртефактРепозитория(репозиторийРасширения, ИМЯ_КАТАЛОГА_ПРИКЛАДНОЙ_СБОРКИ, Истина)
				репозиторииДляПересборки.Добавить(репозиторийРасширения)
			;
		;
	;

	для репозиторийРасширения из настройки.ТестовыеРасширения
		путиСборки.Вставить(репозиторийРасширения.Имя, полныйПутьТестовойСборки)

		знч результатПроверкиРасширения = ПроверитьКоммитыРепозиторияДляПоследнегоРелиза(репозиторийРасширения, датаПоследнегоРелиза)
		если результатПроверкиРасширения != Неопределено
			репозиторииДляПересборки.Добавить(репозиторийРасширения)

			если результатПроверкиРасширения > датаНовогоРелиза
				датаНовогоРелиза = результатПроверкиРасширения
				Консоль.Записать("Новой датой релиза становится %датаНовогоРелиза")
		;
		иначе
			если не СкачатьАртефактРепозитория(репозиторийРасширения, ИМЯ_КАТАЛОГА_ТЕСТОВОЙ_СБОРКИ, Истина)
				репозиторииДляПересборки.Добавить(репозиторийРасширения)
			;
		;
	;

	если не пересобиратьОсновнуюКонфигурацию и репозиторииДляПересборки.Пусто()
		Консоль.Записать("Jobs_Cancel: %CI_JOB_ID %CI_PROJECT_ID %CI_SERVER_HOST")
		Jobs_Cancel(CI_JOB_ID, CI_PROJECT_ID, RELEASES_TOKEN, CI_SERVER_HOST)
	возврат
	;

	Консоль.Записать("Дата нового релиза = %датаНовогоРелиза")
	пер файлДатаНовогоРелиза = Файлы.Создать("%ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ/new_release_date.txt")
	исп потокЗаписиДатаНовогоРелиза = файлДатаНовогоРелиза.ОткрытьПотокЗаписи()
	потокЗаписиДатаНовогоРелиза.Записать(датаНовогоРелиза.Форматировать("гггг-ММ-дд'T'ЧЧ:мм:сс"))

	знч файлКонфигурации = "%полныйПутьПрикладнойСборки/1cv8.cf"
	если пересобиратьОсновнуюКонфигурацию
		знч путьКонфигурацииПлатформы = "%CI_PROJECT_DIR/temp/src_%{настройки.Конфигурация.Имя}"
		Консоль.Записать("WorkspaceExport: %путьКонфигурацииЕДТ %путьКонфигурацииПлатформы %WP")
		WorkspaceExport(путьКонфигурацииЕДТ, путьКонфигурацииПлатформы, WP, ВЕРСИЯ_EDT)

		попытка
			знч файлПоставки = "%путьКонфигурацииПлатформы/Ext/ParentConfigurations.bin"
			Консоль.Записать("Удалить файл: %файлПоставки")
			Файлы.Удалить(файлПоставки)
		поймать исключение: любой
			Консоль.Записать("Было исключение %исключение")
		;
		попытка
			знч каталогПоставки = "%путьКонфигурацииПлатформы/Ext/ParentConfigurations"
			Консоль.Записать("Удалить каталог: %каталогПоставки")
			Файлы.Удалить(каталогПоставки)
		поймать исключение: любой
			Консоль.Записать("Было исключение %исключение")
		;

		Консоль.Записать("LoadConfigFromFiles: %путьКонфигурацииПлатформы %путьИБ %исполняемыйФайлПлатформы")
		LoadConfigFromFiles(путьКонфигурацииПлатформы, путьИБ, исполняемыйФайлПлатформы)

		Консоль.Записать("UpdateDBCfg: %путьИБ %исполняемыйФайлПлатформы")
		UpdateDBCfg(путьИБ, исполняемыйФайлПлатформы)

		Консоль.Записать("CreateDistributionFiles: %файлКонфигурации %путьИБ %исполняемыйФайлПлатформы")
		CreateDistributionFiles(файлКонфигурации, путьИБ, исполняемыйФайлПлатформы)
	иначе
		Консоль.Записать("LoadCfg: %файлКонфигурации %путьИБ %исполняемыйФайлПлатформы")
		LoadCfg(файлКонфигурации, путьИБ, исполняемыйФайлПлатформы)

		Консоль.Записать("UpdateDBCfg: %путьИБ %исполняемыйФайлПлатформы")
		UpdateDBCfg(путьИБ, исполняемыйФайлПлатформы)
	;

	для репозиторий из репозиторииДляПересборки
		знч адресРепозитория = "https://gitlab-ci-token:%CI_JOB_TOKEN@%CI_SERVER_HOST/%CI_PROJECT_NAMESPACE/%{репозиторий
			.Имя}.git"
		Консоль.Записать("Git_Clone: %адресРепозитория %{репозиторий.Ветка}")
		Git_Clone(адресРепозитория, репозиторий.Ветка)

		пер путьРасширенияЕДТ = "%CI_PROJECT_DIR/%{репозиторий.Имя}/%{репозиторий.Проект}"
		если не (новый Файл(путьРасширенияЕДТ)).Существует()
			путьРасширенияЕДТ = "%CI_PROJECT_DIR/%{репозиторий.Имя}/%{настройки.Конфигурация.Проект}.%{репозиторий
				.Проект}"
		;
		знч путьРасширенияПлатформы = "%CI_PROJECT_DIR/temp/src_%{репозиторий.Имя}"
		Консоль.Записать("WorkspaceExport: %путьРасширенияЕДТ %путьРасширенияПлатформы %WP")
		WorkspaceExport(путьРасширенияЕДТ, путьРасширенияПлатформы, WP, ВЕРСИЯ_EDT)

		Консоль.Записать("LoadExtFromFiles: %путьРасширенияПлатформы %{репозиторий.Проект} %{путьИБ} %исполняемыйФайлПлатформы")
		LoadExtFromFiles(путьРасширенияПлатформы, репозиторий.Проект, путьИБ, исполняемыйФайлПлатформы)

		Консоль.Записать("UpdateDBExt: %путьИБ %исполняемыйФайлПлатформы")
		UpdateDBExt(репозиторий.Проект, путьИБ, исполняемыйФайлПлатформы)

		знч путьСборкиРасширения = путиСборки.Получить(репозиторий.Имя)
		знч файлРасширения = "%путьСборкиРасширения/%{репозиторий.Проект}.cfe"
		Консоль.Записать("DumpDBExt: %файлРасширения %{репозиторий.Проект} %путьИБ %исполняемыйФайлПлатформы")
		DumpExt(файлРасширения, репозиторий.Проект, путьИБ, исполняемыйФайлПлатформы)
	;

	пер списокДвоичныхФайлов = новый Массив()
	знч каталогСборкиПроекта = новый Файл(CI_PROJECT_DIR)
	для файл из Файлы.Найти(ИМЯ_КАТАЛОГА_ПРИКЛАДНОЙ_СБОРКИ)
		знч путьВнутриСборки = файл.Путь.Удалить(каталогСборкиПроекта.Путь)
		списокДвоичныхФайлов.Добавить(путьВнутриСборки)
	;
	знч имяФайлаАссетов = "%ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ/assets_bin.json"
	Консоль.Записать("ЗаписатьОписаниеАссетов: %имяФайлаАссетов %CI_PROJECT_PATH %CI_JOB_ID")
	ЗаписатьОписаниеАссетов(имяФайлаАссетов, CI_PROJECT_PATH, CI_JOB_ID, списокДвоичныхФайлов)

	знч логФайлыРабочейОбласти = "%WP/.metadata/"
	пер настройкиПоиска = новый НастройкиПоискаФайлов()
	настройкиПоиска.ИмяСодержит(".log")
	для файл из Файлы.Найти(логФайлыРабочейОбласти, настройкиПоиска)
		Консоль.Записать("Удалить файл: %{файл.Путь}")
		Файлы.Удалить(файл)
	;
;

метод СобратьРелизДляСлияния()
	знч WP = СредаИсполнения.ПолучитьПеременную("WP")

	знч CI_JOB_ID = СредаИсполнения.ПолучитьПеременную("CI_JOB_ID")
	знч CI_JOB_TOKEN = СредаИсполнения.ПолучитьПеременную("CI_JOB_TOKEN")
	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")
	знч CI_PROJECT_ID = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_ID")
	знч CI_PROJECT_PATH = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_PATH")
	знч CI_PROJECT_NAMESPACE = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_NAMESPACE")
	знч CI_SERVER_HOST = СредаИсполнения.ПолучитьПеременную("CI_SERVER_HOST")

	знч RELEASES_TOKEN = СредаИсполнения.ПолучитьПеременную("RELEASES_TOKEN")

	пер ошибкиТокенов = ""
	если RELEASES_TOKEN.Пусто()
		ошибкиТокенов += "В переменную RELEASES_TOKEN необходимо поместить api token репозитория Релизов." + Символы.НоваяСтрока
	;

	знч настройки = ПрочитатьНастройкиСборки("%CI_PROJECT_DIR")

	если СредаИсполнения.ПолучитьПеременную(настройки.Конфигурация.ПеременнаяТокена).Пусто()
		ошибкиТокенов += "В переменную %{настройки.Конфигурация
		.ПеременнаяТокена} необходимо поместить read api token репозитория %{настройки.Конфигурация.Имя}." + Символы.НоваяСтрока
	;
	для репозиторийРасширения из настройки.ПрикладныеРасширения
		если СредаИсполнения.ПолучитьПеременную(репозиторийРасширения.ПеременнаяТокена).Пусто()
			ошибкиТокенов += "В переменную %{репозиторийРасширения
				.ПеременнаяТокена} необходимо поместить read api token репозитория %{репозиторийРасширения.Имя}."
				+ Символы.НоваяСтрока
		;
	;
	для репозиторийРасширения из настройки.ТестовыеРасширения
		если СредаИсполнения.ПолучитьПеременную(репозиторийРасширения.ПеременнаяТокена).Пусто()
			ошибкиТокенов += "В переменную %{репозиторийРасширения
				.ПеременнаяТокена} необходимо поместить read api token репозитория %{репозиторийРасширения.Имя}."
				+ Символы.НоваяСтрока
		;
	;

	если не ошибкиТокенов.Пусто()
		выбросить новый ИсключениеНедопустимоеСостояние(ошибкиТокенов)
	;

	знч полныйПутьПрикладнойСборки = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_ПРИКЛАДНОЙ_СБОРКИ"
	знч полныйПутьТестовойСборки = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_ТЕСТОВОЙ_СБОРКИ"

	Консоль.Записать("Создать каталог: %полныйПутьПрикладнойСборки")
	Файлы.СоздатьКаталог(полныйПутьПрикладнойСборки)

	Консоль.Записать("Создать каталог: %полныйПутьТестовойСборки")
	Файлы.СоздатьКаталог(полныйПутьТестовойСборки)

	знч полныйПутьСлужебнойСборки = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ"
	Консоль.Записать("Создать каталог: %полныйПутьСлужебнойСборки")
	Файлы.СоздатьКаталог(полныйПутьСлужебнойСборки)

	знч адресРепозиторияКонфигурации = "https://gitlab-ci-token:%CI_JOB_TOKEN@%CI_SERVER_HOST/%CI_PROJECT_NAMESPACE/%{настройки
		.Конфигурация
	.Имя}.git"
	Консоль.Записать("Git_Clone: %адресРепозиторияКонфигурации %{настройки.Конфигурация.Ветка}")
	Git_Clone(адресРепозиторияКонфигурации, настройки.Конфигурация.Ветка)

	знч путьКонфигурацииЕДТ = "%CI_PROJECT_DIR/%{настройки.Конфигурация.Имя}/%{настройки.Конфигурация.Проект}"
	Консоль.Записать("ИсполняемыйФайлПлатформы: %путьКонфигурацииЕДТ")
	знч исполняемыйФайлПлатформы = ИсполняемыйФайлПлатформы(путьКонфигурацииЕДТ)

	знч путьИБ = "%CI_PROJECT_DIR/temp/db"
	Консоль.Записать("CreateInfobase: %путьИБ %исполняемыйФайлПлатформы")
	CreateInfobase(путьИБ, исполняемыйФайлПлатформы)

	знч имяРепозиторияРелизов = "%CI_PROJECT_NAMESPACE\%2Freleases"
	Консоль.Записать("Releases_LastDate: %имяРепозиторияРелизов %CI_SERVER_HOST")
	знч датаПоследнегоРелиза = Releases_LastDate(имяРепозиторияРелизов, RELEASES_TOKEN, CI_SERVER_HOST)
	Консоль.Записать("Дата последнего релиза = %датаПоследнегоРелиза")

	знч запросНаСлияние = ПараметрыЗапросаНаСлияние()

	пер пересобиратьОсновнуюКонфигурацию = Ложь
	пер репозиторииДляПересборки = новый Массив()
	пер путиСборки = новый Соответствие()

	если настройки.Конфигурация.Имя == запросНаСлияние.имяПроекта
		пересобиратьОсновнуюКонфигурацию = Истина
	иначе
		знч результатПроверки = ПроверитьКоммитыРепозиторияДляПоследнегоРелиза(настройки.Конфигурация, датаПоследнегоРелиза)
		если результатПроверки != Неопределено
			пересобиратьОсновнуюКонфигурацию = Истина
	
		иначе
			если не СкачатьАртефактРепозитория(настройки.Конфигурация, ИМЯ_КАТАЛОГА_ПРИКЛАДНОЙ_СБОРКИ, Ложь)
				пересобиратьОсновнуюКонфигурацию = Истина
			;
		;
	;
	
	для репозиторийРасширения из настройки.ПрикладныеРасширения
		путиСборки.Вставить(репозиторийРасширения.Имя, полныйПутьПрикладнойСборки)

		если репозиторийРасширения.Имя == запросНаСлияние.имяПроекта
			репозиторииДляПересборки.Добавить(репозиторийРасширения)
		иначе
			знч результатПроверкиРасширения = ПроверитьКоммитыРепозиторияДляПоследнегоРелиза(репозиторийРасширения, датаПоследнегоРелиза)
			если результатПроверкиРасширения != Неопределено
				репозиторииДляПересборки.Добавить(репозиторийРасширения)
	
			иначе
				если не СкачатьАртефактРепозитория(репозиторийРасширения, ИМЯ_КАТАЛОГА_ПРИКЛАДНОЙ_СБОРКИ, Истина)
					репозиторииДляПересборки.Добавить(репозиторийРасширения)
				;
			;
	
			если настройки.Конфигурация.Имя == запросНаСлияние.имяПроекта
				пересобиратьОсновнуюКонфигурацию = Истина
			;
		;
	;

	для репозиторийРасширения из настройки.ТестовыеРасширения
		путиСборки.Вставить(репозиторийРасширения.Имя, полныйПутьТестовойСборки)

		если репозиторийРасширения.Имя == запросНаСлияние.имяПроекта
			репозиторииДляПересборки.Добавить(репозиторийРасширения)
		иначе
			знч результатПроверкиРасширения = ПроверитьКоммитыРепозиторияДляПоследнегоРелиза(репозиторийРасширения, датаПоследнегоРелиза)
			если результатПроверкиРасширения != Неопределено
				репозиторииДляПересборки.Добавить(репозиторийРасширения)
	
			иначе
				если не СкачатьАртефактРепозитория(репозиторийРасширения, ИМЯ_КАТАЛОГА_ТЕСТОВОЙ_СБОРКИ, Истина)
					репозиторииДляПересборки.Добавить(репозиторийРасширения)
				;
			;
		;
	;

	если не пересобиратьОсновнуюКонфигурацию и репозиторииДляПересборки.Пусто()
		Консоль.Записать("Jobs_Cancel: %CI_JOB_ID %CI_PROJECT_ID %CI_SERVER_HOST")
		Jobs_Cancel(CI_JOB_ID, CI_PROJECT_ID, RELEASES_TOKEN, CI_SERVER_HOST)
		возврат
	;

	знч файлКонфигурации = "%полныйПутьПрикладнойСборки/1cv8.cf"
	если пересобиратьОсновнуюКонфигурацию
		знч путьКонфигурацииПлатформы = "%CI_PROJECT_DIR/temp/src_%{настройки.Конфигурация.Имя}"
		Консоль.Записать("WorkspaceExport: %путьКонфигурацииЕДТ %путьКонфигурацииПлатформы %WP")
		WorkspaceExport(путьКонфигурацииЕДТ, путьКонфигурацииПлатформы, WP, ВЕРСИЯ_EDT)

		попытка
			знч файлПоставки = "%путьКонфигурацииПлатформы/Ext/ParentConfigurations.bin"
			Консоль.Записать("Удалить файл: %файлПоставки")
			Файлы.Удалить(файлПоставки)
		поймать исключение: любой
			Консоль.Записать("Было исключение %исключение")
		;
		попытка
			знч каталогПоставки = "%путьКонфигурацииПлатформы/Ext/ParentConfigurations"
			Консоль.Записать("Удалить каталог: %каталогПоставки")
			Файлы.Удалить(каталогПоставки)
		поймать исключение: любой
			Консоль.Записать("Было исключение %исключение")
		;

		Консоль.Записать("LoadConfigFromFiles: %путьКонфигурацииПлатформы %путьИБ %исполняемыйФайлПлатформы")
		LoadConfigFromFiles(путьКонфигурацииПлатформы, путьИБ, исполняемыйФайлПлатформы)

		Консоль.Записать("UpdateDBCfg: %путьИБ %исполняемыйФайлПлатформы")
		UpdateDBCfg(путьИБ, исполняемыйФайлПлатформы)

		Консоль.Записать("CreateDistributionFiles: %файлКонфигурации %путьИБ %исполняемыйФайлПлатформы")
		CreateDistributionFiles(файлКонфигурации, путьИБ, исполняемыйФайлПлатформы)
	иначе
		Консоль.Записать("LoadCfg: %файлКонфигурации %путьИБ %исполняемыйФайлПлатформы")
		LoadCfg(файлКонфигурации, путьИБ, исполняемыйФайлПлатформы)

		Консоль.Записать("UpdateDBCfg: %путьИБ %исполняемыйФайлПлатформы")
		UpdateDBCfg(путьИБ, исполняемыйФайлПлатформы)
	;

	для репозиторий из репозиторииДляПересборки
		знч адресРепозитория = "https://gitlab-ci-token:%CI_JOB_TOKEN@%CI_SERVER_HOST/%CI_PROJECT_NAMESPACE/%{репозиторий
			.Имя}.git"
		Консоль.Записать("Git_Clone: %адресРепозитория %{репозиторий.Ветка}")
		Git_Clone(адресРепозитория, репозиторий.Ветка)

		пер путьРасширенияЕДТ = "%CI_PROJECT_DIR/%{репозиторий.Имя}/%{репозиторий.Проект}"
		если не (новый Файл(путьРасширенияЕДТ)).Существует()
			путьРасширенияЕДТ = "%CI_PROJECT_DIR/%{репозиторий.Имя}/%{настройки.Конфигурация.Проект}.%{репозиторий
				.Проект}"
		;
		знч путьРасширенияПлатформы = "%CI_PROJECT_DIR/temp/src_%{репозиторий.Имя}"
		Консоль.Записать("WorkspaceExport: %путьРасширенияЕДТ %путьРасширенияПлатформы %WP")
		WorkspaceExport(путьРасширенияЕДТ, путьРасширенияПлатформы, WP, ВЕРСИЯ_EDT)

		Консоль.Записать("LoadExtFromFiles: %путьРасширенияПлатформы %{репозиторий.Проект} %{путьИБ} %исполняемыйФайлПлатформы")
		LoadExtFromFiles(путьРасширенияПлатформы, репозиторий.Проект, путьИБ, исполняемыйФайлПлатформы)

		Консоль.Записать("UpdateDBExt: %путьИБ %исполняемыйФайлПлатформы")
		UpdateDBExt(репозиторий.Проект, путьИБ, исполняемыйФайлПлатформы)

		знч путьСборкиРасширения = путиСборки.Получить(репозиторий.Имя)
		знч файлРасширения = "%путьСборкиРасширения/%{репозиторий.Проект}.cfe"
		Консоль.Записать("DumpDBExt: %файлРасширения %{репозиторий.Проект} %путьИБ %исполняемыйФайлПлатформы")
		DumpExt(файлРасширения, репозиторий.Проект, путьИБ, исполняемыйФайлПлатформы)
	;

	пер списокДвоичныхФайлов = новый Массив()
	знч каталогСборкиПроекта = новый Файл(CI_PROJECT_DIR)
	для файл из Файлы.Найти(ИМЯ_КАТАЛОГА_ПРИКЛАДНОЙ_СБОРКИ)
		знч путьВнутриСборки = файл.Путь.Удалить(каталогСборкиПроекта.Путь)
		списокДвоичныхФайлов.Добавить(путьВнутриСборки)
	;
	знч имяФайлаАссетов = "%ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ/assets_bin.json"
	Консоль.Записать("ЗаписатьОписаниеАссетов: %имяФайлаАссетов %CI_PROJECT_PATH %CI_JOB_ID")
	ЗаписатьОписаниеАссетов(имяФайлаАссетов, CI_PROJECT_PATH, CI_JOB_ID, списокДвоичныхФайлов)

	знч логФайлыРабочейОбласти = "%WP/.metadata/"
	пер настройкиПоиска = новый НастройкиПоискаФайлов()
	настройкиПоиска.ИмяСодержит(".log")
	для файл из Файлы.Найти(логФайлыРабочейОбласти, настройкиПоиска)
		Консоль.Записать("Удалить файл: %{файл.Путь}")
		Файлы.Удалить(файл)
	;
;

метод ПротестироватьКод()
	знч WP = СредаИсполнения.ПолучитьПеременную("WP")

	знч CI_JOB_TOKEN = СредаИсполнения.ПолучитьПеременную("CI_JOB_TOKEN")
	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")
	знч CI_PROJECT_NAMESPACE = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_NAMESPACE")
	знч CI_SERVER_HOST = СредаИсполнения.ПолучитьПеременную("CI_SERVER_HOST")

	знч SONARQUBE_TOKEN = СредаИсполнения.ПолучитьПеременную("SONARQUBE_TOKEN")

	знч настройки = ПрочитатьНастройкиСборки("%CI_PROJECT_DIR")

	пер ошибкиТокенов = ""

	если не настройки.СерверSonarQube.Пусто() и СредаИсполнения.ПолучитьПеременную("SONARQUBE_TOKEN").Пусто()
		ошибкиТокенов += "В переменную SONARQUBE_TOKEN необходимо поместить token SonarQube." + Символы.НоваяСтрока
	;

	если не ошибкиТокенов.Пусто()
		выбросить новый ИсключениеНедопустимоеСостояние(ошибкиТокенов)
	;

	знч полныйПутьРезультатовТестов = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_РЕЗУЛЬТАТОВ_ТЕСТОВ"

	Консоль.Записать("Создать каталог: %полныйПутьРезультатовТестов")
	Файлы.СоздатьКаталог(полныйПутьРезультатовТестов)
	Консоль.Записать("Создать каталог: %полныйПутьРезультатовТестов/junit")
	Файлы.СоздатьКаталог("%полныйПутьРезультатовТестов/junit")

	знч адресРепозиторияКонфигурации = "https://gitlab-ci-token:%CI_JOB_TOKEN@%CI_SERVER_HOST/%CI_PROJECT_NAMESPACE/%{настройки
		.Конфигурация
	.Имя}.git"
	Консоль.Записать("Git_Clone: %адресРепозиторияКонфигурации %{настройки.Конфигурация.Ветка}")
	Git_Clone(адресРепозиторияКонфигурации, настройки.Конфигурация.Ветка)

	знч файлРезультатовВалидации = "%полныйПутьРезультатовТестов/%{настройки.Конфигурация.Имя}.tsv"
	знч путьКонфигурацииЕДТ = "%CI_PROJECT_DIR/%{настройки.Конфигурация.Имя}/%{настройки.Конфигурация.Проект}"
	Консоль.Записать("WorkspaceValidate: %файлРезультатовВалидации %путьКонфигурацииЕДТ %WP")
	WorkspaceValidate(файлРезультатовВалидации, путьКонфигурацииЕДТ, WP, ВЕРСИЯ_EDT)

	знч данныеОшибок = ОшибкиВФорматеSonarCube(файлРезультатовВалидации)

	знч файлSonarQube = "%полныйПутьРезультатовТестов/%{настройки.Конфигурация.Имя}.json"
	Консоль.Записать("ЗаписатьОшибкиВФорматSonarCube: %файлSonarQube %файлРезультатовВалидации")
	ЗаписатьОшибкиВФорматSonarCube(файлSonarQube, данныеОшибок)

	знч файлJunit = "%полныйПутьРезультатовТестов/junit/%{настройки.Конфигурация.Имя}.xml"
	Консоль.Записать("ЗаписатьОшибкиВФорматJUnit: %файлJunit %файлРезультатовВалидации")
	ЗаписатьОшибкиВФорматJUnit(файлJunit, данныеОшибок)

	если не настройки.СерверSonarQube.Пусто()
		знч файлПараметровСканера = "%CI_PROJECT_DIR/sonar-project-%{настройки.Конфигурация.Имя}.properties"
		знч ключПроекта = "%CI_PROJECT_NAMESPACE-%{настройки.Конфигурация.Имя}"

		знч тегРелиза = ДатаНовогоРелиза().Форматировать("гггг-ММ-дд")

		Консоль.Записать("СохранитьНастройкиСканера: %файлПараметровСканера %{настройки.СерверSonarQube} %ключПроекта %{настройки
			.Конфигурация
		.Проект} %тегРелиза %путьКонфигурацииЕДТ %файлSonarQube")
		СохранитьНастройкиСканера(файлПараметровСканера, настройки.СерверSonarQube, ключПроекта, настройки.Конфигурация
		.Проект, тегРелиза, путьКонфигурацииЕДТ, файлSonarQube)

		Консоль.Записать("ЗапуститьSonarScanner: %файлПараметровСканера")
		ЗапуститьSonarScanner(файлПараметровСканера, SONARQUBE_TOKEN)
	;
;

метод ПротестироватьИнтерфейс()
	знч CI_JOB_TOKEN = СредаИсполнения.ПолучитьПеременную("CI_JOB_TOKEN")
	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")
	знч CI_PROJECT_NAMESPACE = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_NAMESPACE")
	знч CI_SERVER_HOST = СредаИсполнения.ПолучитьПеременную("CI_SERVER_HOST")

	знч CI_DATA = СредаИсполнения.ПолучитьПеременную("CI_DATA")
	знч CI_EPFS = СредаИсполнения.ПолучитьПеременную("CI_EPFS")
	знч CI_VA = СредаИсполнения.ПолучитьПеременную("CI_VA")

	пер ошибкиТокенов = ""

	если CI_DATA.Пусто()
		ошибкиТокенов += "В переменную CI_DATA необходимо поместить путь до каталогов с шаблонами баз." + Символы
			.НоваяСтрока
	;

	если CI_EPFS.Пусто()
		ошибкиТокенов += "В переменную CI_EPFS необходимо поместить путь до служебных обработок." + Символы
			.НоваяСтрока
	;

	если CI_VA.Пусто()
		ошибкиТокенов += "В переменную CI_VA необходимо поместить путь до обработки и шагов VanessaAutomation." + Символы
			.НоваяСтрока
	;

	если не ошибкиТокенов.Пусто()
		выбросить новый ИсключениеНедопустимоеСостояние(ошибкиТокенов)
	;

	знч настройки = ПрочитатьНастройкиСборки("%CI_PROJECT_DIR")

	знч адресРепозиторияКонфигурации = "https://gitlab-ci-token:%CI_JOB_TOKEN@%CI_SERVER_HOST/%CI_PROJECT_NAMESPACE/%{настройки
		.Конфигурация
	.Имя}.git"
	Консоль.Записать("Git_Clone: %адресРепозиторияКонфигурации %{настройки.Конфигурация.Ветка}")
	Git_Clone(адресРепозиторияКонфигурации, настройки.Конфигурация.Ветка)

	знч путьКонфигурацииЕДТ = "%CI_PROJECT_DIR/%{настройки.Конфигурация.Имя}/%{настройки.Конфигурация.Проект}"
	Консоль.Записать("ИсполняемыйФайлПлатформы: %путьКонфигурацииЕДТ")
	знч исполняемыйФайлПлатформы = ИсполняемыйФайлПлатформы(путьКонфигурацииЕДТ)

	для репозиторийТестов из настройки.СценарныеТесты
		ПротестироватьТестовуюБазу(репозиторийТестов, настройки, исполняемыйФайлПлатформы)
	;
;

структура ОписаниеНастроекАвтофич
	пер ТестоваяБаза: ОписаниеНастроекТестовойБазы
	пер Шаблоны: ОписаниеНастроекШаблонов
;

структура ОписаниеНастроекТестовойБазы
	пер ПутьКDT: Строка
	пер ИмяПользователя: Строка
	пер ПарольПользователя: Строка
;

структура ОписаниеНастроекШаблонов
	пер ФайлШаблонаШапки: Строка
	пер Пользователи: Массив
;

структура ОписаниеПользователя
	пер Представление: Строка
	пер Имя: Строка
	пер Пароль: Строка
;

структура ОписаниеОбъектаАвтофичи
	пер Объект: Строка
	пер ШаблонФичи: Строка
	пер Пользователи: Массив
;

перечисление VAParamsСпособыСнятияСкриншотовВнешнейКомпонентой
    ВесьЭкран умолчание // 0
	ТекущееОкноКлиентаТестирования // 1
	ВсеОкнаКлиентаТестирования // 2
;

структура VAParams
	пер КаталогПроекта: Строка
	пер КаталогФич: Строка
	пер КаталогиБиблиотек: Массив

	пер ВыполнитьСценарии: Булево = Истина
	пер ЗавершитьРаботуСистемы: Булево = Истина
	пер ЗакрытьTestClientПослеЗапускаСценариев: Булево = Истина

	пер ДелатьЛогВыполненияСценариевВЖР: Булево = Истина
	пер ДелатьЛогВыполненияСценариевВТекстовыйФайл: Булево = Ложь
	пер ДелатьЛогОшибокВТекстовыйФайл: Булево = Ложь
	пер ВыводитьЛогВКонсоль: Булево = Ложь
	пер ВыводитьВЛогВыполнениеШагов: Булево = Истина
	пер ПодробныйЛогВыполненияСценариев: Булево = Истина
	пер СобиратьДанныеОСостоянииАктивнойФормыПриОшибке: Булево = Ложь
	пер СобиратьДанныеОСостоянииВсехФормПриОшибке: Булево = Ложь
	пер СобиратьДанныеОСетевыхСоединениях: Булево = Ложь
	пер СобиратьДанныеОПроцессахОС: Булево = Ложь

	пер ИспользоватьКомпонентуVanessaExt: Булево = Истина
	пер ТихаяУстановкаVanessaExt: Булево = Ложь
	пер ИспользоватьВнешнююКомпонентуДляСкриншотов: Булево = Истина
	пер СпособСнятияСкриншотовВнешнейКомпонентой: Число = 2 // VAParamsСпособыСнятияСкриншотовВнешнейКомпонентой
	пер ДелатьСкриншотПриВозникновенииОшибки: Булево = Истина
	пер СниматьСкриншотКаждогоОкна1С: Булево = Ложь
	пер КаталогВыгрузкиСкриншотов: Строка = ""

	пер ВыполнениеСценариев: VAParamsВыполнениеСценариев

	пер КлиентТестирования: VAParamsКлиентТестирования

	пер ДелатьОтчетВФорматеАллюр: Булево = Истина
	пер ОтчетAllure: VAParamsОтчетAllure?

	пер ДелатьОтчетВФорматеjUnit: Булево = Истина
	пер ОтчетJUnit: VAParamsОтчетJUnit?

	конструктор(КаталогПроекта, КаталогФич)
	конструктор(КаталогПроекта, КаталогФич, КаталогиБиблиотек)
;

структура VAParamsВыполнениеСценариев
	пер ВыполнятьШагиАссинхронно: Булево = Ложь
	пер ОбновлятьСтатистикуВДереве: Булево = Ложь
	пер ОбновлятьДеревоПриНачалеВыполненияСценария: Булево = Ложь

	конструктор()
;

структура VAParamsКлиентТестирования
	пер ЗапускатьКлиентТестированияСМаксимизированнымОкном: Булево = Истина
	пер ЗакрыватьКлиентТестированияПринудительно: Булево = Истина
	пер ТаймаутПередПринудительнымЗакрытиемКлиентаТестирования: Число = 10
	пер ДиапазонПортовTestclient: Строка = ""
	пер ТаймаутЗапуска1С: Число = 25

	конструктор()
	конструктор(ДиапазонПортовTestclient)
;

структура VAParamsОтчетAllureДанныеАллюрМеток
	пер РегулярноеВыражение: Строка = ""
	пер ИмяМетки: Строка = ""
	пер Значение: Строка = ""
	
	конструктор(ИмяМетки, Значение)
;

структура VAParamsОтчетAllure
	пер КаталогВыгрузкиAllure: Строка
	пер КаталогОтносительноКоторогоНадоСтроитьИерархию: Строка
	пер УровеньОтчета1: Строка = "#report.epic=;ИмяФичаФайла"
	пер УровеньОтчета2: Строка = "#report.feature="
	пер УровеньОтчета3: Строка = "#report.story="
	пер ГруппировкаTestSuites: Строка = "#report.feature="
	пер ДанныеАллюрМеток: Массив // VAParamsОтчетAllureДанныеАллюрМеток?

	конструктор(КаталогВыгрузкиAllure, КаталогОтносительноКоторогоНадоСтроитьИерархию)
;

структура VAParamsОтчетJUnit
	пер КаталогВыгрузкиjUnit: Строка

	конструктор(КаталогВыгрузкиjUnit)
;

метод ПрочитатьНастройкиАвтофич(имяФайлаНастроек: Строка): ОписаниеНастроекАвтофич
	пер файлНастроек = новый Файл(имяФайлаНастроек)
	исп потокФайлаНастроек = файлНастроек.ОткрытьПотокЧтения()
	пер настройкиJson = новый НастройкиЧтенияОбъектовJson()
	настройкиJson.ИгнорироватьНеизвестныеСвойства = Истина
	пер настройки = СериализацияJson.ПрочитатьОбъект(потокФайлаНастроек, Тип(ОписаниеНастроекАвтофич), настройкиJson) как ОписаниеНастроекАвтофич
	пер пользователи = новый Массив()
	для пользователь из настройки.Шаблоны.Пользователи
		знч описаниеПользователя = новый ОписаниеПользователя(пользователь["ПредставлениеПользователя"], пользователь["ИмяПользователя"],
			пользователь["ПарольПользователя"])
		пользователи.Добавить(описаниеПользователя)
	;
	настройки.Шаблоны.Пользователи = пользователи

	возврат настройки
;

метод ПротестироватьТестовуюБазу(репозиторийСценарныхТестов: ОписаниеРепозитория, настройкиСборки: ОписаниеНастроекСборки, исполняемыйФайлПлатформы: Строка)
	знч CI_JOB_TOKEN = СредаИсполнения.ПолучитьПеременную("CI_JOB_TOKEN")
	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")
	знч CI_PROJECT_NAMESPACE = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_NAMESPACE")
	знч CI_SERVER_HOST = СредаИсполнения.ПолучитьПеременную("CI_SERVER_HOST")

	знч адресРепозиторияТестов = "https://gitlab-ci-token:%CI_JOB_TOKEN@%CI_SERVER_HOST/%CI_PROJECT_NAMESPACE/%{репозиторийСценарныхТестов
		.Имя}.git"
	Консоль.Записать("Git_Clone: %адресРепозиторияТестов %{репозиторийСценарныхТестов.Ветка}")
	Git_Clone(адресРепозиторияТестов, репозиторийСценарныхТестов.Ветка)

	знч настройкиАвтофич = ПрочитатьНастройкиАвтофич("%CI_PROJECT_DIR/%{репозиторийСценарныхТестов.Имя}/auto_features/AFParams.json")

	знч CI_DATA = СредаИсполнения.ПолучитьПеременную("CI_DATA")
	знч CI_EPFS = СредаИсполнения.ПолучитьПеременную("CI_EPFS")
	знч CI_VA = СредаИсполнения.ПолучитьПеременную("CI_VA")

	знч полныйПутьПрикладнойСборки = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_ПРИКЛАДНОЙ_СБОРКИ"
	знч полныйПутьТестовойСборки = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_ТЕСТОВОЙ_СБОРКИ"

	знч путьИБОбщий = "%CI_PROJECT_DIR/temp/db/%{репозиторийСценарныхТестов.Имя}"

	знч путьИБ = "%путьИБОбщий-Исходная"
	
	знч файлDT = "%CI_DATA/%{настройкиАвтофич.ТестоваяБаза.ПутьКDT}"
	Консоль.Записать("CreateInfobaseFromTemplate: %файлDT %путьИБ %исполняемыйФайлПлатформы")
	CreateInfobaseFromTemplate(файлDT, путьИБ, исполняемыйФайлПлатформы)

	Консоль.Записать("DeleteCfgAllExtensions: %путьИБ %исполняемыйФайлПлатформы %{настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя}")
	DeleteCfgAllExtensions(путьИБ, исполняемыйФайлПлатформы, настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя)

	знч файлКонфигурации = "%полныйПутьПрикладнойСборки/1cv8.cf"
	Консоль.Записать("LoadCfg: %файлКонфигурации %путьИБ %исполняемыйФайлПлатформы %{настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя}")
	LoadCfg(файлКонфигурации, путьИБ, исполняемыйФайлПлатформы, настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя)

	Консоль.Записать("UpdateDBCfg: %путьИБ %исполняемыйФайлПлатформы %{настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя}")
	UpdateDBCfg(путьИБ, исполняемыйФайлПлатформы, настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя)

	для репозиторий из настройкиСборки.ПрикладныеРасширения
		знч файлРасширения = "%полныйПутьПрикладнойСборки/%{репозиторий.Проект}.cfe"
		Консоль.Записать("LoadCfe: %файлРасширения %{репозиторий
			.Проект} %путьИБ %исполняемыйФайлПлатформы %{настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя}")
		LoadExt(файлРасширения, репозиторий.Проект, путьИБ, исполняемыйФайлПлатформы, настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя)

		Консоль.Записать("UpdateDBExt: %{репозиторий.Проект} %путьИБ %исполняемыйФайлПлатформы %{настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя}")
		UpdateDBExt(репозиторий.Проект, путьИБ, исполняемыйФайлПлатформы, настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя)
	;

	для репозиторий из настройкиСборки.ТестовыеРасширения
		знч файлРасширения = "%полныйПутьТестовойСборки/%{репозиторий.Проект}.cfe"
		Консоль.Записать("LoadCfe: %файлРасширения %{репозиторий
			.Проект} %путьИБ %исполняемыйФайлПлатформы %{настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя}")
		LoadExt(файлРасширения, репозиторий.Проект, путьИБ, исполняемыйФайлПлатформы, настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя)

		Консоль.Записать("UpdateDBExt: %{репозиторий.Проект} %путьИБ %исполняемыйФайлПлатформы %{настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя}")
		UpdateDBExt(репозиторий.Проект, путьИБ, исполняемыйФайлПлатформы, настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя)
	;

	знч имяОбработкиОтключенияБезопасногоРежима = "%CI_EPFS/ОтключитьБезопасныйРежимРасширений.epf"
	Консоль.Записать("ExecuteDataProcessor: %имяОбработкиОтключенияБезопасногоРежима %путьИБ %исполняемыйФайлПлатформы %{настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя}")
	ExecuteDataProcessor(имяОбработкиОтключенияБезопасногоРежима, "", путьИБ, исполняемыйФайлПлатформы, настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя)

	Консоль.Записать("ExecuteCommand: %КОМАНДЫ_ОБНОВЛЕНИЯ_БД %путьИБ %исполняемыйФайлПлатформы %{настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя}")
	ExecuteCommand(КОМАНДЫ_ОБНОВЛЕНИЯ_БД, путьИБ, исполняемыйФайлПлатформы, настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя)

	знч имяФайлаVA = "%CI_VA/vanessa-automation-single.epf"
	знч параметрыVA = "QuietInstallVanessaExt"
	Консоль.Записать("ExecuteDataProcessor: %имяФайлаVA %параметрыVA %путьИБ %исполняемыйФайлПлатформы %{настройкиАвтофич.ТестоваяБаза
	.ИмяПользователя}")
//	ExecuteDataProcessor(имяФайлаVA, параметрыVA, путьИБ, исполняемыйФайлПлатформы, настройкиАвтофич.ТестоваяБаза
//	.ИмяПользователя)

	Консоль.Записать("СоздатьФичи: %{репозиторийСценарныхТестов.Имя}")
	СоздатьФичи(настройкиАвтофич, репозиторийСценарныхТестов.Имя)

	Консоль.Записать("ЗапуститьСценарныеТесты: %{репозиторийСценарныхТестов.Имя} %путьИБОбщий")
	ЗапуститьСценарныеТесты(настройкиАвтофич, исполняемыйФайлПлатформы, репозиторийСценарныхТестов.Имя, путьИБ, путьИБОбщий)
;

метод СоздатьФичи(настройки: ОписаниеНастроекАвтофич, имяРепозитория: Строка)
	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")

	знч CI_VA = СредаИсполнения.ПолучитьПеременную("CI_VA")

	знч каталогПроекта = "%CI_PROJECT_DIR/%имяРепозитория"

	пер автофичи = новый Соответствие()

	пер настройкиПоиска = новый НастройкиПоискаФайлов()
	настройкиПоиска.ИмяСодержит(".tsv")
	для файлАвтофичи из Файлы.Найти("%каталогПроекта/auto_features", настройкиПоиска)
		пер массивОбъектов = новый Массив()

		исп потокФайлаАвтофичи = файлАвтофичи.ОткрытьПотокЧтения()
		пер чтениеФайлаАвтофичи = новый ЧтениеДанных(потокФайлаАвтофичи)
		пока не чтениеФайлаАвтофичи.ЧтениеЗавершено()
			знч строкаФайла = чтениеФайлаАвтофичи.ПрочитатьСтроку("cp1251")
			если строкаФайла.Пусто()
			продолжить
			;
			знч массивСтроки = строкаФайла.Разделить("\т", Истина)
			если массивСтроки.Размер() != 3
				выбросить новый ИсключениеИндексВнеГраниц("В каждой строке автофича файла должно быть 3 значения, разделенных табуляцией.")
			;

			знч пользователиАвтофичи = массивСтроки[2].Разделить(",")
			знч объектАвтофичи = новый ОписаниеОбъектаАвтофичи(массивСтроки[0], массивСтроки[1], пользователиАвтофичи)
			массивОбъектов.Добавить(объектАвтофичи)
		;

		автофичи.Вставить(файлАвтофичи.ИмяБезРасширения, массивОбъектов)
	;

	пер файлШаблонаШапки = новый Файл("%CI_VA/templates/%{настройки.Шаблоны
	.ФайлШаблонаШапки}")
	исп потокШаблонаШапки = файлШаблонаШапки.ОткрытьПотокЧтения()
	знч текстШаблонаШапки = потокШаблонаШапки.ПрочитатьКакТекст()

	пер текстыШаблоновОбъектов = новый Соответствие()

	для пользователь из настройки.Шаблоны.Пользователи
		для автофича из автофичи
			пер текстФичи = текстШаблонаШапки
			текстФичи = текстФичи.Заменить("\%ПредставлениеПользователя\%", пользователь.Представление)
			текстФичи = текстФичи.Заменить("\%ИмяПользователя\%", пользователь.Имя)
			текстФичи = текстФичи.Заменить("\%ПарольПользователя\%", пользователь.Пароль)

			для описаниеОбъекта из автофича.Значение
				если описаниеОбъекта.Пользователи.Найти(пользователь.Представление) == Неопределено
				продолжить
				;

				пер текстОбъекта = ""
				если текстыШаблоновОбъектов.СодержитКлюч(описаниеОбъекта.ШаблонФичи)
					текстОбъекта = текстыШаблоновОбъектов.Получить(описаниеОбъекта.ШаблонФичи)
				иначе
					пер файлШаблонаОбъекта = новый Файл("%CI_VA/templates/%{описаниеОбъекта.ШаблонФичи}")
					исп потокШаблонаОбъекта = файлШаблонаОбъекта.ОткрытьПотокЧтения()
					знч текстШаблонаОбъекта = потокШаблонаОбъекта.ПрочитатьКакТекст()
					текстыШаблоновОбъектов.Вставить(описаниеОбъекта.ШаблонФичи, текстШаблонаОбъекта)

					текстОбъекта = текстШаблонаОбъекта
				;

				текстОбъекта = текстОбъекта.Заменить("\%ИмяОбъекта\%", описаниеОбъекта.Объект.Разделить(".")[1])
				текстФичи = текстФичи + Символы.НоваяСтрока + текстОбъекта
			;

			знч путьАвтофич = "%каталогПроекта/features/%{пользователь.Представление}"
			Файлы.СоздатьКаталог(путьАвтофич)
			пер файлФичи = новый Файл("%путьАвтофич/%{автофича.Ключ}.feature")
			исп потокФичи = файлФичи.ОткрытьПотокЗаписи()
			потокФичи.Записать(текстФичи)
		;
	;
;

метод ЗапуститьСценарныеТесты(настройки: ОписаниеНастроекАвтофич, исполняемыйФайлПлатформы: Строка, имяРепозитория: Строка, путьИБИсходная: Строка, путьИБОбщая: Строка)
	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")

	знч CI_VA = СредаИсполнения.ПолучитьПеременную("CI_VA")

	знч каталогПроекта = "%CI_PROJECT_DIR/%имяРепозитория"

	знч полныйПутьРезультатовТестов = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_РЕЗУЛЬТАТОВ_ТЕСТОВ"

	знч каталогВыгрузкиAllure = "%полныйПутьРезультатовТестов/allure"

	пер временныеИБПользователей = новый Соответствие()
	для пользователь из настройки.Шаблоны.Пользователи
		знч временныйКаталогИБ = Файлы.СоздатьКаталог("%путьИБОбщая-%{пользователь.Представление}")
		Файлы.Скопировать("%путьИБИсходная/1Cv8.1CD", "%временныйКаталогИБ/1Cv8.1CD")

		временныеИБПользователей.Вставить(пользователь.Представление, временныйКаталогИБ)
	;

	пер командыПлатформы = новый Массив()
	пер начальныйПорт = 48101
	знч диапазонПортов = 50
	для пользователь из настройки.Шаблоны.Пользователи
		пер временныйКаталогИБ = временныеИБПользователей.Получить(пользователь.Представление)

		знч каталогФич = "%каталогПроекта/features/%{пользователь.Представление}"

		знч конечныйПорт = начальныйПорт + диапазонПортов - 1

		знч настройкиVAParamsВыполнениеСценариев = новый VAParamsВыполнениеСценариев()
		пер настройкиVAParamsКлиентТестирования = новый VAParamsКлиентТестирования("%начальныйПорт-%конечныйПорт")
		настройкиVAParamsКлиентТестирования.ТаймаутЗапуска1С = 60
		пер настройкиVAParamsОтчетAllure = новый VAParamsОтчетAllure(каталогВыгрузкиAllure, каталогФич)
		настройкиVAParamsОтчетAllure.ДанныеАллюрМеток.Добавить(новый VAParamsОтчетAllureДанныеАллюрМеток("thread", пользователь.Представление))
		знч настройкиVAParamsОтчетJUnit = новый VAParamsОтчетJUnit(Файлы.СоздатьКаталог("%временныйКаталогИБ/junit").Путь)

		пер настройкиVAParams = новый VAParams(каталогПроекта, каталогФич, ["%CI_VA/steps"])
		настройкиVAParams.ВыполнениеСценариев = настройкиVAParamsВыполнениеСценариев
		настройкиVAParams.КлиентТестирования = настройкиVAParamsКлиентТестирования
		настройкиVAParams.ОтчетAllure = настройкиVAParamsОтчетAllure
		настройкиVAParams.ОтчетJUnit = настройкиVAParamsОтчетJUnit
		настройкиVAParams.КаталогВыгрузкиСкриншотов = Файлы.СоздатьКаталог("%временныйКаталогИБ/screenShots").Путь

		знч временныйФайлНастроекVA = Файлы.Создать("%временныйКаталогИБ/VAParams.json")
		исп потокНастроекVA = временныйФайлНастроекVA.ОткрытьПотокЗаписи()
		СериализацияJson.ЗаписатьОбъект(потокНастроекVA, настройкиVAParams)
		потокНастроекVA.Закрыть()

		знч параметрыVA = "StartFeaturePlayer;DisableUserSettingsLoader;DisableLoadTestClientsTable;DisableLoadConfig;ClearStepsCache;VAParams=%временныйФайлНастроекVA"

		знч имяФайлаVA = "%CI_VA/vanessa-automation-single.epf"
		Консоль.Записать("ExecuteDataProcessorTestManager: %имяФайлаVA %параметрыVA %{временныйКаталогИБ.Путь} %исполняемыйФайлПлатформы %{настройки.ТестоваяБаза.ИмяПользователя}")
		пер командаПлатформы = ExecuteDataProcessorTestManager(имяФайлаVA,
			параметрыVA, временныйКаталогИБ.Путь, исполняемыйФайлПлатформы, настройки.ТестоваяБаза.ИмяПользователя, настройки.ТестоваяБаза
		.ПарольПользователя)
		командыПлатформы.Добавить(командаПлатформы)

		начальныйПорт = начальныйПорт + диапазонПортов
	;

	для командаПлатформы из командыПлатформы
		ОбработатьЗавершениеКомандыПлатформы(командаПлатформы)
	;

	пер индекс = 1
	для пользователь из настройки.Шаблоны.Пользователи
		пер временныйКаталогИБ = временныеИБПользователей.Получить(пользователь.Представление)
		Файлы.Скопировать("%временныйКаталогИБ/junit/junit.xml", "%полныйПутьРезультатовТестов/junit/junit-%индекс.xml")
		индекс += 1
	;

	AllureGenerate(настройки)
;

метод ExecuteDataProcessorTestManager(имяВнешнейОбработки: Строка, вспомогательныеПараметры: Строка, путьКИБ: Строка, имяФайлаПлатформы: Строка,
	имяПользователя: Строка = "", пароль: Строка = ""): ОписаниеКомандыПлатформы
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("ENTERPRISE")
	параметрыПроцесса.Добавить("/TestManager")
	параметрыПроцесса.Добавить("/Execute")
	параметрыПроцесса.Добавить(имяВнешнейОбработки)
	если не вспомогательныеПараметры.Пусто()
		параметрыПроцесса.Добавить("/C\"%вспомогательныеПараметры\"")
	;
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить("\"File=\"\"%путьКИБ\"\"\"")
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	пер командаПлатформы = ВыполнитьКомандуПлатформыВФоне(имяФайлаПлатформы, параметрыПроцесса)
	Консоль.Записать("Обработка запущена.")

	возврат командаПлатформы
;

метод AllureGenerate(настройки: ОписаниеНастроекАвтофич)
	пер имяКоманды = ""
	пер параметрыПроцесса = новый Массив()

	знч версияОС = ИспользуемаяОС()
	выбор версияОС
	когда ОперационныеСистемы.Windows
		имяКоманды = "allure.bat"
	иначе
		имяКоманды = "allure"
	;

	знч CI_PROJECT_DIR = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_DIR")
	знч полныйПутьРезультатовТестов = "%CI_PROJECT_DIR/%ИМЯ_КАТАЛОГА_РЕЗУЛЬТАТОВ_ТЕСТОВ"
	
	параметрыПроцесса.Добавить("generate")
	параметрыПроцесса.Добавить("%полныйПутьРезультатовТестов/allure")
	параметрыПроцесса.Добавить("--clean")
	параметрыПроцесса.Добавить("-o")
	параметрыПроцесса.Добавить("%CI_PROJECT_DIR/public")

	ВыполнитьКомандуСистемы(имяКоманды, параметрыПроцесса)
;

метод ВыполнитьКомандуСистемы(имяКоманды: Строка, параметры: Массив)
	знч процесс = новый ПроцессОс(имяКоманды, параметры, Ложь)
	процесс.Запустить()

	исп результатВыполненияСкрипта = процесс.ПолучитьПотокВывода()
	пока не процесс.ОжидатьЗавершения(60с)
		знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакТекст()
		если не текстРезультата.Пусто()
			Консоль.Записать(текстРезультата)
		;
	;
	знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакТекст()
	если не текстРезультата.Пусто()
		Консоль.Записать(текстРезультата)
	;

	знч кодВозврата = процесс.ПолучитьКодВозврата()
	Консоль.Записать("Код возврата:" + кодВозврата)

	пер ошибкиВыполненияСкрипта = процесс.ПолучитьПотокОшибок()
	знч текстОшибок = ошибкиВыполненияСкрипта.ПрочитатьКакТекст(КодировкаПотокаВывода())
	если не текстОшибок.Пусто()
		Консоль.Записать("Поток ошибок:")
		Консоль.Записать(текстОшибок)
	;
;

метод КодировкаПотокаВывода(): Строка
	возврат "Cp1251"
;

структура ОписаниеКомандыПлатформы
	пер процесс: ПроцессОс
	пер имяКоманды: Строка
	пер параметры: Массив
	пер временныйФайлЛогов: Файл
	пер выводитьОшибки: Булево = Истина
;

метод ВыполнитьКомандуПлатформыВФоне(имяКоманды: Строка, параметры: Массив, выводитьОшибки: Булево =
	Истина): ОписаниеКомандыПлатформы
	знч временныйФайлЛогов = Файлы.СоздатьВременныйФайл()

	параметры.Добавить("/Out")
	параметры.Добавить(временныйФайлЛогов.Путь)

	пер процесс = новый ПроцессОс(имяКоманды, параметры)
	процесс.Запустить()

	возврат новый ОписаниеКомандыПлатформы(процесс, имяКоманды, параметры, временныйФайлЛогов, выводитьОшибки)
;

метод ОбработатьЗавершениеКомандыПлатформы(командаПлатформы: ОписаниеКомандыПлатформы)
	исп результатВыполненияСкрипта = командаПлатформы.процесс.ПолучитьПотокВывода()
	пока не командаПлатформы.процесс.ОжидатьЗавершения(60с)
		знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакТекст()
		если не текстРезультата.Пусто()
			Консоль.Записать(текстРезультата)
		;
	;
	знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакТекст()
	если не текстРезультата.Пусто()
		Консоль.Записать(текстРезультата)
	;

	Консоль.Записать("Команда платформы выполнена.")

	знч кодВозврата = командаПлатформы.процесс.ПолучитьКодВозврата()

	если кодВозврата == 0
	возврат
	;

	пер текстОшибки = "Код возврата: %кодВозврата"
	если не командаПлатформы.выводитьОшибки
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
	;

	текстОшибки += Строки.Шаблон("\в\нКоманда: $0\в\нПараметры: $1", [командаПлатформы.имяКоманды, Строки.Соединить(командаПлатформы
		.параметры, " ")])

	исп ошибкиВыполненияСкрипта = командаПлатформы.временныйФайлЛогов.ОткрытьПотокЧтения()
	текстОшибки += "\в\нСодержимое лога:\в\н" + ошибкиВыполненияСкрипта.ПрочитатьКакТекст(КодировкаПотокаВыводаПлатформы())
	выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
;

метод ОпубликоватьОтчет()
	знч CI_JOB_ID = СредаИсполнения.ПолучитьПеременную("CI_JOB_ID")
	знч CI_PROJECT_PATH = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_PATH")

	пер списокДвоичныхФайлов = новый Массив()
	списокДвоичныхФайлов.Добавить("/public/index.html")
	знч имяФайлаАссетов = "%ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ/assets_pages.json"
	Консоль.Записать("ЗаписатьОписаниеАссетов: %имяФайлаАссетов %CI_PROJECT_PATH %CI_JOB_ID")
	ЗаписатьОписаниеАссетов(имяФайлаАссетов, CI_PROJECT_PATH, CI_JOB_ID, списокДвоичныхФайлов)
;

метод ОпубликоватьРелиз()
	знч CI_COMMIT_SHORT_SHA = СредаИсполнения.ПолучитьПеременную("CI_COMMIT_SHORT_SHA")
	знч CI_PROJECT_ID = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_ID")
	знч CI_JOB_TOKEN = СредаИсполнения.ПолучитьПеременную("CI_JOB_TOKEN")
	знч CI_SERVER_HOST = СредаИсполнения.ПолучитьПеременную("CI_SERVER_HOST")

	знч датаНовогоРелиза = ДатаНовогоРелиза()

	знч тегРелиза = датаНовогоРелиза.Форматировать("гггг-ММ-дд")
	знч имяРелиза = "Релиз %тегРелиза"
	знч комментарийРелиза = "Автоматически собранный релиз %тегРелиза"

	пер ссылки = новый Массив()

	знч описаниеАссетовBin = ПрочитатьОписаниеАссетов("%ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ/assets_bin.json")
	для имяФайла из описаниеАссетовBin.списокДвоичныхФайлов
		знч файлДляУрл = имяФайла.Заменить("\\", "/")
		знч файл = новый Файл(имяФайла)
		знч урлАссерта = "https://%CI_SERVER_HOST/%{описаниеАссетовBin.имяПроекта}/-/jobs/%{описаниеАссетовBin.идЗадания}/artifacts/raw%файлДляУрл"
		знч ассерт = новый Releases_Create_Assets_Link_Data(файл.Имя, урлАссерта)
		ссылки.Добавить(ассерт)
	;
	знч описаниеАссетовPages = ПрочитатьОписаниеАссетов("%ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ/assets_pages.json")
	для имяФайла из описаниеАссетовPages.списокДвоичныхФайлов
		знч файлДляУрл = имяФайла.Заменить("\\", "/")
		знч файл = новый Файл(имяФайла)
		знч урлАссерта = "https://%CI_SERVER_HOST/%{описаниеАссетовPages.имяПроекта}/-/jobs/%{описаниеАссетовPages.идЗадания}/artifacts/file%файлДляУрл"
		знч ассерт = новый Releases_Create_Assets_Link_Data(файл.Имя, урлАссерта)
		ссылки.Добавить(ассерт)
	;

	Консоль.Записать(
		"Releases_Create: %тегРелиза %CI_COMMIT_SHORT_SHA %CI_PROJECT_ID %CI_SERVER_HOST")
	Releases_Create(датаНовогоРелиза, тегРелиза, имяРелиза, комментарийРелиза, ссылки, CI_COMMIT_SHORT_SHA, CI_PROJECT_ID,
		CI_JOB_TOKEN, CI_SERVER_HOST)
;

метод ПроверитьКоммитыРепозиторияДляПоследнегоРелиза(репозиторий: ОписаниеРепозитория, датаПоследнегоРелиза: ДатаВремя): ДатаВремя?
	знч CI_PROJECT_NAMESPACE = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_NAMESPACE")
	знч CI_SERVER_HOST = СредаИсполнения.ПолучитьПеременную("CI_SERVER_HOST")

	знч токен = СредаИсполнения.ПолучитьПеременную(репозиторий.ПеременнаяТокена)

	знч имяПроекта = "%CI_PROJECT_NAMESPACE/%{репозиторий.Имя}"
	пер коммиты = новый Массив()
	если датаПоследнегоРелиза == новый ДатаВремя(1, 1, 1)
		Консоль.Записать("Commits_List: %{репозиторий.Ветка} %имяПроекта %CI_SERVER_HOST")
		коммиты = Commits_List(репозиторий.Ветка, имяПроекта, токен, CI_SERVER_HOST, "", датаПоследнегоРелиза)
	иначе
		Консоль.Записать("Commits_List_Since: %{репозиторий
			.Ветка} %имяПроекта %CI_SERVER_HOST %датаПоследнегоРелиза")
		коммиты = Commits_List_Since(репозиторий.Ветка, имяПроекта, токен, CI_SERVER_HOST, датаПоследнегоРелиза)
	;
	если коммиты.Пусто()
		Консоль.Записать("Нет новых коммитов в репозитории %{репозиторий.Имя}")
		возврат Неопределено
	;

	знч датаПоследнегоКоммита = новый ДатаВремя(коммиты[0].Получить("created_at").Подстрока(0, 19))
	Консоль.Записать("Последний коммит в репозитории %{репозиторий.Имя} от %датаПоследнегоКоммита")

	возврат датаПоследнегоКоммита
;

метод СкачатьАртефактРепозитория(репозиторий: ОписаниеРепозитория, путьСборки: Строка, расширение: Булево): Булево
	знч CI_COMMIT_REF_SLUG = СредаИсполнения.ПолучитьПеременную("CI_COMMIT_REF_SLUG")
	знч CI_PROJECT_NAMESPACE = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_NAMESPACE")
	знч CI_SERVER_HOST = СредаИсполнения.ПолучитьПеременную("CI_SERVER_HOST")

	знч RELEASES_TOKEN = СредаИсполнения.ПолучитьПеременную("RELEASES_TOKEN")

	пер имяФайла = "%путьСборки/1cv8.cf"
	если расширение
		имяФайла = "%путьСборки/%{репозиторий.Проект}.cfe"
	;

	знч имяРепозиторияРелизов = "%CI_PROJECT_NAMESPACE\%2Freleases"

	Консоль.Записать(
		"JobArtifacts_DownloadFile: %имяФайла build %CI_COMMIT_REF_SLUG %имяРепозиторияРелизов %CI_SERVER_HOST")
	возврат JobArtifacts_DownloadFile(имяФайла, "build", CI_COMMIT_REF_SLUG, имяРепозиторияРелизов, RELEASES_TOKEN,
		CI_SERVER_HOST)
;

метод ДатаНовогоРелиза(): ДатаВремя
	пер файлДатаНовогоРелиза = новый Файл("%ИМЯ_КАТАЛОГА_СЛУЖЕБНОЙ_СБОРКИ/new_release_date.txt")
	исп потокЧтенияДатаНовогоРелиза = файлДатаНовогоРелиза.ОткрытьПотокЧтения()
	возврат новый ДатаВремя(потокЧтенияДатаНовогоРелиза.ПрочитатьКакТекст())
;


структура ОписаниеНастроекСборки
	знч Конфигурация: ОписаниеРепозитория
	пер ПрикладныеРасширения: Массив
	пер ТестовыеРасширения: Массив
	пер СценарныеТесты: Массив
	знч СерверSonarQube: Строка
;

структура ОписаниеРепозитория
	знч Имя: Строка
	пер Ветка: Строка
	знч Проект: Строка
	знч ПеременнаяТокена: Строка
	
	конструктор (Имя, Ветка, ПеременнаяТокена)
	конструктор (Имя, Ветка, Проект, ПеременнаяТокена)
;


структура ОписаниеЗапросаНаСлияние
	знч имяПроекта: Строка
	знч веткаПроекта: Строка
;

метод ПараметрыЗапросаНаСлияние(): ОписаниеЗапросаНаСлияние?
	знч CI_MERGE_REQUEST_PROJECT_PATH = СредаИсполнения.ПолучитьПеременную("CI_MERGE_REQUEST_PROJECT_PATH")
	знч CI_MERGE_REQUEST_SOURCE_BRANCH_NAME = СредаИсполнения.ПолучитьПеременную("CI_MERGE_REQUEST_SOURCE_BRANCH_NAME")
	знч CI_PROJECT_NAMESPACE = СредаИсполнения.ПолучитьПеременную("CI_PROJECT_NAMESPACE")

	если CI_MERGE_REQUEST_PROJECT_PATH.Пусто()
		возврат Неопределено
	;
	
	знч имяПроектаСлияния = CI_MERGE_REQUEST_PROJECT_PATH.Заменить("%CI_PROJECT_NAMESPACE/", "")
	
	возврат новый ОписаниеЗапросаНаСлияние(имяПроектаСлияния, CI_MERGE_REQUEST_SOURCE_BRANCH_NAME)
;

метод ПрочитатьНастройкиСборки(путьОписанияНастроек: Строка): ОписаниеНастроекСборки
	знч запросНаСлияние = ПараметрыЗапросаНаСлияние()

	если запросНаСлияние != Неопределено
		Консоль.Записать("ЗапросНаСлияние: %{запросНаСлияние.имяПроекта} %{запросНаСлияние.веткаПроекта}")
	;

	пер файлОписанияНастроек = ".1cicd.json"
	если не путьОписанияНастроек.Пусто()
		файлОписанияНастроек = "%путьОписанияНастроек/.1cicd.json"
	;
	знч файл = новый Файл(файлОписанияНастроек)
	исп поток = файл.ОткрытьПотокЧтения()

	пер настройкиJson = новый НастройкиЧтенияОбъектовJson()
	настройкиJson.ИгнорироватьНеизвестныеСвойства = Истина

	пер настройки = СериализацияJson.ПрочитатьОбъект(поток, Тип(ОписаниеНастроекСборки),
		настройкиJson) как ОписаниеНастроекСборки

	если запросНаСлияние != Неопределено
		если настройки.Конфигурация.Имя == запросНаСлияние.имяПроекта
			настройки.Конфигурация.Ветка = запросНаСлияние.веткаПроекта
		;
	;

	пер прикладныеРасширения = новый Массив()
	для репозиторийРасширения из настройки.ПрикладныеРасширения
		пер веткаРасширения = репозиторийРасширения["Ветка"]
		если запросНаСлияние != Неопределено
			если репозиторийРасширения["Имя"] == запросНаСлияние.имяПроекта
				веткаРасширения = запросНаСлияние.веткаПроекта
			;
		;
		знч описание = новый ОписаниеРепозитория(репозиторийРасширения["Имя"], веткаРасширения, репозиторийРасширения["Проект"],
			репозиторийРасширения["ПеременнаяТокена"])
		прикладныеРасширения.Добавить(описание)
	;
	настройки.ПрикладныеРасширения = прикладныеРасширения

	пер тестовыеРасширения = новый Массив()
	для репозиторийРасширения из настройки.ТестовыеРасширения
		пер веткаРасширения = репозиторийРасширения["Ветка"]
		если запросНаСлияние != Неопределено
			если репозиторийРасширения["Имя"] == запросНаСлияние.имяПроекта
				веткаРасширения = запросНаСлияние.веткаПроекта
			;
		;
		знч описание = новый ОписаниеРепозитория(репозиторийРасширения["Имя"], веткаРасширения, репозиторийРасширения["Проект"],
			репозиторийРасширения["ПеременнаяТокена"])
		тестовыеРасширения.Добавить(описание)
	;
	настройки.ТестовыеРасширения = тестовыеРасширения

	пер сценарныеТесты = новый Массив()
	для репозиторийТестов из настройки.СценарныеТесты
		пер веткаТестов = репозиторийТестов["Ветка"]
		если запросНаСлияние != Неопределено
			если репозиторийТестов["Имя"] == запросНаСлияние.имяПроекта
				веткаТестов = запросНаСлияние.веткаПроекта
			;
		;
		знч описание = новый ОписаниеРепозитория(репозиторийТестов["Имя"], веткаТестов, репозиторийТестов["ПеременнаяТокена"])
		сценарныеТесты.Добавить(описание)
	;
	настройки.СценарныеТесты = сценарныеТесты

	возврат настройки
;


перечисление ОперационныеСистемы
	Windows,
	MacOS,
	Linux
;


метод ИспользуемаяОС(): ОперационныеСистемы
	знч имяОС = СредаИсполнения.ПолучитьСвойство("os.name")

	выбор когда имяОС.НачинаетсяС("windows", Истина)
		возврат ОперационныеСистемы.Windows

	когда имяОС.Содержит("mac", Истина)
		возврат ОперационныеСистемы.MacOS

	когда имяОС.Содержит("nux", Истина)
		возврат ОперационныеСистемы.Linux

	иначе
		выбросить новый ИсключениеНедопустимоеСостояние("Неизвестная ОС")
	;
;

/*
	* Работа с Git
	*/
метод Git_Clone(адресРепозитория: Строка, веткаРепозитория: Строка)
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("clone")
	параметрыПроцесса.Добавить("--quiet")
	параметрыПроцесса.Добавить("--single-branch")
	параметрыПроцесса.Добавить("--branch")
	параметрыПроцесса.Добавить(веткаРепозитория)
	параметрыПроцесса.Добавить(адресРепозитория)

	пер процесс = новый ПроцессОс("git", параметрыПроцесса)
	процесс.Запустить()

	исп результатВыполненияСкрипта = процесс.ПолучитьПотокВывода()
	пока не процесс.ОжидатьЗавершения(60с)
		знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакТекст()
		если не текстРезультата.Пусто()
			Консоль.Записать(текстРезультата)
		;
	;
	знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакТекст()
	если не текстРезультата.Пусто()
		Консоль.Записать(текстРезультата)
	;

	знч кодВозврата = процесс.ПолучитьКодВозврата()

	если кодВозврата == 0
		Консоль.Записать("Репозиторий успешно склонирован.")
	возврат
	;

	пер текстОшибки = "Код возврата: %кодВозврата"

	текстОшибки += Строки.Шаблон("\в\н$0\в\нgit $0", Строки.Соединить(параметрыПроцесса, " "))

	выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
;

/*
	* Путь к платформе проекта
	*/
метод ИсполняемыйФайлПлатформы(путьККонфигурацииЕДТ: Строка): Строка
	знч версияПлатформы = ВерсияПлатформыПроекта(путьККонфигурацииЕДТ)

	возврат ИсполняемыйФайлПлатформыПоМаксимальнойСборке(версияПлатформы)
;

метод ВерсияПлатформыПроекта(путьККонфигурацииЕДТ: Строка): Строка
	пер версияПлатформы: Строка = ""

	знч файлПроекта = новый Файл("%путьККонфигурацииЕДТ/DT-INF/PROJECT.PMF")
	если не файлПроекта.Существует()
		знч текстОшибки = "В указанном каталоге не найден файл PROJECT.PMF"
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
	;

	знч чтение = новый ЧтениеДанных(файлПроекта.ОткрытьПотокЧтения())
	пока не чтение.ЧтениеЗавершено()
		знч строкаФайла = чтение.ПрочитатьСтроку()
		знч ключИЗначение = строкаФайла.Разделить(": ")
		если ключИЗначение[0] == "Runtime-Version"
			версияПлатформы = ключИЗначение[1]
		прервать
		;
	;

	возврат версияПлатформы
;

метод ИсполняемыйФайлПлатформыПоМаксимальнойСборке(версияПлатформы: Строка): Строка
	знч установленныеПлатформы = УстановленныеПлатформы()
	если установленныеПлатформы.СодержитКлюч(версияПлатформы)
		знч путьКПлатформе = установленныеПлатформы.Получить(версияПлатформы)
		возврат "%путьКПлатформе/bin/1cv8"
	;

	знч максимальныеПлатформы = МаксимальныеПлатформы()
	если максимальныеПлатформы.СодержитКлюч(версияПлатформы)
		знч путьКПлатформе = максимальныеПлатформы.Получить(версияПлатформы)
		возврат "%путьКПлатформе/bin/1cv8"
	;

	знч текстОшибки = "Не найдена установленная платформа %версияПлатформы"
	выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
;

метод КаталогиПлатформы(): Массив
	пер списокКаталогов: Массив

	знч используемаяОС = ИспользуемаяОС()

	выбор используемаяОС
	когда ОперационныеСистемы.Windows
		знч каталог32 = СредаИсполнения.ПолучитьПеременную("ProgramFiles(x86)")
		списокКаталогов.Добавить("%каталог32\\1Cv8")
		знч каталог64 = СредаИсполнения.ПолучитьПеременную("ProgramFiles")
		списокКаталогов.Добавить("%каталог64\\1Cv8")
	когда ОперационныеСистемы.MacOS
		списокКаталогов.Добавить("/opt/1Cv8")
	когда ОперационныеСистемы.Linux
		списокКаталогов.Добавить("/opt/1C/v8.3/x86_64")
	;

	возврат списокКаталогов
;

метод УстановленныеПлатформы(): Соответствие
	пер установленныеПлатформы: Соответствие

	знч каталогиПлатформы = КаталогиПлатформы()

	знч настройкиПоискаФайлов = новый НастройкиПоискаФайлов()
	настройкиПоискаФайлов.ИсключитьФайлы(Истина)
	настройкиПоискаФайлов.МаксимальнаяГлубина(1)

	для каталогПлатформы из каталогиПлатформы
		знч найденныеФайлы = Файлы.Найти(каталогПлатформы, настройкиПоискаФайлов)
		для найденныйФайл из найденныеФайлы
			если не найденныйФайл.Имя.НачинаетсяС("8.3")
			продолжить
			;
			установленныеПлатформы.Вставить(найденныйФайл.Имя, найденныйФайл.Путь)
		;
	;

	возврат установленныеПлатформы
;

метод МаксимальныеПлатформы(): Соответствие
	знч установленныеПлатформы = УстановленныеПлатформы()

	пер максимальныеПлатформы: Соответствие

	для платформа из установленныеПлатформы
		знч разложенныйТекущийРелиз = платформа.Ключ.Разделить(".")

		пер релизБезВерсииМассивом = новый Массив(разложенныйТекущийРелиз)
		релизБезВерсииМассивом.УдалитьПоИндексу(3)

		знч релизБезВерсии = Строки.Соединить(релизБезВерсииМассивом, ".")

		если не максимальныеПлатформы.СодержитКлюч(релизБезВерсии)
			максимальныеПлатформы.Вставить(релизБезВерсии, платформа.Значение)
		продолжить
		;

		знч последнийРелиз = максимальныеПлатформы.Получить(релизБезВерсии)
		знч разложенныйПоследнийРелиз = последнийРелиз.Разделить(".")

		если разложенныйТекущийРелиз[3] > разложенныйПоследнийРелиз[3]
			максимальныеПлатформы.Вставить(релизБезВерсии, платформа.Значение)
		;
	;

	возврат максимальныеПлатформы
;

/*
	* Пакетный режим платформы
	*/
метод CreateInfobase(путьКИБ: Строка, имяФайлаПлатформы: Строка)
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("CREATEINFOBASE")
	параметрыПроцесса.Добавить("File=\"%путьКИБ\"")

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса)
	Консоль.Записать("ИБ успешно создана.")
;

метод CreateInfobaseFromTemplate(путьКДТ: Строка, путьКИБ: Строка, имяФайлаПлатформы: Строка)
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("CREATEINFOBASE")
	параметрыПроцесса.Добавить("File=\"%путьКИБ\"")
	параметрыПроцесса.Добавить("/UseTemplate")
	параметрыПроцесса.Добавить(путьКДТ)

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса)
	Консоль.Записать("ИБ успешно создана.")
;

метод LoadConfigFromFiles(путьКФайламКонфигурации: Строка, путьКИБ: Строка, имяФайлаПлатформы: Строка,
	имяПользователя: Строка = "", пароль: Строка = "")
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("DESIGNER")
	параметрыПроцесса.Добавить("/LoadConfigFromFiles")
	параметрыПроцесса.Добавить(путьКФайламКонфигурации)
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить("\"File=\"\"%путьКИБ\"\"\"")
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса)
	Консоль.Записать("XML файлы конфигурации успешно загружены в ИБ.")
;

метод LoadCfg(путьКФайлуCF: Строка, путьКИБ: Строка, имяФайлаПлатформы: Строка, имяПользователя: Строка = "",
	пароль: Строка = "")
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("DESIGNER")
	параметрыПроцесса.Добавить("/LoadCfg")
	параметрыПроцесса.Добавить(путьКФайлуCF)
	параметрыПроцесса.Добавить("-force")
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить("\"File=\"\"%путьКИБ\"\"\"")
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса)
	Консоль.Записать("CF файл конфигурации успешно загружен в ИБ.")
;

метод UpdateDBCfg(путьКИБ: Строка, имяФайлаПлатформы: Строка, имяПользователя: Строка = "", пароль: Строка = "")
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("DESIGNER")
	параметрыПроцесса.Добавить("/UpdateDBCfg")
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить("\"File=\"\"%путьКИБ\"\"\"")
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса)
	Консоль.Записать("Конфигурация БД успешно обновлена для конфигурации в ИБ.")
;

метод CreateDistributionFiles(путьКФайлуCF: Строка, путьКИБ: Строка, имяФайлаПлатформы: Строка,
	имяПользователя: Строка = "", пароль: Строка = "")
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("DESIGNER")
	параметрыПроцесса.Добавить("/CreateDistributionFiles")
	параметрыПроцесса.Добавить("-cffile")
	параметрыПроцесса.Добавить(путьКФайлуCF)
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить("\"File=\"\"%путьКИБ\"\"\"")
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса)
	Консоль.Записать("CF Файл поставки успешно создан.")
;

метод LoadExtFromFiles(путьКФайламРасширения: Строка, имяРасширения: Строка, путьКИБ: Строка,
	имяФайлаПлатформы: Строка, имяПользователя: Строка = "", пароль: Строка = "")
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("DESIGNER")
	параметрыПроцесса.Добавить("/LoadConfigFromFiles")
	параметрыПроцесса.Добавить(путьКФайламРасширения)
	параметрыПроцесса.Добавить("-Extension")
	параметрыПроцесса.Добавить(имяРасширения)
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить("\"File=\"\"%путьКИБ\"\"\"")
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса)
	Консоль.Записать("XML файлы расширения успешно загружены в ИБ.")
;

метод LoadExt(путьКФайлуCFE: Строка, имяРасширения: Строка, путьКИБ: Строка, имяФайлаПлатформы: Строка,
	имяПользователя: Строка = "", пароль: Строка = "")
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("DESIGNER")
	параметрыПроцесса.Добавить("/LoadCfg")
	параметрыПроцесса.Добавить(путьКФайлуCFE)
	параметрыПроцесса.Добавить("-Extension")
	параметрыПроцесса.Добавить(имяРасширения)
	параметрыПроцесса.Добавить("-force")
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить("\"File=\"\"%путьКИБ\"\"\"")
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса)
	Консоль.Записать("CFE файл расширения успешно загружен в ИБ.")
;

метод UpdateDBExt(имяРасширения: Строка, путьКИБ: Строка, имяФайлаПлатформы: Строка, имяПользователя: Строка = "",
	пароль: Строка = "")
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("DESIGNER")
	параметрыПроцесса.Добавить("/UpdateDBCfg")
	параметрыПроцесса.Добавить("-Extension")
	параметрыПроцесса.Добавить(имяРасширения)
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить("\"File=\"\"%путьКИБ\"\"\"")
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса)
	Консоль.Записать("Конфигурация БД успешно обновлена для расширения в ИБ.")
;

метод DumpExt(путьКФайлуCFE: Строка, имяРасширения: Строка, путьКИБ: Строка, имяФайлаПлатформы: Строка,
	имяПользователя: Строка = "", пароль: Строка = "")
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("DESIGNER")
	параметрыПроцесса.Добавить("/DumpCfg")
	параметрыПроцесса.Добавить(путьКФайлуCFE)
	параметрыПроцесса.Добавить("-Extension")
	параметрыПроцесса.Добавить(имяРасширения)
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить("\"File=\"\"%путьКИБ\"\"\"")
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса)
	Консоль.Записать("CFE Файл расширения успешно создан.")
;

метод DeleteCfgAllExtensions(путьКИБ: Строка, имяФайлаПлатформы: Строка, имяПользователя: Строка = "",
	пароль: Строка = "")
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("DESIGNER")
	параметрыПроцесса.Добавить("/DeleteCfg")
	параметрыПроцесса.Добавить("-AllExtensions")
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить("\"File=\"\"%путьКИБ\"\"\"")
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса)
	Консоль.Записать("Конфигурация и все расширения удалены из ИБ.")
;

метод ExecuteCommand(именаКоманд: Строка, путьКИБ: Строка, имяФайлаПлатформы: Строка, имяПользователя: Строка = "",
	пароль: Строка = "")
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("ENTERPRISE")
	параметрыПроцесса.Добавить("/C")
	параметрыПроцесса.Добавить(именаКоманд)
	параметрыПроцесса.Добавить("/AllowExecuteScheduledJobs")
	параметрыПроцесса.Добавить("-Off")
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить("\"File=\"\"%путьКИБ\"\"\"")
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса)
	Консоль.Записать("Команда выполнена.")
;

метод ExecuteDataProcessor(имяВнешнейОбработки: Строка, вспомогательныеПараметры: Строка, путьКИБ: Строка, имяФайлаПлатформы: Строка,
	имяПользователя: Строка = "", пароль: Строка = "")
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("ENTERPRISE")
	параметрыПроцесса.Добавить("/Execute")
	параметрыПроцесса.Добавить(имяВнешнейОбработки)
	если не вспомогательныеПараметры.Пусто()
		параметрыПроцесса.Добавить("/C\"%вспомогательныеПараметры\"")
	;
	параметрыПроцесса.Добавить("/IBConnectionString")
	параметрыПроцесса.Добавить("\"File=\"\"%путьКИБ\"\"\"")
	параметрыПроцесса.Добавить("/DisableStartupDialogs")
	параметрыПроцесса.Добавить("/WA-")
	если не имяПользователя.Пусто()
		параметрыПроцесса.Добавить("/N")
		параметрыПроцесса.Добавить("\"%имяПользователя\"")
	;
	если не пароль.Пусто()
		параметрыПроцесса.Добавить("/P")
		параметрыПроцесса.Добавить(пароль)
	;

	ВыполнитьКомандуПлатформыСОжиданием(имяФайлаПлатформы, параметрыПроцесса)
	Консоль.Записать("Обработка выполнена.")
;

метод КодировкаПотокаВыводаПлатформы(): Строка
	если ИспользуемаяОС() == ОперационныеСистемы.Windows
		возврат "windows-1251"
	;

	возврат "UTF-8"
;

метод ВыполнитьКомандуПлатформыСОжиданием(имяКоманды: Строка, параметры: Массив, выводитьОшибки: Булево = Истина)
	знч временныйФайлЛогов = Файлы.СоздатьВременныйФайл()

	параметры.Добавить("/Out")
	параметры.Добавить(временныйФайлЛогов.Путь)

	пер процесс = новый ПроцессОс(имяКоманды, параметры)
	процесс.Запустить()

	исп результатВыполненияСкрипта = процесс.ПолучитьПотокВывода()
	пока не процесс.ОжидатьЗавершения(60с)
		знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакТекст()
		если не текстРезультата.Пусто()
			Консоль.Записать(текстРезультата)
		;
	;
	знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакТекст()
	если не текстРезультата.Пусто()
		Консоль.Записать(текстРезультата)
	;

	знч кодВозврата = процесс.ПолучитьКодВозврата()

	если кодВозврата == 0
	возврат
	;

	пер текстОшибки = "Код возврата: %кодВозврата"
	если не выводитьОшибки
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
	;

	текстОшибки += Строки.Шаблон("\в\нКоманда: $0\в\нПараметры: $1", [имяКоманды, Строки.Соединить(параметры, " ")])

	исп ошибкиВыполненияСкрипта = временныйФайлЛогов.ОткрытьПотокЧтения()
	текстОшибки += "\в\нСодержимое лога:\в\н" + ошибкиВыполненияСкрипта.ПрочитатьКакТекст(КодировкаПотокаВыводаПлатформы())
	выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
;

/*
	* Пакетный режим EDT
	*/
метод WorkspaceExport(путьККонфигурацииЕДТ: Строка, путьККонфигурацииПлатформы: Строка, путьКРабочейОбласти: Строка, версияЕДТ: Строка =
	"")
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("-l")
	параметрыПроцесса.Добавить("error")
	если версияЕДТ.Пусто()
		параметрыПроцесса.Добавить("edt")
	иначе
		параметрыПроцесса.Добавить("edt@" + версияЕДТ)
	;
	параметрыПроцесса.Добавить("workspace")
	параметрыПроцесса.Добавить("export")
	параметрыПроцесса.Добавить("--project")
	параметрыПроцесса.Добавить(путьККонфигурацииЕДТ)
	параметрыПроцесса.Добавить("--configuration-files")
	параметрыПроцесса.Добавить(путьККонфигурацииПлатформы)
	параметрыПроцесса.Добавить("--workspace-location")
	параметрыПроцесса.Добавить(путьКРабочейОбласти)

	ВыполнитьКомандуRingEDT(параметрыПроцесса)
;

метод WorkspaceValidate(файлРезультатовВалидации: Строка, путьККонфигурацииЕДТ: Строка, путьКРабочейОбласти: Строка, версияЕДТ: Строка =
	"")
	пер параметрыПроцесса = новый Массив()
	параметрыПроцесса.Добавить("-l")
	параметрыПроцесса.Добавить("error")
	если версияЕДТ.Пусто()
		параметрыПроцесса.Добавить("edt")
	иначе
		параметрыПроцесса.Добавить("edt@" + версияЕДТ)
	;
	параметрыПроцесса.Добавить("workspace")
	параметрыПроцесса.Добавить("validate")
	параметрыПроцесса.Добавить("--project-list")
	параметрыПроцесса.Добавить(путьККонфигурацииЕДТ)
	параметрыПроцесса.Добавить("--workspace-location")
	параметрыПроцесса.Добавить(путьКРабочейОбласти)
	параметрыПроцесса.Добавить("--file")
	параметрыПроцесса.Добавить(файлРезультатовВалидации)

	ВыполнитьКомандуRingEDT(параметрыПроцесса)
;

метод ВыполнитьКомандуRingEDT(параметры: Массив)
	пер имяКоманды = ""
	знч версияОС = ИспользуемаяОС()
	выбор версияОС
	когда ОперационныеСистемы.Windows
		имяКоманды = "ring.cmd"
	иначе
		имяКоманды = "ring"
	;

	пер процесс = новый ПроцессОс(имяКоманды, параметры, Ложь)
	процесс.Запустить()
	исп результатВыполненияСкрипта = процесс.ПолучитьПотокВывода()

	пока не процесс.ОжидатьЗавершения(60с)
		знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакТекст()
		если не текстРезультата.Пусто()
			Консоль.Записать(текстРезультата)
		;
	;

	знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакТекст()
	если не текстРезультата.Пусто()
		Консоль.Записать(текстРезультата)
	;

	знч кодВозврата = процесс.ПолучитьКодВозврата()

	если кодВозврата == 0
	возврат
	;

	пер текстОшибки = "Код возврата: %кодВозврата"

	текстОшибки += Строки.Шаблон("\в\нКоманда: $0\в\нПараметры: $1", [имяКоманды, Строки.Соединить(параметры, " ")])

	исп ошибкиВыполненияСкрипта = процесс.ПолучитьПотокОшибок()
	текстОшибки += "\в\н" + ошибкиВыполненияСкрипта.ПрочитатьКакТекст(КодировкаПотокаВыводаПлатформы())
	выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
;

метод ЗаписатьОшибкиВФорматSonarCube(файлSonarQube: Строка, данныеОшибок: SonarqubeGenericFormat)
	знч файлПараметров = новый Файл(файлSonarQube)
	исп поток = файлПараметров.ОткрытьПотокЗаписи()

	СериализацияJson.ЗаписатьОбъект(поток, данныеОшибок)
;

метод ЗаписатьОшибкиВФорматJUnit(файлJUnit: Строка, данныеОшибок: SonarqubeGenericFormat)
	знч файлПараметров = новый Файл(файлJUnit)
	исп поток = файлПараметров.ОткрытьПотокЗаписи()

	пер записьXML = новый ЗаписьXml(поток)

	пер количествоОшибок = 0
	для ошибка из данныеОшибок.issues
		если ошибка.type == SonarqubeType.BUG
			количествоОшибок += 1
		;
	;

	записьXML.ЗаписатьНачалоДокумента()
	
	записьXML.ЗаписатьНачалоЭлемента("testsuites")
	записьXML
		.ЗаписатьНачалоЭлемента("testsuite")
		.ЗаписатьАтрибут("name", "EDT Workspace Validate")
		.ЗаписатьАтрибут("errors", Строка(количествоОшибок))
		.ЗаписатьАтрибут("skipped", "0")
		.ЗаписатьАтрибут("tests", Строка(количествоОшибок))
		.ЗаписатьАтрибут("failures", "0")
		.ЗаписатьАтрибут("time", "0")
	
	для ошибка из данныеОшибок.issues
		если ошибка.type != SonarqubeType.BUG
			продолжить
		;
		записьXML
			.ЗаписатьНачалоЭлемента("testcase")
			.ЗаписатьАтрибут("name", ошибка.ruleId)
			.ЗаписатьАтрибут("classname", ошибка.primaryLocation.filePath)
			.ЗаписатьАтрибут("time", "0")
	
		записьXML
			.ЗаписатьНачалоЭлемента("error")
			.ЗаписатьТекст("%{ошибка.primaryLocation.message}\в\нСтрока: %{ошибка.primaryLocation.textRange.startLine}")
			.ЗаписатьКонецЭлемента()
	
		записьXML.ЗаписатьКонецЭлемента()
	;
	
	записьXML.ЗаписатьКонецЭлемента()
	записьXML.ЗаписатьКонецЭлемента()
	
	записьXML.ЗаписатьКонецДокумента()

;

метод ОшибкиВФорматеSonarCube(файлРезультатовВалидации: Строка): SonarqubeGenericFormat
	знч файл = новый Файл(файлРезультатовВалидации)
	исп поток = файл.ОткрытьПотокЧтения()

	пер issues = новый Массив()
	пер rules = новый Массив()
	пер соответствиеПравил = новый Соответствие()

	знч чтение = новый ЧтениеДанных(поток)
	пока не чтение.ЧтениеЗавершено()
		знч строкаДанных = чтение.ПрочитатьСтроку()
		если строкаДанных.Пусто()
		продолжить
		;

		знч описаниеОшибки = ОшибкаEDT(строкаДанных)
		если описаниеОшибки == Неопределено
		продолжить
		;

		знч issue = IssueИзСтрокиTSV(описаниеОшибки)
		issues.Добавить(issue)

		соответствиеПравил.Вставить(issue.ruleId, RuleИзIssue(issue))
	;

	для правило из соответствиеПравил
		rules.Добавить(правило.Значение)
	;

	возврат новый SonarqubeGenericFormat(issues, rules)
;


структура ОписаниеОшибкиEDT
	знч создано: ДатаВремя
	знч серьезность: Строка
	знч проект: Строка
	знч объект: Строка
	знч положение: Число
	знч описание: Строка
	пер источник: Строка
	пер ид: Строка
	пер контекст: Массив

	конструктор(создано, серьезность, проект, объект, положение, описание)
;


метод ОшибкаEDT(строкаДанных: Строка): ОписаниеОшибкиEDT?
	знч массивДанных = строкаДанных.Разделить("\т", Истина)

	если массивДанных[4].Пусто() или не массивДанных[4].НачинаетсяС("строка")
		возврат Неопределено
	;

	знч создано = новый ДатаВремя(массивДанных[0].Подстрока(0, 19))
	знч положение = Число(массивДанных[4].Подстрока(7))
	знч описание = массивДанных[5]

	пер описаниеОшибки = новый ОписаниеОшибкиEDT(создано, массивДанных[1], массивДанных[2], массивДанных[3],
		положение, описание)
	описаниеОшибки.источник = "EDT"

	пер ид = описание
	знч позицияНачалаКонтекста = ид.Найти("[")
	если позицияНачалаКонтекста != -1
		ид = ид.Подстрока(0, позицияНачалаКонтекста - 1)
	;

	для номер = 0 по 9
		ид = ид.Заменить("('%номер')", "{%номер}")
	;

	пер номерПараметра = 0
	пока ид.Найти("\"") != -1
		знч началоПараметра = ид.Найти("\"")
		ид = ид.Заменить("\"", "{", Истина)
		знч окончаниеПараметра = ид.Найти("\"")
		ид = ид.Заменить("\"", "}", Истина)
		ид = ид.Подстрока(0, началоПараметра + 1) + Строка(номерПараметра) + ид.Подстрока(окончаниеПараметра)
		номерПараметра = номерПараметра + 1
	;
	пока ид.Найти("'") != -1
		знч началоПараметра = ид.Найти("'")
		ид = ид.Заменить("'", "{", Истина)
		знч окончаниеПараметра = ид.Найти("'")
		ид = ид.Заменить("'", "}", Истина)
		ид = ид.Подстрока(0, началоПараметра + 1) + Строка(номерПараметра) + ид.Подстрока(окончаниеПараметра)
		номерПараметра = номерПараметра + 1
	;

	для номер = 0 по 9
		ид = ид.Заменить("({%номер})", "{%номер}")
	;

	ид = ид.Заменить(",", "")

	описаниеОшибки.ид = ид

	возврат описаниеОшибки
;

метод ПутьКФайлуПоОбъекту(описаниеОшибки: ОписаниеОшибкиEDT): Строка
	пер массивОбъекта = описаниеОшибки.объект.Разделить(".")

	пер объектМетаданных = массивОбъекта[0]
	выбор объектМетаданных
	когда "РегистрБухгалтерии"
		объектМетаданных = "AccountingRegisters"
	когда "РегистрНакопления"
		объектМетаданных = "AccumulationRegisters"
	когда "БизнесПроцесс"
		объектМетаданных = "BusinessProcesses"
	когда "РегистрРасчета"
		объектМетаданных = "CalculationRegisters"
	когда "Справочник"
		объектМетаданных = "Catalogs"
	когда "ПланСчетов"
		объектМетаданных = "ChartsOfAccounts"
	когда "ПланВидовРасчета"
		объектМетаданных = "ChartsOfCalculationTypes"
	когда "ПланВидовХарактеристик"
		объектМетаданных = "ChartsOfCharacteristicTypes"
	когда "ГруппаКоманд"
		объектМетаданных = "CommandGroups"
	когда "ОбщаяКоманда"
		объектМетаданных = "CommonCommands"
	когда "ОбщаяФорма"
		объектМетаданных = "CommonForms"
	когда "ОбщийМодуль"
		объектМетаданных = "CommonModules"
	когда "Конфигурация"
		объектМетаданных = "Configuration"
	когда "Константа"
		объектМетаданных = "Constants"
	когда "Обработка"
		объектМетаданных = "DataProcessors"
	когда "ЖурналДокумента"
		объектМетаданных = "DocumentJournals"
	когда "Документ"
		объектМетаданных = "Documents"
	когда "Перечисление"
		объектМетаданных = "Enums"
	когда "ПодпискаНаСобытие"
		объектМетаданных = "EventSubscriptions"
	когда "ПланОбмена"
		объектМетаданных = "ExchangePlans"
	когда "КритерийОтбора"
		объектМетаданных = "FilterCriteria"
	когда "HTTPСервис"
		объектМетаданных = "HTTPServices"
	когда "РегистрСведений"
		объектМетаданных = "InformationRegisters"
	когда "Отчет"
		объектМетаданных = "Reports"
	когда "ХранилищеНастроек"
		объектМетаданных = "SettingsStorages"
	когда "Задача"
		объектМетаданных = "Tasks"
	когда "WebСервис"
		объектМетаданных = "WebServices"
	когда "WSСсылка"
		объектМетаданных = "WSReferences"
	иначе
		выбросить новый ИсключениеНедопустимоеСостояние("Неизвестный объект метаданных %{описаниеОшибки.объект}")
	;

	пер имяМодуля = массивОбъекта[массивОбъекта.Размер() - 1]
	выбор имяМодуля
	когда "МодульКоманды"
		имяМодуля = "CommandModule"
	когда "МодульУправляемогоПриложения"
		имяМодуля = "ManagedApplicationModule"
	когда "МодульМенеджера"
		имяМодуля = "ManagerModule"
	когда "Модуль"
		имяМодуля = "Module"
	когда "МодульОбъекта"
		имяМодуля = "ObjectModule"
	когда "МодульОбычногоПриложения"
		имяМодуля = "OrdinaryApplicationModule"
	когда "МодульНабораЗаписей"
		имяМодуля = "RecordSetModule"
	когда "МодульСеанса"
		имяМодуля = "SessionModule"
	когда "МодульМенеджераЗначения"
		имяМодуля = "ValueManagerModule"
	иначе
		выбросить новый ИсключениеНедопустимоеСостояние("Неизвестный модуль %{описаниеОшибки.объект}")
	;

	массивОбъекта.УдалитьПоИндексу(0)
	массивОбъекта.УдалитьПоИндексу(массивОбъекта.Размер() - 1)
	пер наименованиеОбъекта = Строки.Соединить(массивОбъекта, ".")

	возврат "src\\%объектМетаданных\\%наименованиеОбъекта\\%имяМодуля.bsl"
;

метод IssueИзСтрокиTSV(описаниеОшибки: ОписаниеОшибкиEDT): SonarqubeIssue
	знч engineId = описаниеОшибки.источник
	знч ruleId = описаниеОшибки.ид
	пер primaryLocation = новый SonarqubeLocation(описаниеОшибки.описание, ПутьКФайлуПоОбъекту(описаниеОшибки))
	primaryLocation.textRange = новый SonarqubeTextRange(описаниеОшибки.положение)
	пер type = SonarqubeType.CODE_SMELL
	пер severity = SonarqubeSeverity.INFO
	если описаниеОшибки.серьезность == "Ошибка"
		type = SonarqubeType.BUG
		severity = SonarqubeSeverity.MAJOR
	;
	выбор ruleId
	когда "Свойство (метод) объекта не обнаружено"
		type = SonarqubeType.BUG
		severity = SonarqubeSeverity.MINOR
	когда "Элемент с таким именем уже есть в глобальном контексте"
		type = SonarqubeType.BUG
		severity = SonarqubeSeverity.MINOR
	когда "Неизвестное имя типа {0}"
		type = SonarqubeType.BUG
		severity = SonarqubeSeverity.MINOR
	когда "Тип {0} неопределен"
		если описаниеОшибки.описание.НачинаетсяС("Тип 'РеквизитФормы' неопределен")
			type = SonarqubeType.CODE_SMELL
		иначе
			type = SonarqubeType.BUG
		;
		severity = SonarqubeSeverity.MINOR
	;

	знч issue = новый SonarqubeIssue(engineId, ruleId, primaryLocation, type, severity)

	возврат issue
;

метод RuleИзIssue(issue: SonarqubeIssue): BslLsRule
	возврат новый BslLsRule(issue.engineId, issue.ruleId, issue.ruleId, issue.type, issue.severity, issue.ruleId)
;


/*
	* GitLab API
	*/
структура Commits_List_Data
	пер id: Строка
	пер ref_name: Строка
	пер since: Строка
	пер until: Строка
	пер path: Строка
	пер all: Булево
	пер with_stats: Булево
	пер first_parent: Булево
	пер order: Строка = "default"

	конструктор(id)
;

структура Releases_Create_Data
	пер id: Строка
	пер name: Строка
	пер tag_name: Строка
	пер description: Строка
	пер ref: Строка
	пер assets: Releases_Create_Assets_Data
	пер released_at: ДатаВремя

	конструктор(id, tag_name, ref, assets, released_at)
;


перечисление Releases_Create_Asset_LinkType
	other умолчание,
	runbook,
	image,
	package
;


структура Releases_Create_Assets_Data
	пер links: Массив
;

структура Releases_Create_Assets_Link_Data
	пер name: Строка
	пер url: Строка
//    пер filepath: Строка
	пер link_type: Releases_Create_Asset_LinkType

	конструктор(name, url)
;

структура ОписаниеАссетов
	пер имяПроекта: Строка
	пер идЗадания: Строка
	пер списокДвоичныхФайлов: Массив
;


метод Commits_List_Since(имяВетки: Строка, имяПроекта: Строка, токен: Строка, адресСервера: Строка,
	датаС: ДатаВремя): Массив
	возврат Commits_List(имяВетки, имяПроекта, токен, адресСервера, "since", датаС)
;

метод Commits_List_Until(имяВетки: Строка, имяПроекта: Строка, токен: Строка, адресСервера: Строка,
	датаПо: ДатаВремя): Массив
	возврат Commits_List(имяВетки, имяПроекта, токен, адресСервера, "until", датаПо)
;

метод Commits_List(имяВетки: Строка, имяПроекта: Строка, токен: Строка, адресСервера: Строка, условиеНаДату: Строка,
	дата: ДатаВремя): Массив
	знч имяПроектаКодированное = имяПроекта.Заменить("/", "\%2F")

	пер строкаЗапроса = "https://%адресСервера/api/v4/projects/%имяПроектаКодированное/repository/commits?ref_name=%имяВетки"
	если не условиеНаДату.Пусто()
		строкаЗапроса += "&%условиеНаДату=%дата"
	;
	пер запрос = КлиентHttp.ЗапросGet(строкаЗапроса)
	запрос.ДобавитьЗаголовок("PRIVATE-TOKEN", токен)

	исп ответ = запрос.Выполнить()

	если ответ.КодСостояния != 200
		знч текстОшибки = Строки.Шаблон(
			"Строка запроса: $0\в\нКод состояния: $1, причина: $2\в\нТекст ответа:\в\н$3\в\н", [строкаЗапроса, ответ
			.КодСостояния, ответ.Причина, ответ.Тело.ПрочитатьКакТекст()])
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
	;

	знч данные = СериализацияJson.ПрочитатьМассив(ответ.Тело)

	возврат данные
;

метод Commits_LastDate_Since(имяВетки: Строка, имяПроекта: Строка, токен: Строка, адресСервера: Строка,
	датаС: ДатаВремя): ДатаВремя
	знч коммиты = Commits_List_Since(имяВетки, имяПроекта, токен, адресСервера, датаС)

	если коммиты.Пусто()
		возврат новый ДатаВремя(1, 1, 1)
	;

	возврат коммиты.Первый().created_at
;

метод Commits_LastDate_Until(имяВетки: Строка, имяПроекта: Строка, токен: Строка, адресСервера: Строка,
	датаПо: ДатаВремя): ДатаВремя
	знч коммиты = Commits_List_Until(имяВетки, имяПроекта, токен, адресСервера, датаПо)

	если коммиты.Пусто()
		возврат новый ДатаВремя(1, 1, 1)
	;

	возврат коммиты.Первый().created_at
;

метод Jobs_Cancel(идЗадания: Строка, идПроекта: Строка, токен: Строка, адресСервера: Строка)
	знч строкаЗапроса = "https://%адресСервера/api/v4/projects/%идПроекта/jobs/%идЗадания/cancel"
	пер запрос = КлиентHttp.ЗапросPost(строкаЗапроса)
	запрос.ДобавитьЗаголовок("PRIVATE-TOKEN", токен)

	исп ответ = запрос.Выполнить()

	если ответ.КодСостояния != 201
		знч текстОшибки = Строки.Шаблон(
			"Строка запроса: $0\в\нКод состояния: $1, причина: $2\в\нТекст ответа:\в\н$3\в\н", [строкаЗапроса, ответ
			.КодСостояния, ответ.Причина, ответ.Тело.ПрочитатьКакТекст()])
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
	;

	Консоль.Записать("Задание прервано.")
;

метод JobArtifacts_DownloadFile(имяФайла: Строка, имяЗадания: Строка, имяВетки: Строка, идПроекта: Строка, токен: Строка,
	адресСервера: Строка): Булево
	знч строкаЗапроса = "https://%адресСервера/api/v4/projects/%идПроекта/jobs/artifacts/%имяВетки/raw/%имяФайла?job=%имяЗадания"
	пер запрос = КлиентHttp.ЗапросGet(строкаЗапроса)
	запрос.ДобавитьЗаголовок("PRIVATE-TOKEN", токен)

	пер ответ = запрос.Выполнить()

	если ответ.КодСостояния != 200 и ответ.КодСостояния != 404
		пер текстОтвета = ""
		попытка
			текстОтвета = ответ.Тело.ПрочитатьКакТекст()
		поймать исключение: любой
			Консоль.Записать("Было исключение %исключение")
		;

		знч текстОшибки = Строки.Шаблон(
			"Строка запроса: $0\в\нКод состояния: $1, причина: $2\в\нТекст ответа:\в\н$3\в\н", [строкаЗапроса, ответ
			.КодСостояния, ответ.Причина, текстОтвета])
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
	;

	пер результат = Ложь
	если ответ.КодСостояния == 200
		исп потокЗаписи = новый Файл(имяФайла).ОткрытьПотокЗаписи()
		ответ.Тело.КопироватьВ(потокЗаписи)

		Консоль.Записать("Файл загружен.")
		результат = Истина
	иначе
		Консоль.Записать("Файл для загрузки отсутствует.")
	;

	попытка
		ответ.Закрыть()
	поймать исключение: любой
		Консоль.Записать("Было исключение %исключение")
	;

	возврат результат
;

метод Pipelines_ListJobs(идСборочнойЛинии: Строка, идПроекта: Строка, токен: Строка, адресСервера: Строка)
	знч строкаЗапроса = "https://%адресСервера/api/v4/projects/%идПроекта/pipelines/%идСборочнойЛинии/jobs?scope[]=success"
	пер запрос = КлиентHttp.ЗапросGet(строкаЗапроса)
	запрос.ДобавитьЗаголовок("PRIVATE-TOKEN", токен)

	исп ответ = запрос.Выполнить()

	если ответ.КодСостояния != 200
		знч текстОшибки = Строки.Шаблон(
			"Строка запроса: $0\в\нКод состояния: $1, причина: $2\в\нТекст ответа:\в\н$3\в\н", [строкаЗапроса, ответ
			.КодСостояния, ответ.Причина, ответ.Тело.ПрочитатьКакТекст()])
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
	;

	знч данные = СериализацияJson.ПрочитатьОбъект(ответ.Тело)

	Консоль.Записать("Список заданий получен.")
;

метод Releases_Create(датаРелиза: ДатаВремя, тег: Строка, имя: Строка, описание: Строка,
	ссылки: Массив, идКоммита: Строка, идПроекта: Строка, токен: Строка, адресСервера: Строка)
	пер ассеты = новый Releases_Create_Assets_Data(ссылки)
	пер параметры = новый Releases_Create_Data(идПроекта, тег, идКоммита, ассеты, датаРелиза)
	параметры.name = имя
	параметры.description = описание

	исп поток = новый СтроковыйПотокЗаписи()
	СериализацияJson.ЗаписатьОбъект(поток, параметры)

	знч строкаЗапроса = "https://%адресСервера/api/v4/projects/%идПроекта/releases"
	пер запрос = КлиентHttp.ЗапросPost(строкаЗапроса)
	запрос.ДобавитьЗаголовок("JOB-TOKEN", токен)

	запрос.УстановитьТипСодержимого("application/json")
	запрос.УстановитьТело(поток.ВСтроку())

	исп ответ = запрос.Выполнить()

	если ответ.КодСостояния != 201
		знч текстОшибки = Строки.Шаблон(
			"Строка запроса: $0\в\нКод состояния: $1, причина: $2\в\нТекст ответа:\в\н$3\в\нТекст запроса:\в\н$4", [
			строкаЗапроса, ответ.КодСостояния, ответ.Причина, ответ.Тело.ПрочитатьКакТекст(), поток.ВСтроку()])
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
	;

	Консоль.Записать("Релиз создан.")
;

метод Releases_List(идПроекта: Строка, токен: Строка, адресСервера: Строка): Массив
	знч строкаЗапроса = "https://%адресСервера/api/v4/projects/%идПроекта/releases"
	пер запрос = КлиентHttp.ЗапросGet(строкаЗапроса)
	запрос.ДобавитьЗаголовок("PRIVATE-TOKEN", токен)

	исп ответ = запрос.Выполнить()

	если ответ.КодСостояния != 200
		знч текстОшибки = Строки.Шаблон(
			"Строка запроса: $0\в\нКод состояния: $1, причина: $2\в\нТекст ответа:\в\н$3\в\н", [строкаЗапроса, ответ
			.КодСостояния, ответ.Причина, ответ.Тело.ПрочитатьКакТекст()])
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
	;

	знч данные = СериализацияJson.ПрочитатьМассив(ответ.Тело)

	возврат данные
;

метод Releases_LastDate(идПроекта: Строка, токен: Строка, адресСервера: Строка): ДатаВремя
	знч релизы = Releases_List(идПроекта, токен, адресСервера)

	если релизы.Пусто()
		возврат новый ДатаВремя(1, 1, 1)
	;

	возврат новый ДатаВремя(релизы[0]["created_at"].Подстрока(0, 19))
;

метод ЗаписатьОписаниеАссетов(файлОписанияАссертов: Строка, имяПроекта: Строка, идЗадания: Строка, списокДвоичныхФайлов: Массив)
	знч описаниеАссетов = новый ОписаниеАссетов(имяПроекта, идЗадания, списокДвоичныхФайлов)

	знч файлПараметров = новый Файл(файлОписанияАссертов)
	исп поток = файлПараметров.ОткрытьПотокЗаписи()
	СериализацияJson.ЗаписатьОбъект(поток, описаниеАссетов)
;

метод ПрочитатьОписаниеАссетов(файлОписанияАссертов: Строка): ОписаниеАссетов
	знч файл = новый Файл(файлОписанияАссертов)
	исп поток = файл.ОткрытьПотокЧтения()

	возврат СериализацияJson.ПрочитатьОбъект(поток, Тип(ОписаниеАссетов)) как ОписаниеАссетов
;

метод Commits_List_Data_НастройкиЗаписиJson(данные: Commits_List_Data): НастройкиЗаписиОбъектовJson
	пер настройки = новый НастройкиЗаписиОбъектовJson()

	пер игнорируемыеСвойства = новый Массив()
	знч всеСтроковыеСвойства = ["ref_name", "since", "until", "path"]
	для свойство из всеСтроковыеСвойства
		если (данные[свойство] как Строка).Пусто()
			игнорируемыеСвойства.Добавить(свойство)
		;
	;
	знч всеБулевоСвойства = ["all", "with_stats", "first_parent"]
	для свойство из всеБулевоСвойства
		если не (данные[свойство] как Булево)
			игнорируемыеСвойства.Добавить(свойство)
		;
	;

	настройки.ИгнорируемыеСвойства = {Тип(Commits_List_Data) : новый Множество(игнорируемыеСвойства)}

	возврат настройки
;

/* 
	* Методы для вызова других скриптов. Необходимо копировать в свой скрипт
	*/
метод ВыполнитьСкрипт(имяФайлаСкрипта: Строка, имяКомандыСкрипта: Строка, параметрыСкрипта: Массив): ПотокЧтения
	пер расширениеИсполнителя: Строка
	знч имяОС = СредаИсполнения.ПолучитьСвойство("os.name")
	выбор когда имяОС.НачинаетсяС("windows", Истина)
		расширениеИсполнителя = "cmd"
	иначе
		расширениеИсполнителя = "sh"
	;
	знч путьКИсполнителю = СредаИсполнения.ПолучитьСвойство("logback.configurationFile").Удалить("config" + Файлы
		.СимволРазделителя + "logback.xml") + "bin/executor_j11." + расширениеИсполнителя

	знч командаТекущегоСкрипта = СредаИсполнения.ПолучитьСвойство("sun.java.command")
	пер имяФайлаТекущегоСкрипта = командаТекущегоСкрипта.Подстрока(0, командаТекущегоСкрипта.Найти(".sbsl") + 5)
	имяФайлаТекущегоСкрипта = имяФайлаТекущегоСкрипта.Подстрока(имяФайлаТекущегоСкрипта.Найти(" ") + 1)
	имяФайлаТекущегоСкрипта = имяФайлаТекущегоСкрипта.Подстрока(имяФайлаТекущегоСкрипта.Найти(" ") + 1)
	знч файлТекущегоСкрипта = новый Файл(имяФайлаТекущегоСкрипта)
	пер путьТекущегоСкрипта = ""
	если файлТекущегоСкрипта.Каталог != Неопределено
		путьТекущегоСкрипта = файлТекущегоСкрипта.Каталог.Путь + Файлы.СимволРазделителя
	;

	пер аргументыПроцессаОс = ["-s", путьТекущегоСкрипта + имяФайлаСкрипта, "-m", имяКомандыСкрипта]
	если не параметрыСкрипта.Пусто()
		аргументыПроцессаОс.ДобавитьВсе(параметрыСкрипта)
	;

	пер библиотека = новый ПроцессОс(путьКИсполнителю, аргументыПроцессаОс, Ложь)

	библиотека.Запустить()
	библиотека.ОжидатьЗавершения()

	исп ошибкиВыполненияСкрипта = библиотека.ПолучитьПотокОшибок()
	знч текстОшибок = ошибкиВыполненияСкрипта.ПрочитатьКакТекст(КодировкаПотокаВыводаСкриптов())
	если не текстОшибок.Пусто()
		выбросить новый ИсключениеНедопустимоеСостояние(текстОшибок)
	;

	возврат библиотека.ПотокВывода
;

метод КодировкаПотокаВыводаСкриптов(): Строка
	возврат СредаИсполнения.ПолучитьСвойство("file.encoding")
;

метод НастройкиПотокаВыводаСкриптов(): НастройкиЧтенияДанных
	пер настройкиПотокаВывода = новый НастройкиЧтенияДанных()
	настройкиПотокаВывода.Кодировка = КодировкаПотокаВыводаСкриптов()

	возврат настройкиПотокаВывода
;

метод ОбъектИзПотокаВывода(потокВывода: ПотокЧтения): Строка|Массив|Соответствие
	пер массивСтрок: Массив

	знч результатВыполненияСкрипта = новый ЧтениеДанных(потокВывода, НастройкиПотокаВыводаСкриптов())
	пока не результатВыполненияСкрипта.ЧтениеЗавершено()
		знч прочитаннаяСтрока = результатВыполненияСкрипта.ПрочитатьСтроку()

		если прочитаннаяСтрока.Пусто()
		продолжить
		;

		выбор прочитаннаяСтрока[0]
		когда "["
			знч результатМассивом = МассивИзСтроки(прочитаннаяСтрока)
			если результатМассивом.Размер() == 1
				массивСтрок.Добавить(результатМассивом[0])
			иначе
				возврат результатМассивом
		;
		когда "{"
			возврат СоответствиеИзСтроки(прочитаннаяСтрока)

		иначе
			массивСтрок.Добавить(прочитаннаяСтрока)
		;
	;
	возврат массивСтрок
;

метод МассивИзСтроки(строкаПотокаВывода: Строка): Массив
	знч результатСтрокой = строкаПотокаВывода.Подстрока(1, строкаПотокаВывода.Длина() - 1)
	знч результатМассивом = результатСтрокой.Разделить(", ", Ложь)
	возврат результатМассивом
;

метод СоответствиеИзСтроки(строкаПотокаВывода: Строка): Соответствие
	пер результатСоответствием: Соответствие

	знч результатСтрокой = строкаПотокаВывода.Подстрока(1, строкаПотокаВывода.Длина() - 1)

	знч результатМассивом = результатСтрокой.Разделить(", ")
	для строкаРезультата из результатМассивом
		знч ключИЗначение = строкаРезультата.Разделить("=")

		результатСоответствием.Вставить(ключИЗначение[0], ключИЗначение[1])
	;

	возврат результатСоответствием
;


/* 
	* Sonarqube API
	*/
структура SonarqubeGenericFormat
	знч issues: Массив
	знч rules: Массив
;

структура SonarqubeTextRange
	знч startLine: Число

//	пер endLine: Число = 0
//	пер startColumn: Число = 0
//	пер endColumn: Число = 0
	конструктор(startLine)
;

структура SonarqubeLocation
	знч message: Строка
	знч filePath: Строка
	пер textRange: SonarqubeTextRange?

	конструктор(message, filePath)
;


перечисление SonarqubeType
	BUG,
	VULNERABILITY,
	CODE_SMELL
;

перечисление SonarqubeSeverity
	BLOCKER,
	CRITICAL,
	MAJOR,
	MINOR,
	INFO
;


структура SonarqubeIssue
	знч engineId: Строка
	знч ruleId: Строка
	знч primaryLocation: SonarqubeLocation
	знч type: SonarqubeType
	знч severity: SonarqubeSeverity

//	пер effortMinutes: Число = 0
//	пер secondaryLocations: SonarqubeLocation?
	конструктор(engineId, ruleId, primaryLocation, type, severity)
;

структура BslLsRule
	знч engineId: Строка
	знч ruleId: Строка
	знч name: Строка
	знч type: SonarqubeType
	знч severity: SonarqubeSeverity
	знч description: Строка
;


метод DecToHex(десятичноеЧисло: Число): Строка
	пер база = 16

	пер результат = ""

	пока десятичноеЧисло != 0
		пер поз = десятичноеЧисло % база

		результат = "0123456789ABCDEF".Символ(поз) + результат

		десятичноеЧисло = (десятичноеЧисло / база).ЦелаяЧасть()
	;
	результат = "0000" + результат

	возврат результат.ПодстрокаСКонца(4)
;

метод СтрокуВUnicode(исходнаяСтрока: Строка): Строка
	пер результат = ""

	пер кодыДопустимыхСимволов = новый Массив()
	кодыДопустимыхСимволов.Добавить(1105) // "ё"
	кодыДопустимыхСимволов.Добавить(1025) // "Ё"

	для номер = 0 по исходнаяСтрока.Длина() - 1
		знч кодСимвола = Символы.ПолучитьКод(исходнаяСтрока.Символ(номер))
		знч оставить = ((кодСимвола < 1040) или (кодСимвола > 1103)) и (кодыДопустимыхСимволов.Найти(кодСимвола)
			== Неопределено)
		если оставить
			результат += исходнаяСтрока.Символ(номер)
		иначе
			результат += "\\u" + DecToHex(кодСимвола)
		;
	;

	возврат результат
;

метод СохранитьНастройкиСканера(имяФайлаПараметров: Строка, сервер: Строка, ключПроекта: Строка, наименованиеПроекта: Строка,
	версияПроекта: Строка, путьКонфигурацииЕДТ: Строка, файлSonarQube: Строка)
	знч файлПараметров = новый Файл(имяФайлаПараметров)
	исп поток = файлПараметров.ОткрытьПотокЗаписи()

	пер запись = новый ЗаписьДанных(поток)

	знч наименованиеПроектаUnicode = СтрокуВUnicode(наименованиеПроекта)
	знч путьКонфигурацииЕДТUnicode = СтрокуВUnicode(путьКонфигурацииЕДТ.Заменить("\\", "/"))
	знч файлSonarQubeUnicode = СтрокуВUnicode(файлSonarQube.Заменить("\\", "/"))

	запись.ЗаписатьСтроку("sonar.host.url=%сервер")
	запись.ЗаписатьСтроку("sonar.projectKey=%ключПроекта")
	запись.ЗаписатьСтроку("sonar.projectName=%наименованиеПроектаUnicode")
	запись.ЗаписатьСтроку("sonar.projectVersion=%версияПроекта")
	запись.ЗаписатьСтроку("sonar.sourceEncoding=UTF-8")
	запись.ЗаписатьСтроку("sonar.inclusions=**/*.bsl")
	запись.ЗаписатьСтроку("sonar.sources=src")
	запись.ЗаписатьСтроку("sonar.projectBaseDir=%путьКонфигурацииЕДТUnicode")
	запись.ЗаписатьСтроку("sonar.scm.enabled=true")
	запись.ЗаписатьСтроку("sonar.scm.provider=git")
	запись.ЗаписатьСтроку("sonar.externalIssuesReportPaths=%файлSonarQubeUnicode")
;

метод ЗапуститьSonarScanner(имяФайлаПараметров: Строка, токен: Строка)
	знч SONARQUBE_PATH = СредаИсполнения.ПолучитьПеременную("SONARQUBE_PATH")

	пер имяКоманды = ""
	знч версияОС = ИспользуемаяОС()
	выбор версияОС
	когда ОперационныеСистемы.Windows
		имяКоманды = "%SONARQUBE_PATH/sonar-scanner.bat"
	иначе
		имяКоманды = "%SONARQUBE_PATH/sonar-scanner"
	;

	пер параметры = новый Массив()
	параметры.Добавить("-Dproject.settings=\"%имяФайлаПараметров\"")
	параметры.Добавить("-D\"sonar.login=%токен\"")

	пер процесс = новый ПроцессОс(имяКоманды, параметры, Ложь)
	процесс.Запустить()
	исп результатВыполненияСкрипта = процесс.ПолучитьПотокВывода()

	пока не процесс.ОжидатьЗавершения(60с)
		знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакТекст()
		если не текстРезультата.Пусто()
			Консоль.Записать(текстРезультата)
		;
	;

	знч текстРезультата = результатВыполненияСкрипта.ПрочитатьКакТекст()
	если не текстРезультата.Пусто()
		Консоль.Записать(текстРезультата)
	;

	знч кодВозврата = процесс.ПолучитьКодВозврата()

	если кодВозврата == 0
		Консоль.Записать("SonarQube Scanner успешно запущен.")
	возврат
	;

	пер текстОшибки = "Код возврата: %кодВозврата"

	текстОшибки += Строки.Шаблон("\в\нКоманда: $0\в\нПараметры: $1", [имяКоманды, Строки.Соединить(параметры, " ")])

	исп ошибкиВыполненияСкрипта = процесс.ПолучитьПотокОшибок()
	текстОшибки += "\в\н" + ошибкиВыполненияСкрипта.ПрочитатьКакТекст(КодировкаПотокаВыводаПлатформы())
	выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
;