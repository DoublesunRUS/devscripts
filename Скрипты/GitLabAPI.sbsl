#!/usr/bin/executor

/*******************************************************************************
 * Copyright (c) 2020 Alexander Kapralov and Contributors
 * This program and the accompanying materials are made available under
 * the terms of the BSD 3-Clause License which is available at
 * https://spdx.org/licenses/BSD-3-Clause.html#licenseText
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Contributors:
 *    
 *
 ******************************************************************************/

структура Releases_Create_Data
    пер id: Строка
    пер name: Строка
    пер tag_name: Строка
    пер description: Строка
    пер ref: Строка
    пер assets: Releases_Create_Assets_Data

    конструктор(id, tag_name, ref, assets)
;


перечисление Releases_Create_Asset_LinkType
    other умолчание,
    runbook,
    image,
    package
;


структура Releases_Create_Assets_Data
    пер links: Массив
;

структура Releases_Create_Assets_Link_Data
    пер name: Строка
    пер url: Строка
//    пер filepath: Строка
    пер link_type: Releases_Create_Asset_LinkType

    конструктор(name, url)
;

структура ОписаниеАссетов
    пер имяПроекта: Строка
    пер идЗадания: Строка
    пер списокДвоичныхФайлов: Массив
;


метод Jobs_Cancel(идЗадания: Строка, идПроекта: Строка, приватныйТокен: Строка, адресСервера: Строка)
    знч строкаЗапроса = Строки.Шаблон("https://$0/api/v4/projects/$1/jobs/$2/cancel", [адресСервера, идПроекта,
        идЗадания])
    пер запрос = КлиентHttp.ЗапросPost(строкаЗапроса)
    запрос.ДобавитьЗаголовок("PRIVATE-TOKEN", приватныйТокен)

    исп ответ = запрос.Выполнить()

    если ответ.КодСостояния != 201
        пер текстОшибки = Строки.Шаблон("Код состояния: $0, причина: $1\в\нТекст ответа:\в\н$2", [ответ.КодСостояния, ответ
            .Причина, ответ.Тело.ПрочитатьКакТекст()])
        выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
    ;

    Консоль.Записать("Задание прервано.")
;

метод Releases_Create(тег: Строка, имя: Строка, описание: Строка, файлОписанияАссертов: Строка, идКоммита: Строка,
    идПроекта: Строка, приватныйТокен: Строка, адресСервера: Строка)
    знч поток = новый СтроковыйПотокЗаписи()

    пер ссылки = новый Массив()
    знч описаниеАссетов = ПрочитатьОписаниеАссетов(файлОписанияАссертов)
    для имяФайла из описаниеАссетов.списокДвоичныхФайлов
        знч файлДляУрл = имяФайла.Заменить("\\", "/")
        знч файл = новый Файл(имяФайла)
        знч урлАссерта = Строки.Шаблон("https://$0/$1/-/jobs/$2/artifacts/raw$3", [адресСервера, описаниеАссетов
            .имяПроекта, описаниеАссетов.идЗадания, файлДляУрл])
        пер ассерт = новый Releases_Create_Assets_Link_Data(файл.Имя, урлАссерта)
        ссылки.Добавить(ассерт)
    ;

    пер ассеты = новый Releases_Create_Assets_Data(ссылки)
    пер параметры = новый Releases_Create_Data(идПроекта, тег, идКоммита, ассеты)
    параметры.name = имя
    параметры.description = описание

    СериализацияJson.ЗаписатьОбъект(поток, параметры)

    знч строкаЗапроса = Строки.Шаблон("https://$0/api/v4/projects/$1/releases", [адресСервера, идПроекта])
    пер запрос = КлиентHttp.ЗапросPost(строкаЗапроса)
    запрос.УстановитьТипСодержимого("application/json")
    запрос.ДобавитьЗаголовок("PRIVATE-TOKEN", приватныйТокен)
    запрос.УстановитьТело(поток.ВСтроку())

    исп ответ = запрос.Выполнить()

    если ответ.КодСостояния != 201
        пер текстОшибки = Строки.Шаблон("Код состояния: $0, причина: $1\в\нТекст ответа:\в\н$2\в\нТекст запроса:\в\н$3",
            [ответ.КодСостояния, ответ.Причина, ответ.Тело.ПрочитатьКакТекст(), поток.ВСтроку()])
        выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
    ;

    Консоль.Записать("Релиз создан.")
;

метод Pipelines_ListJobs(идСборочнойЛинии: Строка, идПроекта: Строка, приватныйТокен: Строка, адресСервера: Строка)
    знч строкаЗапроса = Строки.Шаблон("https://$0/api/v4/projects/$1/pipelines/$2/jobs?scope[]=success", [адресСервера,
        идПроекта, идСборочнойЛинии])
    пер запрос = КлиентHttp.ЗапросGet(строкаЗапроса)
    запрос.ДобавитьЗаголовок("PRIVATE-TOKEN", приватныйТокен)

    исп ответ = запрос.Выполнить()

    если ответ.КодСостояния != 200
        пер текстОшибки = Строки.Шаблон("Код состояния: $0, причина: $1\в\нТекст ответа:\в\н$2", [ответ.КодСостояния, ответ
            .Причина, ответ.Тело.ПрочитатьКакТекст()])
        выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
    ;

    знч данные = СериализацияJson.ПрочитатьОбъект(ответ.Тело)

    Консоль.Записать("Список заданий получен.")
;

метод ЗаписатьОписаниеАссетов(файлОписанияАссертов: Строка, путьКФайлам: Строка, путьСборкиПроекта: Строка, идЗадания: Строка,
    имяПроекта: Строка)
    пер списокДвоичныхФайлов = новый Массив()

    знч каталогСборкиПроекта = новый Файл(путьСборкиПроекта)

    для файл из Файлы.Найти(путьКФайлам)
        знч путьВнутриСборки = файл.Путь.Удалить(каталогСборкиПроекта.Путь)
        списокДвоичныхФайлов.Добавить(путьВнутриСборки)
    ;

    знч файлПараметров = новый Файл(файлОписанияАссертов)
    знч поток = файлПараметров.ОткрытьПотокЗаписи()

    знч описаниеАссетов = новый ОписаниеАссетов(имяПроекта, идЗадания, списокДвоичныхФайлов)

    СериализацияJson.ЗаписатьОбъект(поток, описаниеАссетов)
    поток.Закрыть()
;

метод ПрочитатьОписаниеАссетов(файлОписанияАссертов: Строка): ОписаниеАссетов
    знч файл = новый Файл(файлОписанияАссертов)

    возврат СериализацияJson.ПрочитатьОбъект(файл.ОткрытьПотокЧтения(), Тип(ОписаниеАссетов)) как ОписаниеАссетов
;