#!/usr/bin/executor

/*******************************************************************************
 * Copyright (c) 2020 Alexander Kapralov and Contributors
 * This program and the accompanying materials are made available under
 * the terms of the BSD 3-Clause License which is available at
 * https://spdx.org/licenses/BSD-3-Clause.html#licenseText
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Contributors:
 *    
 *
 ******************************************************************************/

структура Commits_List_Data
    пер id: Строка
    пер ref_name: Строка
    пер since: Строка
    пер until: Строка
    пер path: Строка
    пер all: Булево
    пер with_stats: Булево
    пер first_parent: Булево
    пер order: Строка = "default"

    конструктор(id)
;

структура Releases_Create_Data
    пер id: Строка
    пер name: Строка
    пер tag_name: Строка
    пер description: Строка
    пер ref: Строка
    пер assets: Releases_Create_Assets_Data

    конструктор(id, tag_name, ref, assets)
;


перечисление Releases_Create_Asset_LinkType
    other умолчание,
    runbook,
    image,
    package
;


структура Releases_Create_Assets_Data
    пер links: Массив
;

структура Releases_Create_Assets_Link_Data
    пер name: Строка
    пер url: Строка
//    пер filepath: Строка
    пер link_type: Releases_Create_Asset_LinkType

    конструктор(name, url)
;

структура ОписаниеАссетов
    пер имяПроекта: Строка
    пер идЗадания: Строка
    пер списокДвоичныхФайлов: Массив
;


метод Commits_List(датаС: Строка, имяВетки: Строка, имяПроекта: Строка, токен: Строка, адресСервера: Строка): Массив
    знч имяПроектаКодированное = имяПроекта.Заменить("/", "\%2F")

    знч строкаЗапроса = Строки.Шаблон("https://$0/api/v4/projects/$1/repository/commits?ref_name=$2&since=$3", [
        адресСервера, имяПроектаКодированное, имяВетки, датаС])
    пер запрос = КлиентHttp.ЗапросGet(строкаЗапроса)
    запрос.ДобавитьЗаголовок("PRIVATE-TOKEN", токен)

    исп ответ = запрос.Выполнить()

    если ответ.КодСостояния != 200
        знч текстОшибки = Строки.Шаблон(
            "Строка запроса: $0\в\нКод состояния: $1, причина: $2\в\нТекст ответа:\в\н$3\в\н", [строкаЗапроса, ответ
            .КодСостояния, ответ.Причина, ответ.Тело.ПрочитатьКакТекст()])
        выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
    ;

    знч данные = СериализацияJson.ПрочитатьМассив(ответ.Тело)

    возврат данные
;

метод Commits_Exists(датаС: Строка, имяВетки: Строка, имяПроекта: Строка, токен: Строка, адресСервера: Строка): Булево
    знч коммиты = Commits_List(датаС, имяВетки, имяПроекта, токен, адресСервера)

    возврат не коммиты.Пусто()
;

метод Jobs_Cancel(идЗадания: Строка, идПроекта: Строка, токен: Строка, адресСервера: Строка)
    знч строкаЗапроса = Строки.Шаблон("https://$0/api/v4/projects/$1/jobs/$2/cancel", [адресСервера, идПроекта,
        идЗадания])
    пер запрос = КлиентHttp.ЗапросPost(строкаЗапроса)
    запрос.ДобавитьЗаголовок("PRIVATE-TOKEN", токен)

    исп ответ = запрос.Выполнить()

    если ответ.КодСостояния != 201
        знч текстОшибки = Строки.Шаблон(
            "Строка запроса: $0\в\нКод состояния: $1, причина: $2\в\нТекст ответа:\в\н$3\в\н", [строкаЗапроса, ответ
            .КодСостояния, ответ.Причина, ответ.Тело.ПрочитатьКакТекст()])
        выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
    ;

    Консоль.Записать("Задание прервано.")
;

метод JobArtifacts_DownloadFile(имяФайла: Строка, имяЗадания: Строка, имяВетки: Строка, идПроекта: Строка, токен: Строка,
    адресСервера: Строка)
    знч строкаЗапроса = Строки.Шаблон("https://$0/api/v4/projects/$1/jobs/artifacts/$2/raw/$3?job=$4", [адресСервера, идПроекта,
        имяВетки, имяФайла, имяЗадания])
    пер запрос = КлиентHttp.ЗапросGet(строкаЗапроса)
    запрос.ДобавитьЗаголовок("PRIVATE-TOKEN", токен)

    исп ответ = запрос.Выполнить()

    если ответ.КодСостояния != 200 и ответ.КодСостояния != 404
        знч текстОшибки = Строки.Шаблон(
            "Строка запроса: $0\в\нКод состояния: $1, причина: $2\в\нТекст ответа:\в\н$3\в\н", [строкаЗапроса, ответ
            .КодСостояния, ответ.Причина, ответ.Тело.ПрочитатьКакТекст()])
        выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
    ;

    если ответ.КодСостояния == 200
        исп потокЗаписи = новый Файл(имяФайла).ОткрытьПотокЗаписи()
        ответ.Тело.КопироватьВ(потокЗаписи)

        Консоль.Записать("Файл загружен.")
    иначе
        Консоль.Записать("Файл для загрузки отсутствует.")
    ;
;

метод Pipelines_ListJobs(идСборочнойЛинии: Строка, идПроекта: Строка, токен: Строка, адресСервера: Строка)
    знч строкаЗапроса = Строки.Шаблон("https://$0/api/v4/projects/$1/pipelines/$2/jobs?scope[]=success", [адресСервера,
        идПроекта, идСборочнойЛинии])
    пер запрос = КлиентHttp.ЗапросGet(строкаЗапроса)
    запрос.ДобавитьЗаголовок("PRIVATE-TOKEN", токен)

    исп ответ = запрос.Выполнить()

    если ответ.КодСостояния != 200
        знч текстОшибки = Строки.Шаблон(
            "Строка запроса: $0\в\нКод состояния: $1, причина: $2\в\нТекст ответа:\в\н$3\в\н", [строкаЗапроса, ответ
            .КодСостояния, ответ.Причина, ответ.Тело.ПрочитатьКакТекст()])
        выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
    ;

    знч данные = СериализацияJson.ПрочитатьОбъект(ответ.Тело)

    Консоль.Записать("Список заданий получен.")
;

метод Releases_Create(тег: Строка, имя: Строка, описание: Строка, файлОписанияАссертов: Строка, идКоммита: Строка,
    идПроекта: Строка, токен: Строка, адресСервера: Строка)
    пер ссылки = новый Массив()
    знч описаниеАссетов = ПрочитатьОписаниеАссетов(файлОписанияАссертов)
    для имяФайла из описаниеАссетов.списокДвоичныхФайлов
        знч файлДляУрл = имяФайла.Заменить("\\", "/")
        знч файл = новый Файл(имяФайла)
        знч урлАссерта = Строки.Шаблон("https://$0/$1/-/jobs/$2/artifacts/raw$3", [адресСервера, описаниеАссетов
            .имяПроекта, описаниеАссетов.идЗадания, файлДляУрл])
        знч ассерт = новый Releases_Create_Assets_Link_Data(файл.Имя, урлАссерта)
        ссылки.Добавить(ассерт)
    ;

    пер ассеты = новый Releases_Create_Assets_Data(ссылки)
    пер параметры = новый Releases_Create_Data(идПроекта, тег, идКоммита, ассеты)
    параметры.name = имя
    параметры.description = описание

    исп поток = новый СтроковыйПотокЗаписи()
    СериализацияJson.ЗаписатьОбъект(поток, параметры)

    знч строкаЗапроса = Строки.Шаблон("https://$0/api/v4/projects/$1/releases", [адресСервера, идПроекта])
    пер запрос = КлиентHttp.ЗапросPost(строкаЗапроса)
    запрос.ДобавитьЗаголовок("JOB-TOKEN", токен)

    запрос.УстановитьТипСодержимого("application/json")
    запрос.УстановитьТело(поток.ВСтроку())

    исп ответ = запрос.Выполнить()

    если ответ.КодСостояния != 201
        знч текстОшибки = Строки.Шаблон(
            "Строка запроса: $0\в\нКод состояния: $1, причина: $2\в\нТекст ответа:\в\н$3\в\нТекст запроса:\в\н$4", [
            строкаЗапроса, ответ.КодСостояния, ответ.Причина, ответ.Тело.ПрочитатьКакТекст(), поток.ВСтроку()])
        выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
    ;

    Консоль.Записать("Релиз создан.")
;

метод Releases_List(идПроекта: Строка, токен: Строка, адресСервера: Строка): Массив
    знч строкаЗапроса = Строки.Шаблон("https://$0/api/v4/projects/$1/releases", [адресСервера, идПроекта])
    пер запрос = КлиентHttp.ЗапросGet(строкаЗапроса)
    запрос.ДобавитьЗаголовок("PRIVATE-TOKEN", токен)

    исп ответ = запрос.Выполнить()

    если ответ.КодСостояния != 200
        знч текстОшибки = Строки.Шаблон(
            "Строка запроса: $0\в\нКод состояния: $1, причина: $2\в\нТекст ответа:\в\н$3\в\н", [строкаЗапроса, ответ
            .КодСостояния, ответ.Причина, ответ.Тело.ПрочитатьКакТекст()])
        выбросить новый ИсключениеНедопустимоеСостояние(текстОшибки)
    ;

    знч данные = СериализацияJson.ПрочитатьМассив(ответ.Тело)

    возврат данные
;

метод Releases_LastDate(идПроекта: Строка, токен: Строка, адресСервера: Строка): ДатаВремя
    знч релизы = Releases_List(идПроекта, токен, адресСервера)

    если релизы.Пусто()
        возврат новый ДатаВремя(1, 1, 1)
    ;

    возврат новый ДатаВремя(релизы[0]["created_at"].Подстрока(0, 19))
;

метод ЗаписатьОписаниеАссетов(файлОписанияАссертов: Строка, путьКФайлам: Строка, путьСборкиПроекта: Строка, идЗадания: Строка,
    имяПроекта: Строка)
    пер списокДвоичныхФайлов = новый Массив()

    знч каталогСборкиПроекта = новый Файл(путьСборкиПроекта)

    для файл из Файлы.Найти(путьКФайлам)
        знч путьВнутриСборки = файл.Путь.Удалить(каталогСборкиПроекта.Путь)
        списокДвоичныхФайлов.Добавить(путьВнутриСборки)
    ;

    знч файлПараметров = новый Файл(файлОписанияАссертов)
    исп поток = файлПараметров.ОткрытьПотокЗаписи()

    знч описаниеАссетов = новый ОписаниеАссетов(имяПроекта, идЗадания, списокДвоичныхФайлов)

    СериализацияJson.ЗаписатьОбъект(поток, описаниеАссетов)
;

метод ПрочитатьОписаниеАссетов(файлОписанияАссертов: Строка): ОписаниеАссетов
    знч файл = новый Файл(файлОписанияАссертов)
    исп поток = файл.ОткрытьПотокЧтения()

    возврат СериализацияJson.ПрочитатьОбъект(поток, Тип(ОписаниеАссетов)) как ОписаниеАссетов
;

метод Commits_List_Data_НастройкиЗаписиJson(данные: Commits_List_Data): НастройкиЗаписиОбъектовJson
    пер настройки = новый НастройкиЗаписиОбъектовJson()

    пер игнорируемыеСвойства = новый Массив()
    знч всеСтроковыеСвойства = ["ref_name", "since", "until", "path"]
    для свойство из всеСтроковыеСвойства
        если (данные[свойство] как Строка).Пусто()
            игнорируемыеСвойства.Добавить(свойство)
        ;
    ;
    знч всеБулевоСвойства = ["all", "with_stats", "first_parent"]
    для свойство из всеБулевоСвойства
        если не (данные[свойство] как Булево)
            игнорируемыеСвойства.Добавить(свойство)
        ;
    ;

    настройки.ИгнорируемыеСвойства = {Тип(Commits_List_Data) : новый Множество(игнорируемыеСвойства)}

    возврат настройки
;